%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: diagram_bp.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Shanon McIntyre
%%CreationDate: 5/4/2009
%%BoundingBox: 0 0 369 231
%%HiResBoundingBox: 0 0 368.5689 230.6670
%%CropBox: 0 0 368.5689 230.6670
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 18935 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45777177717771774D7771777177717771777177717771774D777177
%7177717771777177717771774D77717771777177717771774D7771774D77
%717771777177717771774D7771777177717771777177717771774D777177
%71777177717771774D7771774D7771CBFD19FF4D76FD055276FD045251FD
%04527651FD045276FD04525176FD045251525253527651FD045276FD0752
%5352524BFD045276FD055276FD045251765252527651FD045276FD055276
%FD07525352524B77A2FD19FF7776AFAFAFA9FFA8AFA9AFAFCAA8AFAFAFA8
%CAAFAFA9AFA7AFA9AFAFCAA8AFAFAFA8CAAFAFA9AFA8CAA9AFAFAFA1AFAF
%AFA9CAA8AFA9AFA8CAA9AFAFAFA1AFAFAFA9AFA7AFA9AFAFCAA8AFAFAFA8
%CAAFAFA9AFA7AFA9AFA9AFA1AFAFAFA9CAA8AFA9AFA97C4CA9FD19FF4C59
%84AFA9AF84AF85AF84AF84AF84AFA9AF84AFA9AF84AFA9AF84AF84AF84AF
%A9AF84AFA9AF84AF84AF84AF85A984AFA9AF84AFA9AF84AF84AF84AF85A9
%84AFA9AF84AF85AF84AF84AF84AFA9AF84AFA9AF84AFA9AF84AFA9A984AF
%A9AF84AFA9AF84AF284DA2FD19FF7752AFAFAFA9AFA9AFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9
%AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9524CCBFD19FF
%4D2784AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA9AF85AFA8AF
%85AFA9AF84AFA9AF84AFA8AF85AFA9AF84AFA9AF84AFA9AF85AFA8AF85AF
%A9AF84AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA9AF85AFA9AF
%84AFA9AF84AFA9AF85A82753A2FD19FF777CAFA9AFA9A8A1AFA9AFA9C9A8
%AFA9AFA8A8A9AFA9AFA1AFA9AFA9C9A8AFA9AFA8A7A9AFA9AFA1A8A9AFA9
%AFA1AFA9AFA9A8A8AFA9AFA8C9A9AFA9AFA1A9A9AFA9A8A1AFA9AFA9CAA8
%AFA9AFA8A8A9AFA9AFA0AFA9AFA9A8A1AFA9AFA9A8A8AFA9AF7D7C4CA8FD
%19FF4C7C84AF84AFA8A884AFA9AFA1A985AF84A8A1AF84AFA8A784AFA9AF
%A1A885AF84A8A1AF84AF85A8A1AFA9AF84A7A8AF84AFA1A884AF85A8A1AF
%A9AF84A8A8AF84AFA8A784AFA9AFA1A885AF84A8A1AF84AFA8A784AFA9AF
%A8A885AF84AFA1A884AF847D5177A2FD19FF7752A8A9AFAFAFA9AFAFAFA9
%AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAF
%AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9
%AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAF76764C
%A9FD19FF4C527DAF85AFA9AF85AFA9AF84AFA9AF85AFA8AF85AFA9AF84AF
%A9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA9AF85AFA8AF85AFA9AF
%84AFA9AF85AFA9AF85AFA9AF85AFA9AF84AFA9AF85AFA8AF85AFA9AF84AF
%A9AF84AFA9AF85AFA8AF85AF7E755177A2FD19FF774BA8A9AFA9AFA9AFA9
%AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9
%AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9
%AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA97D75
%764CA9FD19FF4C767DAFA9AFA8A885AF84AFA8A984AF85A8A1AFA9AF84A8
%A8AF84AFA8A884AF85A9A1AFA9AF84A8A8AF84AFA9A884AFA9AFA8A885AF
%84A9A7AF84AFA9A884AFA9AF84A8A9AF84AFA8A884AF85A9A1AFA9AF84A8
%A8AF84AFA8A884AFA9AFA1A8A9A9529F5153A2FD19FF7775A8AFAFA9CAA1
%AFA9AFA9C3A8AFA9AFA8C9A9AFA9AFA1AFA9AFA9C9A8AFA9AFA8C9A9AFA9
%AFA1C9A9AFA9AFA1AFA9AFA9C9A7AFA9AFA8C9A9AFA9AFA1AFA9AFA9AFA1
%AFA9AFA9C9A7AFA9AFA8C9A9AFA9AFA1AFA9AFA9A8A1AFA9AFA9C9A7AF84
%7C9FA04CCBFD19FF4D517DAFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF
%85AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA8AF85AFA9AF85AFA9AF84AF
%A9AF85AFA8AF85AFA9AF84AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF
%85AFA9AF85AFA9AF85AFA9AF84AFA98475995153A2FD19FF77517DA9AFAF
%AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9
%AFAFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAF
%AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9
%AF7D9999764CA8FD19FF4C767CAF84AF85A984AFA9AF84AFA9AF84AF84AF
%84AFA9A984AFA9AF84AFA9AF84AF84AF84AFA9AF84AFA9AF84AF85AF84AF
%84AF84AFA9AF84AFA9AF84AF85AF84AF85A984AFA9AF84AFA9AF84AF84AF
%84AFA9A984AFA9AF84AFA9AF84AF84AF847C74994B53A2FD19FF7775A0A8
%AFA9A8A7AFA9AFA9CAA8AFA9AFA8CAA9AFA9AFA1AFA9AFA9CAA8AFA9AFA8
%CAA9AFA9AFA8CAA9AFA9AFA7AFA9AFA9A8A8AFA9AFA8CAAFAFA9AFA1AFA9
%AFA9AFA1AFA9AFA9CAA8AFA9AFA8CAA9AFA9AFA1AFA9AFA9AFA7AFA9AFA9
%A8A8AF769F997C53A9FD19FF4C7C75A8A8AFA8A784AFA8AFA1A8A8AF84A8
%A1AF84AFA8A1A8AFA8AFA1A8A8AF84A8A1AF84AFA8A7A1AFA8AF84A7A8AF
%84AFA1A884AFA8A8A1AFA8AF84A7A8AF84AFA8A184AFA8AFA1A8A8AF84A8
%A1AF84AFA8A1A8AFA8AFA8A7A8AF84AFA1A87D7C759F7577A2FD19FF7751
%9F84AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9
%AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9
%AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9
%AFA9AFA97D749F99764CA9FD19FF4C76747D85AF84AFA9AF84AF84AF84AF
%A9AF84AFA9AF84AFA9AF84AF84AF84AFA9AF84AFA9AF84AF84AF84AFA9A9
%84AFA9AF84AFA9AF84AF84AF84AFA9A984AFA9AF84AFA9AF84AF84AF84AF
%A9AF84AFA9AF84AFA9AF84AFA9A984AFA9AF84AF7699749F5153A2FD19FF
%77519F76AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9
%AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAF
%AFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9
%AFAFAFA9AFA87C999F99764CCBFD19FF4D7699757DAFA8AFA9AF84AFA8AF
%84AFA9AFA8AFA9AF85AFA8AF84AFA8A984AFA9AFA8AFA9AF84AFA8AF84AF
%A9A984AFA9AFA8AFA9AF84AFA8AF84AFA9A9A8AFA9AFA8A9A9AF84AFA8A9
%84AFA9AFA8AFA9AF84A9A8AF84AFA8A985AFA9AFA8A87599759F5153A2FD
%19FF777C9F757DA9A8A1AFA9AFA9C3A8AFA9AFA8C3A9AFA9AFA0A8A9AFA9
%C9A8AFA9AFA8C3A9AFA9AFA1C9A9AFA9AFA0A8A9AFA9A7A1AFA9AFA8C3A9
%AFA9AFA1A8A9AFA9A8A1AFA9AFA9C9A1AFA9AFA8C3A9AFA9AFA0AFA9AFA9
%A8A1AFA9AFA9C976A0999F99A053A8FD19FF4C76999951A8A9A984AFA9AF
%84AF85AF84AFA8AF84AF85A984AFA9AF84AFA9AF84AFA8AF84AF85AF84AF
%A9AF84A9A8AF84AFA8AF84AFA9AF84AFA9AF84AFA9AF84AFA9A984AFA9AF
%84AF85AF84AFA8AF84AF85A984AFA9AF84AF85AF84AFA97D749974995153
%A2FD19FF77759F999F7DAFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAF
%AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9
%AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAF
%AFA9AFA9AFA9AFAFAF7D9F999F99764CA9FD19FF4C769999747C84AF85AF
%A9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF84AFA9AF85AFA8AF85AFA9AF
%84AFA9AF85AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA9AF85AFA9AF85AF
%A9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF84AFA9AF85AF847C749F7599
%5177A2FD19FF77759F999F75A8A8AFA9AFA9A9A8AFA9AFA8A8AFAFA9AFA8
%AFA9AFA9A8A8AFA9AFA8A8A9AFA9AFA8A9A9AFA9AFA8AFA9AFA9AFA8AFA9
%AFA9A8A9AFA9AFA8AFA9AFA9AFA8AFA9AFA9A8A8AFA9AFA8A8A9AFA9AFA8
%AFA9AFAFAFA8AFA9AFA9AF769F999F997C4CA9FD19FF4C7C989F759976A7
%84AF84AFA0A884AF84A8A0AF84A984C3A8A984AFA0A884AF84A8A0AF84A9
%84A1A1A984AFA8A184AF84A9A1A884A984A8A0A984AF84A1A8AF84A9A8A1
%84A984AFA1A784AF84A8A0A884AF7EA1A8AF84A97E7D7DA984A9A7A07599
%759F7B53A2FD19FF77519F999F997CA8AFA9AFAFAF84AFAFAF84AF7D8484
%AFA8AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF
%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA97D527D7D
%7D53AFA97D52847D847D7D59A8759F999F99764CCBFD19FF4C76999F7599
%75A88452528459537DAF7D52FD047D527D7EAF85AFA8AF85AFA9AF84AFA9
%AF85AFA8AF85AFA9AF84AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF84
%AFA9AF85AFA8AF85AFA9AF52845952857D7DAF5959597D537D847D529F99
%99749F5153A2FD19FF77519F999F99997DA859A8527DA959A9A8537D597D
%5384847DA9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFA9AF
%A9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA97D7E7E
%7D7D52AFA97E527D7D7E5359597D759F999F99764CA8FD19FF4C76999974
%99757C7D7D7E7D52597DAF7E59527D597D52597DAFA9AF84AFA9AF84AF84
%AF84AFA9AF84AFA9AF84AFA9AF84AF84AF84AFA9AF84AFA9AF84AFA9AF84
%AFA9A984AFA9AF84AFA9AF84AF84AF84AF84A984AF84A884AF857D59AF76
%99749974995153A2FD19FF777C9F99A0999F7CA8A9AFA9C9A1AFA9AFA1C3
%A9AF847DA0FFA9AFA9C9A8AFA9AFA8C3A9AFA9AFA1C9A9AFA9AFA1A9A9AF
%A9C9A1AFA9AFA8C9A9AFA9AFA1A8A9AFA9A8A0AFA9AFA9C9A1AFA9AFA8C3
%A9AFA9AFA0AFA9AFA9CAA1AFA9AFA8A09FA0999F99A653A9FD19FF4C7699
%99759F99757DAFA9AFA8AFA9AF84AFA8AFA9AFA9A8A8AFA9AFA8AFA9AF84
%AFA8AF84AFA9A8A8AFA9AF85A8A8AF84AFA8A984AFA9AFA8AFA9AF85A9A8
%AF84AFA8A885AFA9AFA8AFA9AF84AFA8AF84AFA9A884AFA9AFA8A8A9AF85
%A8759F759F759F5177A2FD19FF77519F999F999F757DA9AFA9AFA9AFAFAF
%A9AFA9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AF
%A9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFAFAF
%A9AFA9AFA9AFA9AFA9AFA9AFA9AFAFAF7DA0999F999F99764CA9FD19FF4C
%7674997499749F75A984AF84AF84AFA9AF84AFA9AF84AFA9AF84AF84AF84
%AFA9AF84AFA9AF84AF84AF84AFA9A984AFA9AF84AFA9AF84AF84AF84AFA9
%A984AFA9AF84AFA9AF84AF84AF84AFA9AF84AFA9AF84AFA9AF84AFA9A984
%AF857D759F7499749F5153A2FD19FF77759F999F999F997C84AFAFAFA9AF
%AFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAF
%A8AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA8AFAFAFA9AFA8AFA9AFAFAFA9AF
%AFAFA9AFAFAFA9AFA8AFA9AFAFAFA8AFAFAF769F999F999F997C4CCBFD19
%FF4D7C989F7599999F7584A9AFA0A884AFA8A8A0AFA8AF84C3A8AF84AFA0
%A884AFA8A8A0AFA8AF84A7A1AF84AFA8A1A8AFA8AFA0A8A8AF84A8A0AF84
%AFA8A1A8AFA8AFA8C3A8AF84AFA1A784AFA8A8A0AFA8AF84C3A8AF84AFA7
%A184AF84769E9F759F759F7B77A2FD19FF77759F759F999F999F7DAFA9AF
%A9AFA9AFA9AFA9AFA9AFA8AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA8AFA9AF
%A9AFA9AFA9AFA9AFA8AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA8AFA9AFA9AF
%A9AFA9AFA9AFA9AFA9AFA8AFA9AFA9AFA8AFA9A8759F999F999F99764CA8
%FD19FF4C76999974997599747D85AF84AFA9AF84AF84AF84AFA9A984AFA9
%AF84AFA9AF84AF84AF84AFA9AF84AFA9AF84AFA9AF84AF84AF84AFA9AF84
%AFA9AF84AFA9AF84AFA9A984AFA9AF84AFA9AF84AF84AF84AFA9A984AFA9
%AF84AFA9AF59997599749974995153A2FD19FF77769F999F999F999F7DAF
%A9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AF
%AFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAF
%A9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA97D759F999F999F9976
%4CA9FD19FF4C769999749F7599747DA9AF84AFA9AF85AFA8AF85AFA9AF84
%AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA9AF85AFA8AF85AFA9
%AF84AFA9AF85AFA9AF85AFA9AF85AFA9AF84AFA9AF85AFA8AF85AFA9AF85
%AFA9AF84AFA9A976997599749F75995177A2FD19FF777B9F999F759F9F9F
%7DAFA9C3A8AFA9AFA8C9A9AFA9AFA1A9A9AFA9C9A8AFA9AFA8C9A9AFA9AF
%A7A8A9AFA9AFA0AFA9AFA9CAA7AFA9AFA8C3A9AFA9AFA1A9A9AFA9A9A1AF
%A9AFA9A7A1AFA9AFA8C9A9AFA9AFA1AFA9AFA9A8A1AF847C99C79F9F759F
%9F7C4CA9FD19FF4C76749F7599749F747D84AFA1A984AF85A8A1AFA9AF84
%A8A8AF84AFA7A884AF85A9A1AFA9AF84A8A8AF84AFA9A884AFA9AFA1A885
%AF84A9A7AF84AFA9A884AFA9AF84A8A9AF84AFA8A884AF85A8A1AFA9AF84
%A8A8AF84AFA8A884847599759F7599749F5153A2FD19FF77519F999F999F
%999F7DAFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAF
%A9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AF
%A9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AF7D9F99A0999F
%999F99764CCBFD19FF4D76999F7599759F747D85AFA8AF85AFA9AF84AFA9
%AF85AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF84
%AFA9AF85AFA8AF85AFA9AF84AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9
%AF85AFA9AF85AFA9AF857D7499759F7599749F5153A2FD19FF77759F759F
%999F999F7DAFA9AFA9AFA9AFA9AFA9AFA9AFA8AFA9AFA9AFA9AFA9AFA9AF
%A9AFA9AFA8AFA9AFA9AFA8AFA9AFA9AFA8AFA9AFA8AFA9AFA9AFA8AFA9AF
%A9AFA8AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA8AFA9AFA9AFA8AF769F999F
%999F999F997C4CA8FD19FF4C7C9999759F9F9F757DA8A9A0A884A984A8A0
%A984AF84A1A8AF84A9A0A884A984A89AA984AF84A1A1AF84A984A1A8A984
%AFA0A784AF84A8A0AF84A984A1A8A984AFA8A184AF84A9A0A784A984A8A0
%A984AFA8A084AF84A9A1C38476749F9F9F759F759F7B77A2FD19FF77759F
%999F999F999F7CAFA9AFA9AFA9AFAFAFA9AFAFAFA8AFAFAFA9AFAFAFA9AF
%A9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AF
%A9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF7E759F
%999F999F999F997C4CA9FD19FF4C769999749F759F757C84AF84AFA9AF85
%AFA8AF85AFA9AF84AFA9AF84AFA9AF85AFA8AF85AFA9AF84AFA9AF85AFA9
%AF85AFA8AF85AFA9AF84AFA9AF85AFA9AF85AFA9AF85AFA9AF84AFA9AF85
%AFA8AF85AFA9AF84AFA9AF85A87599749F7599749F75995177A2FD19FF77
%519F999F999F999F75A8A9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AF
%AFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAF
%A9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAF7D9F
%999F999F999F999F99764CA9FD19FF4C7674997499749F759952AF84AF84
%AFA9AF84AFA9AF84AFA9AF84AF84AF84AFA9AF84AFA9AF84AF84AF84AF85
%A984AFA9AF84AFA9AF84AF84AF84AF85A984AFA9AF84AF85AF84AF84AF84
%AFA9AF84AFA9AF84AFA9AF84AF8476749974997599749974995152A2FD19
%FF777C9F999F999F9F9F99A07DC9A8AFA9AFA8C9A9AFA9AFA1AFA9AFA9C9
%A8AFA9AFA8C9A9AFA9AFA7A8A9AFA9AFA1AFA9AFA9CAA7AFA9AFA8C9A9AF
%A9AFA1AFA9AFA9AFA1AFA9AFA9C9A1AFA9AFA8C9A9AFA9AFA1AFA9AFAFA8
%9F9F999F75C89F9F99A09F7C4CCBFD19FF4D76989F7599759F759974767D
%A984AFA9A8A1AFA9AFA8A8A8AF84AFA8A885AFA9A9A1AFA9AF84A8A8AF84
%AFA9A8A8AFA9AFA7A8A9AF84AFA7AF84AFA9A8A8AFA9AFA8A8A9AF84AFA8
%A884AFA9A8A1AFA9AF84A8A8AF85AF7C9F749F7599759F7599759F5153A2
%FD19FF77519F999F999F759F999F997C84AFA9AFA9AFA9AFA9AF7DA9A9AF
%A9AFA9A884AFA9AFA9AFA9AFA9AFA9AF84A884AFA9AFA9AFA9AFAFAFA9AF
%A9AFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AFA9AFA9AFA9AFAFAFA9AFA9AF
%847C999F999F999F759F999F99764CA8FD19FF4C76999974997599749974
%9974767EAF84AFA8AF597E7E537D84538484AF52A8847D53A97E7D84AF84
%7D7E7D53847D7D84AF84AF84AFA9AF84AFA9AF84AFA9AF84AFA9A984AFA9
%AF84AFA9AF84AF84AF84AFA9A984AF857D749F7499749975997499749951
%53A2FD19FF77759F999F999F999F999F999F997C84AFAFAFA8535284537D
%538453AFA97DA9AF527D537D847DA9A8527D7D7D537D7D7DA9AFA9AFAFAF
%A9AFAFAFA9AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF
%AFA9759F999F999F999F999F999F997C52A9FD19FF4CA09999759F9F9F75
%9F75999F9F75767DA8A1A952525276527D7D59A07D59AF84527653528452
%A77D7D52595276527E52AFA1A784AFA9A8A1AFA9AFA9C3A8AFA8AFA8A184
%AFA8AFA1A8A8AF84A8A1AF84AFA8A1A8AF5299999F759F759F9F9F759F75
%9F7B77A2FD19FF77519F999F759F9F9F999F999F999F99767DFFAF7E7DA9
%7DA8527D84A97EA9AFAF7DA884A853A9A8A87D8484A87D527DAFA9AFA9A9
%84A87D7D7D837D7D7DA884A984AFA8AFA9AFA9A8A8AFA9AFA8A9A9AFA9AF
%A8AF599F999F999F999F759F999F999F997C4CA9FD19FF4C767499749974
%9F7499749975997499757559AF85AF84AFA98484AF84AF84AFA9AF84AF85
%AF84AFA8AF84AF85A97DAF8484597D757675997575749974FD047576767D
%7DA884AFA9AF84AFA9AF84AFA9AF84A952757499759974997499759F7499
%74995153A2FD19FF77519F999F999F999F999F999F999F999F99A076A8A9
%AFA9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFA9AFA9AFAFAFA9A97D7C759F99
%9F999F999F999F999F999F999F999F757B757D7DA8A9AFAFAFA9AFAFAF84
%84769F999F999F999F999F99A0999F999F997C4CCBFD19FF4C76759F7599
%759F7599749F7599749F75997599757D7EA984AF84A8FD057D8484AFA9AF
%84AFA8AF85AF7D7C75999999759F7599749F7599749F7599759F7599759F
%99997475757D7DA984847D7E7C76759F9999749F7599749F7599759F7599
%74995153A2FD19FF777C9F759F999F9F9F999F759F999F999F9F9F759F75
%7C7C7D7C7C75A0759975A0767C7D8484AFA8CAA9A8527C9F9F999F999F99
%9F999F999F999F759F9F9F759F999F9F9F999F99C19976767C7CA0759F99
%9F9F9F999F759F9F9F999F999F9F9F999F99A052A8FD19FF4C7C9999759F
%999F759F75999F9F7599759F9F99759F999F749975999F9F7599759F9E99
%757C7676767D7599749F7599759F9F9F759F759F9F9F7599759F7599759F
%759F759F75999F9F7599749F9F99759F759F759F7599759F7599759F9F9F
%759F759F7577A2FD19FF77519F999F999F999F999F99A0999F999F999F99
%9F999F759F999F99A0999F999F999F999F999F75A0999F999F999F999F99
%9F999F999F99A0999F999F999F999F999F759F999F99A0999F999F999F99
%9F999F759F999F999F999F999F999F999F999F997C52A9FD19FF4C769999
%749F759F749F7599759F7599749F7599749F759F759F7599759F7599749F
%7599749F7599759F7599749F7599749F7599749F7599759F7599749F7599
%749F759F749F7599759F7599749F7599749F759F759F7599759F7599749F
%7599749F75995177A2FD19FF77519F999F999F999F999F999F759F999F75
%9F999F999F999F999F999F759F999F759F999F999F999F999F999F759F99
%9F999F999F999F999F999F999F759F999F999F999F999F999F759F999F75
%9F999F999F999F999F999F759F999F999F999F999F99764CA9FD19FF4C7C
%749F7599759F7599759F9F9F759F759F9F9F7599759F7599759F9F9F759F
%759F9F9F7599759F9999759F759F759F75999F9F7599759F9F99759F759F
%759F7599759F7599759F9F9F759F759F9F9F7599759F7599759F999F759F
%75999F9F7599759F7553A2FD19FF77759F999F999F9F9F999F999F999F99
%9F9F9F999F999F9F9F999F999F999F999F99C1999F999F9F9F999F999F9F
%9F999F999F9F9F999F9F9F999F999F9F9F999F999F9F9F999F999F9F9F99
%9F9F9F999F999F9F9F999F999F9F9F999F999F9F9F999F997C4CCBFD19FF
%4C76999F7599759F7599749F7599749F7599759F7599749F7599749F7599
%749F7599759F7599749F7599749F7599759F7599759F7599749F7599749F
%7599759F7599759F7599749F7599749F7599759F7599749F7599749F7599
%749F7599759F759974995153A2FD19FF77759F999F999F759F999F999F99
%9F999F999F999F999F759F999F999F999F999F999F999F999F999F999F99
%9F999F999F999F999F999F999F999F999F999F999F999F759F999F999F99
%9F999F999F999F999F759F999F999F999F999F999F999F999F997C52A8FD
%19FF4C7699997499759974997499759F7499749F75997499749974997499
%759F7499749F75997499749975997499749F759974997599749974997599
%7499749F75997499759974997499759F7499749F75997499749974997499
%749F749974997599749974995177A2FD19FF77769F999F999F9F9F999F99
%A0999F999F999F999F999F9F9F999F99A0999F999F999F999F999F99A099
%9F999F9F9F999F999F999F999F99A0999F999F9F9F999F999F9F9F999F99
%A09F9F999F999F999F999F9F9F999F999F9F9F999F999F999F999F997C53
%A9FD19FF4C7C9999759F9F9F759F75999F9F759F759F9F99759F759F759F
%75999F9F759F759F9F9F759F759F9F9F759F75A59999759F9F9F759F759F
%9F9F759F75A59999759F999F759F75999F9F759F759F9F99759F759F759F
%7599759F759F759F9F9F759F759F7B77A2FD19FF77519F999F999F999F99
%9F999F999F999F999F999F999F999F999F999F999F999F999F999F999F99
%9F999F999F999F999F999F999F999F999F999F999F999F999F999F999F99
%9F999F999F999F999F999F999F999F999F999F999F999F999F999F999F99
%764CA9FD19FF4C5251765175517651755175517551765175517551755176
%517551755175517651755175517551765175517651765176517551765175
%517651755175517651757575517651755175517551765175517551755176
%517551765176517651755176517551754B53A2FD19FF714C7752774C7753
%774C7752774C7752774C7752774C7753774C7752774C7752774C7752774C
%7753774C7752774C7752774C7753774C7753774C7753774C7753774C7752
%774C7752774C7752774C7752774C7753774C7752774C7752774C7753774C
%77527771CBFD19FFA2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8
%A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8
%A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8
%A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A2A8A8FDFCFFFD1CFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-05-04T20:57:26-06:00</xap:CreateDate>
         <xap:ModifyDate>2009-05-04T21:11:41-06:00</xap:ModifyDate>
         <xap:MetadataDate>2009-05-04T21:11:41-06:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>160</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AryH+XS+b4NQum1iexFnc&#xA;Lb+hFHC+/pJJy+NCaH1PHqDmzyZMniSANR2c7X684pcMbv4VVCul99/Bk035B8VBi8x3TNyUENDb&#xA;gcSwDHaM706ZXPJmr0y+xxMXa07PHdUeVc+nTl3qn/KgYf8AqZbz/kRbf80ZPxMn877A1fytlU4P&#xA;yD5ITL5iulbkwAWK3YcQxANTGu9OuQhkzV6pfINuXtaV+gmqHOufX9jj+Qf+kKo8x3XolWLN6Nvy&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:AD1235281E39DE11A326939BE220D0A7</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:05F051A72139DE11A326939BE220D0A7</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:A81235281E39DE11A326939BE220D0A7</stRef:instanceID>
            <stRef:documentID>uuid:DD6F55BC1939DE11A326939BE220D0A7</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>3.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 3.00</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>ARIAL.TTF</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Red</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Yellow</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Green</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Cyan</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Blue</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>CMYK Magenta</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=15 M=100 Y=90 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>14.999998</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>90.000004</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=90 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>90.000004</xapG:magenta>
                           <xapG:yellow>84.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=80 Y=95 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>80.000001</xapG:magenta>
                           <xapG:yellow>94.999999</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=50 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=35 Y=85 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>35.000002</xapG:magenta>
                           <xapG:yellow>84.999996</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=5 M=0 Y=90 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>5.000001</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>90.000004</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=20 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>19.999999</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=100 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=10 Y=100 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>84.999996</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=90 M=30 Y=95 K=30</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>90.000004</xapG:cyan>
                           <xapG:magenta>30.000001</xapG:magenta>
                           <xapG:yellow>94.999999</xapG:yellow>
                           <xapG:black>30.000001</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=0 Y=75 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=80 M=10 Y=45 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>80.000001</xapG:cyan>
                           <xapG:magenta>10.000002</xapG:magenta>
                           <xapG:yellow>44.999999</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=70 M=15 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>69.999999</xapG:cyan>
                           <xapG:magenta>14.999998</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=85 M=50 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>84.999996</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=95 Y=5 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>94.999999</xapG:magenta>
                           <xapG:yellow>5.000001</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=100 M=100 Y=25 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>25.000000</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=75 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>75.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=100 Y=0 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=100 Y=35 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000002</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>35.000002</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=10 M=100 Y=50 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>10.000002</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=95 Y=20 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>94.999999</xapG:magenta>
                           <xapG:yellow>19.999999</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=25 Y=40 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>25.000000</xapG:magenta>
                           <xapG:yellow>39.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=45 Y=50 K=5</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999998</xapG:cyan>
                           <xapG:magenta>44.999999</xapG:magenta>
                           <xapG:yellow>50.000000</xapG:yellow>
                           <xapG:black>5.000001</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=50 Y=60 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>60.000002</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=55 M=60 Y=65 K=40</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>55.000001</xapG:cyan>
                           <xapG:magenta>60.000002</xapG:magenta>
                           <xapG:yellow>64.999998</xapG:yellow>
                           <xapG:black>39.999998</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=25 M=40 Y=65 K=0</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>25.000000</xapG:cyan>
                           <xapG:magenta>39.999998</xapG:magenta>
                           <xapG:yellow>64.999998</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=30 M=50 Y=75 K=10</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>30.000001</xapG:cyan>
                           <xapG:magenta>50.000000</xapG:magenta>
                           <xapG:yellow>75.000000</xapG:yellow>
                           <xapG:black>10.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=35 M=60 Y=80 K=25</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>35.000002</xapG:cyan>
                           <xapG:magenta>60.000002</xapG:magenta>
                           <xapG:yellow>80.000001</xapG:yellow>
                           <xapG:black>25.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=65 Y=90 K=35</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999998</xapG:cyan>
                           <xapG:magenta>64.999998</xapG:magenta>
                           <xapG:yellow>90.000004</xapG:yellow>
                           <xapG:black>35.000002</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=40 M=70 Y=100 K=50</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>39.999998</xapG:cyan>
                           <xapG:magenta>69.999999</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>50.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=50 M=70 Y=80 K=70</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>50.000000</xapG:cyan>
                           <xapG:magenta>69.999999</xapG:magenta>
                           <xapG:yellow>80.000001</xapG:yellow>
                           <xapG:black>69.999999</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Grayscale</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=100</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>255</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=90</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>229</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=80</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>203</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=70</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>178</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=60</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>152</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=50</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>127</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=40</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>101</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=30</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>76</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=20</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>50</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=10</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>25</xapG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>K=5</xapG:swatchName>
                           <xapG:mode>GRAY</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:gray>12</xapG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -230.667 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 230.667 li
368.569 230.667 li
368.569 0 li
cp
clp
[1 0 0 1 0 0 ]ct
290.76 3.61377 mo
290.76 219.613 li
290.76 219.613 252.31 219.613 203.51 219.613 cv
200.94 219.613 198.34 219.613 195.72 219.613 cv
180 219.983 163 219.983 146.76 219.613 cv
143.99 219.613 141.22 219.613 138.46 219.613 cv
69.3301 219.613 2.75977 219.613 2.75977 219.613 cv
2.75977 3.61377 li
2.75977 3.61377 3.08008 5.10352 3.6499 7.78369 cv
7 21.9839 5 35.9834 8 49.9834 cv
8.5 52.6035 9.12012 55.1836 9.83984 57.7236 cv
16.71 73.6641 22.9302 90.0234 25.8599 106.884 cv
26.3501 109.693 26.75 112.523 27 115.363 cv
27.25 118.174 27.3501 120.964 27.3198 123.704 cv
26 134.983 27 145.983 34 153.983 cv
35.8799 155.983 37.8599 158.044 39.9399 160.104 cv
42.0298 162.164 44.21 164.224 46.46 166.214 cv
52.8701 172.044 60.6499 178.554 69.21 179.764 cv
72.0601 180.164 75 179.983 78 178.994 cv
82.6602 177.653 87.3301 177.544 92 178.094 cv
94.3301 178.374 96.6699 178.813 99 179.313 cv
103.5 180.653 108.25 182.063 113 182.773 cv
115.38 183.134 117.75 183.304 120.09 183.174 cv
149 163.983 185 165.983 216.12 179.004 cv
219.65 179.054 223.07 178.874 226.34 178.403 cv
239.43 176.544 250.12 170.113 254.86 153.534 cv
255.91 150.844 256.97 148.144 258.15 145.604 cv
259.33 143.054 260.63 140.674 262.16 138.613 cv
262.7 135.903 263.23 133.193 263.76 130.474 cv
264.29 127.764 264.85 125.034 265.41 122.304 cv
268.81 105.914 272.75 89.2334 275 71.9834 cv
278 50.9834 285 29.9834 289.45 9.14355 cv
290.29 5.60352 290.76 3.61377 290.76 3.61377 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.215686 .580392 1 .062745 cmyk
f
2.75977 3.61377 mo
290.76 3.61377 li
290.76 3.61377 290.29 5.60352 289.45 9.14355 cv
285 29.9834 278 50.9834 275 71.9834 cv
272.75 89.2334 268.81 105.914 265.41 122.304 cv
264.85 125.034 264.29 127.764 263.76 130.474 cv
263.23 133.193 262.7 135.903 262.16 138.613 cv
260.63 140.674 259.33 143.054 258.15 145.604 cv
256.97 148.144 255.91 150.844 254.86 153.534 cv
250.12 170.113 239.43 176.544 226.34 178.403 cv
223.07 178.874 219.65 179.054 216.12 179.004 cv
185 165.983 149 163.983 120.09 183.174 cv
117.75 183.304 115.38 183.134 113 182.773 cv
108.25 182.063 103.5 180.653 99 179.313 cv
96.6699 178.813 94.3301 178.374 92 178.094 cv
87.3301 177.544 82.6602 177.653 78 178.994 cv
75 179.983 72.0601 180.164 69.21 179.764 cv
60.6499 178.554 52.8701 172.044 46.46 166.214 cv
44.21 164.224 42.0298 162.164 39.9399 160.104 cv
37.8599 158.044 35.8799 155.983 34 153.983 cv
27 145.983 26 134.983 27.3198 123.704 cv
27.3501 120.964 27.25 118.174 27 115.363 cv
26.75 112.523 26.3501 109.693 25.8599 106.884 cv
22.9302 90.0234 16.71 73.6641 9.83984 57.7236 cv
9.12012 55.1836 8.5 52.6035 8 49.9834 cv
5 35.9834 7 21.9839 3.6499 7.78369 cv
3.08008 5.10352 2.75977 3.61377 2.75977 3.61377 cv
cp
.2 0 0 0 cmyk
f
3 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
2.75977 3.61377 mo
2.75977 219.613 li
2.75977 219.613 69.3301 219.613 138.46 219.613 cv
141.22 219.613 143.99 219.613 146.76 219.613 cv
163 219.983 180 219.983 195.72 219.613 cv
198.34 219.613 200.94 219.613 203.51 219.613 cv
252.31 219.613 290.76 219.613 290.76 219.613 cv
290.76 3.61377 li
2.75977 3.61377 li
cp
0 0 0 1 cmyk
@
1 lw
2.75977 3.61377 mo
2.75977 3.61377 3.08008 5.10352 3.6499 7.78369 cv
7 21.9839 5 35.9834 8 49.9834 cv
8.5 52.6035 9.12012 55.1836 9.83984 57.7236 cv
16.71 73.6641 22.9302 90.0234 25.8599 106.884 cv
26.3501 109.693 26.75 112.523 27 115.363 cv
27.25 118.174 27.3501 120.964 27.3198 123.704 cv
@
27.3198 123.704 mo
26 134.983 27 145.983 34 153.983 cv
35.8799 155.983 37.8599 158.044 39.9399 160.104 cv
42.0298 162.164 44.21 164.224 46.46 166.214 cv
52.8701 172.044 60.6499 178.554 69.21 179.764 cv
72.0601 180.164 75 179.983 78 178.994 cv
82.6602 177.653 87.3301 177.544 92 178.094 cv
94.3301 178.374 96.6699 178.813 99 179.313 cv
103.5 180.653 108.25 182.063 113 182.773 cv
115.38 183.134 117.75 183.304 120.09 183.174 cv
149 163.983 185 165.983 216.12 179.004 cv
219.65 179.054 223.07 178.874 226.34 178.403 cv
239.43 176.544 250.12 170.113 254.86 153.534 cv
255.91 150.844 256.97 148.144 258.15 145.604 cv
259.33 143.054 260.63 140.674 262.16 138.613 cv
@
262.16 138.613 mo
262.7 135.903 263.23 133.193 263.76 130.474 cv
264.29 127.764 264.85 125.034 265.41 122.304 cv
268.81 105.914 272.75 89.2334 275 71.9834 cv
278 50.9834 285 29.9834 289.45 9.14355 cv
290.29 5.60352 290.76 3.61377 290.76 3.61377 cv
@
.5 lw
4.25 20.084 mo
289.166 20.084 li
0 0 0 .4 cmyk
@
4.58301 35.418 mo
289.25 35.418 li
@
4.5835 49.417 mo
289.332 49.417 li
@
4.58301 64.75 mo
289.5 64.75 li
@
5.25 78.751 mo
289.416 78.751 li
@
5.58301 94.085 mo
289.416 94.085 li
@
5.5835 108.084 mo
289.166 108.084 li
@
5.58301 123.417 mo
289.5 123.417 li
@
5.25 136.751 mo
289.25 136.751 li
@
5.58301 152.085 mo
289.332 152.085 li
@
5.5835 166.083 mo
289.166 166.083 li
@
5.58301 181.417 mo
289.166 181.417 li
@
4.9165 195.751 mo
289.082 195.751 li
@
4.91602 211.083 mo
289.332 211.083 li
@
36.5835 5.25 mo
36.5835 220.415 li
@
52.5835 5.375 mo
52.5835 220.415 li
@
67.916 5.625 mo
67.916 220.415 li
@
83.25 4.41699 mo
83.25 221.083 li
@
98.916 5.625 mo
98.916 220.749 li
@
115.25 4.41602 mo
115.25 221.083 li
@
131.25 4.41699 mo
131.25 221.083 li
@
146.583 4.41699 mo
146.583 221.083 li
@
161.916 5.08398 mo
161.916 221.751 li
@
177.583 4.75 mo
177.583 221.415 li
@
193.916 5.08203 mo
193.916 221.749 li
@
209.916 5.08301 mo
209.916 221.749 li
@
225.25 5.08301 mo
225.25 221.749 li
@
240.582 5.75 mo
240.582 217.874 li
@
256.916 5.5 mo
256.916 217.874 li
@
273.25 5.16602 mo
273.25 217.874 li
@
289.25 5.33301 mo
289.437 218.062 li
@
20.75 4.91602 mo
20.75 221.581 li
@
6.0835 5.5 mo
6.0835 6.14453 5.52393 6.66699 4.8335 6.66699 cv
4.14307 6.66699 3.5835 6.14453 3.5835 5.5 cv
3.5835 4.85547 4.14307 4.33398 4.8335 4.33398 cv
5.52393 4.33398 6.0835 4.85547 6.0835 5.5 cv
cp
0 1 1 0 cmyk
f
21.8335 5.61523 mo
21.8335 6.25977 21.2739 6.78125 20.5835 6.78125 cv
19.8931 6.78125 19.3335 6.25977 19.3335 5.61523 cv
19.3335 4.9707 19.8931 4.44824 20.5835 4.44824 cv
21.2739 4.44824 21.8335 4.9707 21.8335 5.61523 cv
cp
f
37.8335 5.75 mo
37.8335 6.39453 37.2739 6.91602 36.5835 6.91602 cv
35.8931 6.91602 35.3335 6.39453 35.3335 5.75 cv
35.3335 5.10547 35.8931 4.58301 36.5835 4.58301 cv
37.2739 4.58301 37.8335 5.10547 37.8335 5.75 cv
cp
f
53.667 5.58301 mo
53.667 6.22754 53.1074 6.75 52.417 6.75 cv
51.7266 6.75 51.167 6.22754 51.167 5.58301 cv
51.167 4.93945 51.7266 4.41602 52.417 4.41602 cv
53.1074 4.41602 53.667 4.93945 53.667 5.58301 cv
cp
f
69.167 5.75 mo
69.167 6.39453 68.6074 6.91602 67.917 6.91602 cv
67.2266 6.91602 66.667 6.39453 66.667 5.75 cv
66.667 5.10547 67.2266 4.58301 67.917 4.58301 cv
68.6074 4.58301 69.167 5.10547 69.167 5.75 cv
cp
f
84.167 5.61523 mo
84.167 6.25977 83.6074 6.78223 82.917 6.78223 cv
82.2266 6.78223 81.667 6.25977 81.667 5.61523 cv
81.667 4.9707 82.2266 4.44922 82.917 4.44922 cv
83.6074 4.44922 84.167 4.9707 84.167 5.61523 cv
cp
f
100.167 5.69824 mo
100.167 6.34277 99.6074 6.86523 98.917 6.86523 cv
98.2266 6.86523 97.667 6.34277 97.667 5.69824 cv
97.667 5.05469 98.2266 4.53125 98.917 4.53125 cv
99.6074 4.53125 100.167 5.05469 100.167 5.69824 cv
cp
f
116.416 5.69824 mo
116.416 6.34277 115.857 6.86523 115.166 6.86523 cv
114.477 6.86523 113.916 6.34277 113.916 5.69824 cv
113.916 5.05469 114.477 4.53125 115.166 4.53125 cv
115.857 4.53125 116.416 5.05469 116.416 5.69824 cv
cp
f
132.5 5.69727 mo
132.5 6.3418 131.94 6.86523 131.25 6.86523 cv
130.56 6.86523 130 6.3418 130 5.69727 cv
130 5.05371 130.56 4.53125 131.25 4.53125 cv
131.94 4.53125 132.5 5.05371 132.5 5.69727 cv
cp
f
147.833 5.69824 mo
147.833 6.34277 147.273 6.86523 146.583 6.86523 cv
145.892 6.86523 145.333 6.34277 145.333 5.69824 cv
145.333 5.05469 145.892 4.53125 146.583 4.53125 cv
147.273 4.53125 147.833 5.05469 147.833 5.69824 cv
cp
f
163.333 5.61523 mo
163.333 6.25977 162.773 6.78223 162.083 6.78223 cv
161.392 6.78223 160.833 6.25977 160.833 5.61523 cv
160.833 4.9707 161.392 4.44922 162.083 4.44922 cv
162.773 4.44922 163.333 4.9707 163.333 5.61523 cv
cp
f
178.833 5.61523 mo
178.833 6.25977 178.273 6.78223 177.583 6.78223 cv
176.892 6.78223 176.333 6.25977 176.333 5.61523 cv
176.333 4.9707 176.892 4.44922 177.583 4.44922 cv
178.273 4.44922 178.833 4.9707 178.833 5.61523 cv
cp
f
195.082 5.53125 mo
195.082 6.17578 194.523 6.69922 193.832 6.69922 cv
193.142 6.69922 192.582 6.17578 192.582 5.53125 cv
192.582 4.8877 193.142 4.36523 193.832 4.36523 cv
194.523 4.36523 195.082 4.8877 195.082 5.53125 cv
cp
f
211.25 5.61523 mo
211.25 6.25977 210.689 6.78223 210 6.78223 cv
209.308 6.78223 208.75 6.25977 208.75 5.61523 cv
208.75 4.9707 209.308 4.44922 210 4.44922 cv
210.689 4.44922 211.25 4.9707 211.25 5.61523 cv
cp
f
226.416 5.61523 mo
226.416 6.25977 225.857 6.78223 225.166 6.78223 cv
224.476 6.78223 223.916 6.25977 223.916 5.61523 cv
223.916 4.9707 224.476 4.44922 225.166 4.44922 cv
225.857 4.44922 226.416 4.9707 226.416 5.61523 cv
cp
f
241.832 5.53125 mo
241.832 6.17578 241.273 6.69922 240.582 6.69922 cv
239.892 6.69922 239.332 6.17578 239.332 5.53125 cv
239.332 4.8877 239.892 4.36523 240.582 4.36523 cv
241.273 4.36523 241.832 4.8877 241.832 5.53125 cv
cp
f
258.166 5.69824 mo
258.166 6.34277 257.607 6.86523 256.916 6.86523 cv
256.226 6.86523 255.666 6.34277 255.666 5.69824 cv
255.666 5.05469 256.226 4.53125 256.916 4.53125 cv
257.607 4.53125 258.166 5.05469 258.166 5.69824 cv
cp
f
274.5 5.61426 mo
274.5 6.25879 273.939 6.78125 273.25 6.78125 cv
272.558 6.78125 272 6.25879 272 5.61426 cv
272 4.9707 272.558 4.44727 273.25 4.44727 cv
273.939 4.44727 274.5 4.9707 274.5 5.61426 cv
cp
f
290.416 5.53125 mo
290.416 6.17578 289.857 6.69824 289.166 6.69824 cv
288.476 6.69824 287.916 6.17578 287.916 5.53125 cv
287.916 4.88672 288.476 4.36523 289.166 4.36523 cv
289.857 4.36523 290.416 4.88672 290.416 5.53125 cv
cp
f
21.7085 19.916 mo
21.7085 20.5605 21.1489 21.084 20.4585 21.084 cv
19.7681 21.084 19.2085 20.5605 19.2085 19.916 cv
19.2085 19.2725 19.7681 18.75 20.4585 18.75 cv
21.1489 18.75 21.7085 19.2725 21.7085 19.916 cv
cp
f
37.7085 20.0508 mo
37.7085 20.6953 37.1489 21.2188 36.4585 21.2188 cv
35.7681 21.2188 35.2085 20.6953 35.2085 20.0508 cv
35.2085 19.4072 35.7681 18.8848 36.4585 18.8848 cv
37.1489 18.8848 37.7085 19.4072 37.7085 20.0508 cv
cp
f
53.542 19.8848 mo
53.542 20.5293 52.9824 21.0518 52.292 21.0518 cv
51.6016 21.0518 51.042 20.5293 51.042 19.8848 cv
51.042 19.2402 51.6016 18.7188 52.292 18.7188 cv
52.9824 18.7188 53.542 19.2402 53.542 19.8848 cv
cp
f
69.042 20.0508 mo
69.042 20.6953 68.4824 21.2188 67.792 21.2188 cv
67.1016 21.2188 66.542 20.6953 66.542 20.0508 cv
66.542 19.4072 67.1016 18.8848 67.792 18.8848 cv
68.4824 18.8848 69.042 19.4072 69.042 20.0508 cv
cp
f
84.042 19.917 mo
84.042 20.5615 83.4824 21.084 82.792 21.084 cv
82.1016 21.084 81.542 20.5615 81.542 19.917 cv
81.542 19.2734 82.1016 18.75 82.792 18.75 cv
83.4824 18.75 84.042 19.2734 84.042 19.917 cv
cp
f
100.042 20 mo
100.042 20.6445 99.4824 21.167 98.792 21.167 cv
98.1016 21.167 97.542 20.6445 97.542 20 cv
97.542 19.3555 98.1016 18.834 98.792 18.834 cv
99.4824 18.834 100.042 19.3555 100.042 20 cv
cp
f
116.291 20 mo
116.291 20.6445 115.732 21.167 115.041 21.167 cv
114.352 21.167 113.791 20.6445 113.791 20 cv
113.791 19.3555 114.352 18.834 115.041 18.834 cv
115.732 18.834 116.291 19.3555 116.291 20 cv
cp
f
132.375 20 mo
132.375 20.6445 131.815 21.166 131.125 21.166 cv
130.435 21.166 129.875 20.6445 129.875 20 cv
129.875 19.3555 130.435 18.833 131.125 18.833 cv
131.815 18.833 132.375 19.3555 132.375 20 cv
cp
f
147.708 20 mo
147.708 20.6445 147.148 21.167 146.458 21.167 cv
145.767 21.167 145.208 20.6445 145.208 20 cv
145.208 19.3555 145.767 18.834 146.458 18.834 cv
147.148 18.834 147.708 19.3555 147.708 20 cv
cp
f
163.208 19.917 mo
163.208 20.5615 162.648 21.084 161.958 21.084 cv
161.267 21.084 160.708 20.5615 160.708 19.917 cv
160.708 19.2734 161.267 18.75 161.958 18.75 cv
162.648 18.75 163.208 19.2734 163.208 19.917 cv
cp
f
178.708 19.917 mo
178.708 20.5615 178.148 21.084 177.458 21.084 cv
176.767 21.084 176.208 20.5615 176.208 19.917 cv
176.208 19.2734 176.767 18.75 177.458 18.75 cv
178.148 18.75 178.708 19.2734 178.708 19.917 cv
cp
f
194.957 19.834 mo
194.957 20.4785 194.398 21 193.707 21 cv
193.017 21 192.457 20.4785 192.457 19.834 cv
192.457 19.1895 193.017 18.667 193.707 18.667 cv
194.398 18.667 194.957 19.1895 194.957 19.834 cv
cp
f
211.125 19.917 mo
211.125 20.5615 210.564 21.084 209.875 21.084 cv
209.183 21.084 208.625 20.5615 208.625 19.917 cv
208.625 19.2734 209.183 18.75 209.875 18.75 cv
210.564 18.75 211.125 19.2734 211.125 19.917 cv
cp
f
226.291 19.917 mo
226.291 20.5615 225.732 21.084 225.041 21.084 cv
224.351 21.084 223.791 20.5615 223.791 19.917 cv
223.791 19.2734 224.351 18.75 225.041 18.75 cv
225.732 18.75 226.291 19.2734 226.291 19.917 cv
cp
f
241.707 19.834 mo
241.707 20.4785 241.148 21 240.457 21 cv
239.767 21 239.207 20.4785 239.207 19.834 cv
239.207 19.1895 239.767 18.667 240.457 18.667 cv
241.148 18.667 241.707 19.1895 241.707 19.834 cv
cp
f
258.041 20 mo
258.041 20.6445 257.482 21.167 256.791 21.167 cv
256.101 21.167 255.541 20.6445 255.541 20 cv
255.541 19.3555 256.101 18.834 256.791 18.834 cv
257.482 18.834 258.041 19.3555 258.041 20 cv
cp
f
274.375 19.916 mo
274.375 20.5605 273.814 21.083 273.125 21.083 cv
272.433 21.083 271.875 20.5605 271.875 19.916 cv
271.875 19.2715 272.433 18.75 273.125 18.75 cv
273.814 18.75 274.375 19.2715 274.375 19.916 cv
cp
f
21.8335 35.25 mo
21.8335 35.8945 21.2739 36.416 20.5835 36.416 cv
19.8931 36.416 19.3335 35.8945 19.3335 35.25 cv
19.3335 34.6055 19.8931 34.083 20.5835 34.083 cv
21.2739 34.083 21.8335 34.6055 21.8335 35.25 cv
cp
f
37.8335 35.3848 mo
37.8335 36.0293 37.2739 36.5508 36.5835 36.5508 cv
35.8931 36.5508 35.3335 36.0293 35.3335 35.3848 cv
35.3335 34.7402 35.8931 34.2178 36.5835 34.2178 cv
37.2739 34.2178 37.8335 34.7402 37.8335 35.3848 cv
cp
f
53.667 35.2178 mo
53.667 35.8623 53.1074 36.3848 52.417 36.3848 cv
51.7266 36.3848 51.167 35.8623 51.167 35.2178 cv
51.167 34.5742 51.7266 34.0508 52.417 34.0508 cv
53.1074 34.0508 53.667 34.5742 53.667 35.2178 cv
cp
f
69.167 35.3848 mo
69.167 36.0293 68.6074 36.5508 67.917 36.5508 cv
67.2266 36.5508 66.667 36.0293 66.667 35.3848 cv
66.667 34.7402 67.2266 34.2178 67.917 34.2178 cv
68.6074 34.2178 69.167 34.7402 69.167 35.3848 cv
cp
f
84.167 35.25 mo
84.167 35.8945 83.6074 36.417 82.917 36.417 cv
82.2266 36.417 81.667 35.8945 81.667 35.25 cv
81.667 34.6055 82.2266 34.084 82.917 34.084 cv
83.6074 34.084 84.167 34.6055 84.167 35.25 cv
cp
f
100.167 35.333 mo
100.167 35.9775 99.6074 36.5 98.917 36.5 cv
98.2266 36.5 97.667 35.9775 97.667 35.333 cv
97.667 34.6895 98.2266 34.166 98.917 34.166 cv
99.6074 34.166 100.167 34.6895 100.167 35.333 cv
cp
f
116.416 35.333 mo
116.416 35.9775 115.857 36.5 115.166 36.5 cv
114.477 36.5 113.916 35.9775 113.916 35.333 cv
113.916 34.6895 114.477 34.166 115.166 34.166 cv
115.857 34.166 116.416 34.6895 116.416 35.333 cv
cp
f
132.5 35.332 mo
132.5 35.9766 131.94 36.5 131.25 36.5 cv
130.56 36.5 130 35.9766 130 35.332 cv
130 34.6885 130.56 34.166 131.25 34.166 cv
131.94 34.166 132.5 34.6885 132.5 35.332 cv
cp
f
147.833 35.333 mo
147.833 35.9775 147.273 36.5 146.583 36.5 cv
145.892 36.5 145.333 35.9775 145.333 35.333 cv
145.333 34.6895 145.892 34.166 146.583 34.166 cv
147.273 34.166 147.833 34.6895 147.833 35.333 cv
cp
f
163.333 35.25 mo
163.333 35.8945 162.773 36.417 162.083 36.417 cv
161.392 36.417 160.833 35.8945 160.833 35.25 cv
160.833 34.6055 161.392 34.084 162.083 34.084 cv
162.773 34.084 163.333 34.6055 163.333 35.25 cv
cp
f
178.833 35.25 mo
178.833 35.8945 178.273 36.417 177.583 36.417 cv
176.892 36.417 176.333 35.8945 176.333 35.25 cv
176.333 34.6055 176.892 34.084 177.583 34.084 cv
178.273 34.084 178.833 34.6055 178.833 35.25 cv
cp
f
195.082 35.166 mo
195.082 35.8105 194.523 36.334 193.832 36.334 cv
193.142 36.334 192.582 35.8105 192.582 35.166 cv
192.582 34.5225 193.142 34 193.832 34 cv
194.523 34 195.082 34.5225 195.082 35.166 cv
cp
f
211.25 35.25 mo
211.25 35.8945 210.689 36.417 210 36.417 cv
209.308 36.417 208.75 35.8945 208.75 35.25 cv
208.75 34.6055 209.308 34.084 210 34.084 cv
210.689 34.084 211.25 34.6055 211.25 35.25 cv
cp
f
226.416 35.25 mo
226.416 35.8945 225.857 36.417 225.166 36.417 cv
224.476 36.417 223.916 35.8945 223.916 35.25 cv
223.916 34.6055 224.476 34.084 225.166 34.084 cv
225.857 34.084 226.416 34.6055 226.416 35.25 cv
cp
f
241.832 35.166 mo
241.832 35.8105 241.273 36.334 240.582 36.334 cv
239.892 36.334 239.332 35.8105 239.332 35.166 cv
239.332 34.5225 239.892 34 240.582 34 cv
241.273 34 241.832 34.5225 241.832 35.166 cv
cp
f
258.166 35.333 mo
258.166 35.9775 257.607 36.5 256.916 36.5 cv
256.226 36.5 255.666 35.9775 255.666 35.333 cv
255.666 34.6895 256.226 34.166 256.916 34.166 cv
257.607 34.166 258.166 34.6895 258.166 35.333 cv
cp
f
274.5 35.249 mo
274.5 35.8936 273.939 36.416 273.25 36.416 cv
272.558 36.416 272 35.8936 272 35.249 cv
272 34.6055 272.558 34.082 273.25 34.082 cv
273.939 34.082 274.5 34.6055 274.5 35.249 cv
cp
f
21.8335 49.166 mo
21.8335 49.8105 21.2739 50.334 20.5835 50.334 cv
19.8931 50.334 19.3335 49.8105 19.3335 49.166 cv
19.3335 48.5225 19.8931 48 20.5835 48 cv
21.2739 48 21.8335 48.5225 21.8335 49.166 cv
cp
f
37.8335 49.3008 mo
37.8335 49.9453 37.2739 50.4688 36.5835 50.4688 cv
35.8931 50.4688 35.3335 49.9453 35.3335 49.3008 cv
35.3335 48.6572 35.8931 48.1348 36.5835 48.1348 cv
37.2739 48.1348 37.8335 48.6572 37.8335 49.3008 cv
cp
f
53.667 49.1348 mo
53.667 49.7793 53.1074 50.3018 52.417 50.3018 cv
51.7266 50.3018 51.167 49.7793 51.167 49.1348 cv
51.167 48.4902 51.7266 47.9688 52.417 47.9688 cv
53.1074 47.9688 53.667 48.4902 53.667 49.1348 cv
cp
f
69.167 49.3008 mo
69.167 49.9453 68.6074 50.4688 67.917 50.4688 cv
67.2266 50.4688 66.667 49.9453 66.667 49.3008 cv
66.667 48.6572 67.2266 48.1348 67.917 48.1348 cv
68.6074 48.1348 69.167 48.6572 69.167 49.3008 cv
cp
f
84.167 49.167 mo
84.167 49.8115 83.6074 50.334 82.917 50.334 cv
82.2266 50.334 81.667 49.8115 81.667 49.167 cv
81.667 48.5234 82.2266 48 82.917 48 cv
83.6074 48 84.167 48.5234 84.167 49.167 cv
cp
f
100.167 49.25 mo
100.167 49.8945 99.6074 50.417 98.917 50.417 cv
98.2266 50.417 97.667 49.8945 97.667 49.25 cv
97.667 48.6055 98.2266 48.084 98.917 48.084 cv
99.6074 48.084 100.167 48.6055 100.167 49.25 cv
cp
f
116.416 49.25 mo
116.416 49.8945 115.857 50.417 115.166 50.417 cv
114.477 50.417 113.916 49.8945 113.916 49.25 cv
113.916 48.6055 114.477 48.084 115.166 48.084 cv
115.857 48.084 116.416 48.6055 116.416 49.25 cv
cp
f
132.5 49.25 mo
132.5 49.8945 131.94 50.416 131.25 50.416 cv
130.56 50.416 130 49.8945 130 49.25 cv
130 48.6055 130.56 48.083 131.25 48.083 cv
131.94 48.083 132.5 48.6055 132.5 49.25 cv
cp
f
147.833 49.25 mo
147.833 49.8945 147.273 50.417 146.583 50.417 cv
145.892 50.417 145.333 49.8945 145.333 49.25 cv
145.333 48.6055 145.892 48.084 146.583 48.084 cv
147.273 48.084 147.833 48.6055 147.833 49.25 cv
cp
f
163.333 49.167 mo
163.333 49.8115 162.773 50.334 162.083 50.334 cv
161.392 50.334 160.833 49.8115 160.833 49.167 cv
160.833 48.5234 161.392 48 162.083 48 cv
162.773 48 163.333 48.5234 163.333 49.167 cv
cp
f
178.833 49.167 mo
178.833 49.8115 178.273 50.334 177.583 50.334 cv
176.892 50.334 176.333 49.8115 176.333 49.167 cv
176.333 48.5234 176.892 48 177.583 48 cv
178.273 48 178.833 48.5234 178.833 49.167 cv
cp
f
195.082 49.084 mo
195.082 49.7285 194.523 50.25 193.832 50.25 cv
193.142 50.25 192.582 49.7285 192.582 49.084 cv
192.582 48.4395 193.142 47.917 193.832 47.917 cv
194.523 47.917 195.082 48.4395 195.082 49.084 cv
cp
f
211.25 49.167 mo
211.25 49.8115 210.689 50.334 210 50.334 cv
209.308 50.334 208.75 49.8115 208.75 49.167 cv
208.75 48.5234 209.308 48 210 48 cv
210.689 48 211.25 48.5234 211.25 49.167 cv
cp
f
226.416 49.167 mo
226.416 49.8115 225.857 50.334 225.166 50.334 cv
224.476 50.334 223.916 49.8115 223.916 49.167 cv
223.916 48.5234 224.476 48 225.166 48 cv
225.857 48 226.416 48.5234 226.416 49.167 cv
cp
f
241.832 49.084 mo
241.832 49.7285 241.273 50.25 240.582 50.25 cv
239.892 50.25 239.332 49.7285 239.332 49.084 cv
239.332 48.4395 239.892 47.917 240.582 47.917 cv
241.273 47.917 241.832 48.4395 241.832 49.084 cv
cp
f
258.166 49.25 mo
258.166 49.8945 257.607 50.417 256.916 50.417 cv
256.226 50.417 255.666 49.8945 255.666 49.25 cv
255.666 48.6055 256.226 48.084 256.916 48.084 cv
257.607 48.084 258.166 48.6055 258.166 49.25 cv
cp
f
274.5 49.166 mo
274.5 49.8105 273.939 50.333 273.25 50.333 cv
272.558 50.333 272 49.8105 272 49.166 cv
272 48.5215 272.558 48 273.25 48 cv
273.939 48 274.5 48.5215 274.5 49.166 cv
cp
f
22 64.666 mo
22 65.3105 21.4404 65.834 20.75 65.834 cv
20.0596 65.834 19.5 65.3105 19.5 64.666 cv
19.5 64.0225 20.0596 63.5 20.75 63.5 cv
21.4404 63.5 22 64.0225 22 64.666 cv
cp
f
38 64.8008 mo
38 65.4453 37.4404 65.9688 36.75 65.9688 cv
36.0596 65.9688 35.5 65.4453 35.5 64.8008 cv
35.5 64.1572 36.0596 63.6348 36.75 63.6348 cv
37.4404 63.6348 38 64.1572 38 64.8008 cv
cp
f
53.8335 64.6348 mo
53.8335 65.2793 53.2739 65.8018 52.5835 65.8018 cv
51.8931 65.8018 51.3335 65.2793 51.3335 64.6348 cv
51.3335 63.9902 51.8931 63.4688 52.5835 63.4688 cv
53.2739 63.4688 53.8335 63.9902 53.8335 64.6348 cv
cp
f
69.334 64.8008 mo
69.334 65.4453 68.7734 65.9688 68.084 65.9688 cv
67.3926 65.9688 66.834 65.4453 66.834 64.8008 cv
66.834 64.1572 67.3926 63.6348 68.084 63.6348 cv
68.7734 63.6348 69.334 64.1572 69.334 64.8008 cv
cp
f
84.334 64.667 mo
84.334 65.3115 83.7734 65.834 83.084 65.834 cv
82.3926 65.834 81.834 65.3115 81.834 64.667 cv
81.834 64.0234 82.3926 63.5 83.084 63.5 cv
83.7734 63.5 84.334 64.0234 84.334 64.667 cv
cp
f
100.334 64.75 mo
100.334 65.3945 99.7734 65.917 99.084 65.917 cv
98.3926 65.917 97.834 65.3945 97.834 64.75 cv
97.834 64.1055 98.3926 63.584 99.084 63.584 cv
99.7734 63.584 100.334 64.1055 100.334 64.75 cv
cp
f
116.583 64.75 mo
116.583 65.3945 116.023 65.917 115.333 65.917 cv
114.643 65.917 114.083 65.3945 114.083 64.75 cv
114.083 64.1055 114.643 63.584 115.333 63.584 cv
116.023 63.584 116.583 64.1055 116.583 64.75 cv
cp
f
132.666 64.75 mo
132.666 65.3945 132.107 65.916 131.416 65.916 cv
130.727 65.916 130.166 65.3945 130.166 64.75 cv
130.166 64.1055 130.727 63.583 131.416 63.583 cv
132.107 63.583 132.666 64.1055 132.666 64.75 cv
cp
f
148 64.75 mo
148 65.3945 147.441 65.917 146.75 65.917 cv
146.06 65.917 145.5 65.3945 145.5 64.75 cv
145.5 64.1055 146.06 63.584 146.75 63.584 cv
147.441 63.584 148 64.1055 148 64.75 cv
cp
f
163.5 64.667 mo
163.5 65.3115 162.939 65.834 162.25 65.834 cv
161.558 65.834 161 65.3115 161 64.667 cv
161 64.0234 161.558 63.5 162.25 63.5 cv
162.939 63.5 163.5 64.0234 163.5 64.667 cv
cp
f
179 64.667 mo
179 65.3115 178.439 65.834 177.75 65.834 cv
177.058 65.834 176.5 65.3115 176.5 64.667 cv
176.5 64.0234 177.058 63.5 177.75 63.5 cv
178.439 63.5 179 64.0234 179 64.667 cv
cp
f
195.25 64.584 mo
195.25 65.2285 194.689 65.75 194 65.75 cv
193.308 65.75 192.75 65.2285 192.75 64.584 cv
192.75 63.9395 193.308 63.417 194 63.417 cv
194.689 63.417 195.25 63.9395 195.25 64.584 cv
cp
f
211.416 64.667 mo
211.416 65.3115 210.855 65.834 210.166 65.834 cv
209.474 65.834 208.916 65.3115 208.916 64.667 cv
208.916 64.0234 209.474 63.5 210.166 63.5 cv
210.855 63.5 211.416 64.0234 211.416 64.667 cv
cp
f
226.582 64.667 mo
226.582 65.3115 226.023 65.834 225.332 65.834 cv
224.642 65.834 224.082 65.3115 224.082 64.667 cv
224.082 64.0234 224.642 63.5 225.332 63.5 cv
226.023 63.5 226.582 64.0234 226.582 64.667 cv
cp
f
242 64.584 mo
242 65.2285 241.439 65.75 240.75 65.75 cv
240.058 65.75 239.5 65.2285 239.5 64.584 cv
239.5 63.9395 240.058 63.417 240.75 63.417 cv
241.439 63.417 242 63.9395 242 64.584 cv
cp
f
258.332 64.75 mo
258.332 65.3945 257.773 65.917 257.082 65.917 cv
256.392 65.917 255.832 65.3945 255.832 64.75 cv
255.832 64.1055 256.392 63.584 257.082 63.584 cv
257.773 63.584 258.332 64.1055 258.332 64.75 cv
cp
f
274.666 64.666 mo
274.666 65.3105 274.105 65.833 273.416 65.833 cv
272.724 65.833 272.166 65.3105 272.166 64.666 cv
272.166 64.0215 272.724 63.5 273.416 63.5 cv
274.105 63.5 274.666 64.0215 274.666 64.666 cv
cp
f
21.8335 78.666 mo
21.8335 79.3105 21.2739 79.834 20.5835 79.834 cv
19.8931 79.834 19.3335 79.3105 19.3335 78.666 cv
19.3335 78.0225 19.8931 77.5 20.5835 77.5 cv
21.2739 77.5 21.8335 78.0225 21.8335 78.666 cv
cp
f
37.8335 78.8008 mo
37.8335 79.4453 37.2739 79.9688 36.5835 79.9688 cv
35.8931 79.9688 35.3335 79.4453 35.3335 78.8008 cv
35.3335 78.1572 35.8931 77.6348 36.5835 77.6348 cv
37.2739 77.6348 37.8335 78.1572 37.8335 78.8008 cv
cp
f
53.667 78.6348 mo
53.667 79.2793 53.1074 79.8018 52.417 79.8018 cv
51.7266 79.8018 51.167 79.2793 51.167 78.6348 cv
51.167 77.9902 51.7266 77.4688 52.417 77.4688 cv
53.1074 77.4688 53.667 77.9902 53.667 78.6348 cv
cp
f
69.167 78.8008 mo
69.167 79.4453 68.6074 79.9688 67.917 79.9688 cv
67.2266 79.9688 66.667 79.4453 66.667 78.8008 cv
66.667 78.1572 67.2266 77.6348 67.917 77.6348 cv
68.6074 77.6348 69.167 78.1572 69.167 78.8008 cv
cp
f
84.167 78.667 mo
84.167 79.3115 83.6074 79.834 82.917 79.834 cv
82.2266 79.834 81.667 79.3115 81.667 78.667 cv
81.667 78.0234 82.2266 77.5 82.917 77.5 cv
83.6074 77.5 84.167 78.0234 84.167 78.667 cv
cp
f
100.167 78.75 mo
100.167 79.3945 99.6074 79.917 98.917 79.917 cv
98.2266 79.917 97.667 79.3945 97.667 78.75 cv
97.667 78.1055 98.2266 77.584 98.917 77.584 cv
99.6074 77.584 100.167 78.1055 100.167 78.75 cv
cp
f
116.416 78.75 mo
116.416 79.3945 115.857 79.917 115.166 79.917 cv
114.477 79.917 113.916 79.3945 113.916 78.75 cv
113.916 78.1055 114.477 77.584 115.166 77.584 cv
115.857 77.584 116.416 78.1055 116.416 78.75 cv
cp
f
132.5 78.75 mo
132.5 79.3945 131.94 79.916 131.25 79.916 cv
130.56 79.916 130 79.3945 130 78.75 cv
130 78.1055 130.56 77.583 131.25 77.583 cv
131.94 77.583 132.5 78.1055 132.5 78.75 cv
cp
f
147.833 78.75 mo
147.833 79.3945 147.273 79.917 146.583 79.917 cv
145.892 79.917 145.333 79.3945 145.333 78.75 cv
145.333 78.1055 145.892 77.584 146.583 77.584 cv
147.273 77.584 147.833 78.1055 147.833 78.75 cv
cp
f
163.333 78.667 mo
163.333 79.3115 162.773 79.834 162.083 79.834 cv
161.392 79.834 160.833 79.3115 160.833 78.667 cv
160.833 78.0234 161.392 77.5 162.083 77.5 cv
162.773 77.5 163.333 78.0234 163.333 78.667 cv
cp
f
178.833 78.667 mo
178.833 79.3115 178.273 79.834 177.583 79.834 cv
176.892 79.834 176.333 79.3115 176.333 78.667 cv
176.333 78.0234 176.892 77.5 177.583 77.5 cv
178.273 77.5 178.833 78.0234 178.833 78.667 cv
cp
f
195.082 78.584 mo
195.082 79.2285 194.523 79.75 193.832 79.75 cv
193.142 79.75 192.582 79.2285 192.582 78.584 cv
192.582 77.9395 193.142 77.417 193.832 77.417 cv
194.523 77.417 195.082 77.9395 195.082 78.584 cv
cp
f
211.25 78.667 mo
211.25 79.3115 210.689 79.834 210 79.834 cv
209.308 79.834 208.75 79.3115 208.75 78.667 cv
208.75 78.0234 209.308 77.5 210 77.5 cv
210.689 77.5 211.25 78.0234 211.25 78.667 cv
cp
f
226.416 78.667 mo
226.416 79.3115 225.857 79.834 225.166 79.834 cv
224.476 79.834 223.916 79.3115 223.916 78.667 cv
223.916 78.0234 224.476 77.5 225.166 77.5 cv
225.857 77.5 226.416 78.0234 226.416 78.667 cv
cp
f
241.832 78.584 mo
241.832 79.2285 241.273 79.75 240.582 79.75 cv
239.892 79.75 239.332 79.2285 239.332 78.584 cv
239.332 77.9395 239.892 77.417 240.582 77.417 cv
241.273 77.417 241.832 77.9395 241.832 78.584 cv
cp
f
258.166 78.75 mo
258.166 79.3945 257.607 79.917 256.916 79.917 cv
256.226 79.917 255.666 79.3945 255.666 78.75 cv
255.666 78.1055 256.226 77.584 256.916 77.584 cv
257.607 77.584 258.166 78.1055 258.166 78.75 cv
cp
f
37.8335 93.9688 mo
37.8335 94.6133 37.2739 95.1348 36.5835 95.1348 cv
35.8931 95.1348 35.3335 94.6133 35.3335 93.9688 cv
35.3335 93.3242 35.8931 92.8018 36.5835 92.8018 cv
37.2739 92.8018 37.8335 93.3242 37.8335 93.9688 cv
cp
f
53.667 93.8018 mo
53.667 94.4463 53.1074 94.9688 52.417 94.9688 cv
51.7266 94.9688 51.167 94.4463 51.167 93.8018 cv
51.167 93.1582 51.7266 92.6348 52.417 92.6348 cv
53.1074 92.6348 53.667 93.1582 53.667 93.8018 cv
cp
f
69.167 93.9688 mo
69.167 94.6133 68.6074 95.1348 67.917 95.1348 cv
67.2266 95.1348 66.667 94.6133 66.667 93.9688 cv
66.667 93.3242 67.2266 92.8018 67.917 92.8018 cv
68.6074 92.8018 69.167 93.3242 69.167 93.9688 cv
cp
f
84.167 93.834 mo
84.167 94.4785 83.6074 95.001 82.917 95.001 cv
82.2266 95.001 81.667 94.4785 81.667 93.834 cv
81.667 93.1895 82.2266 92.668 82.917 92.668 cv
83.6074 92.668 84.167 93.1895 84.167 93.834 cv
cp
f
100.167 93.917 mo
100.167 94.5615 99.6074 95.084 98.917 95.084 cv
98.2266 95.084 97.667 94.5615 97.667 93.917 cv
97.667 93.2734 98.2266 92.75 98.917 92.75 cv
99.6074 92.75 100.167 93.2734 100.167 93.917 cv
cp
f
116.416 93.917 mo
116.416 94.5615 115.857 95.084 115.166 95.084 cv
114.477 95.084 113.916 94.5615 113.916 93.917 cv
113.916 93.2734 114.477 92.75 115.166 92.75 cv
115.857 92.75 116.416 93.2734 116.416 93.917 cv
cp
f
132.5 93.916 mo
132.5 94.5605 131.94 95.084 131.25 95.084 cv
130.56 95.084 130 94.5605 130 93.916 cv
130 93.2725 130.56 92.75 131.25 92.75 cv
131.94 92.75 132.5 93.2725 132.5 93.916 cv
cp
f
147.833 93.917 mo
147.833 94.5615 147.273 95.084 146.583 95.084 cv
145.892 95.084 145.333 94.5615 145.333 93.917 cv
145.333 93.2734 145.892 92.75 146.583 92.75 cv
147.273 92.75 147.833 93.2734 147.833 93.917 cv
cp
f
163.333 93.834 mo
163.333 94.4785 162.773 95.001 162.083 95.001 cv
161.392 95.001 160.833 94.4785 160.833 93.834 cv
160.833 93.1895 161.392 92.668 162.083 92.668 cv
162.773 92.668 163.333 93.1895 163.333 93.834 cv
cp
f
178.833 93.834 mo
178.833 94.4785 178.273 95.001 177.583 95.001 cv
176.892 95.001 176.333 94.4785 176.333 93.834 cv
176.333 93.1895 176.892 92.668 177.583 92.668 cv
178.273 92.668 178.833 93.1895 178.833 93.834 cv
cp
f
195.082 93.75 mo
195.082 94.3945 194.523 94.918 193.832 94.918 cv
193.142 94.918 192.582 94.3945 192.582 93.75 cv
192.582 93.1064 193.142 92.584 193.832 92.584 cv
194.523 92.584 195.082 93.1064 195.082 93.75 cv
cp
f
211.25 93.834 mo
211.25 94.4785 210.689 95.001 210 95.001 cv
209.308 95.001 208.75 94.4785 208.75 93.834 cv
208.75 93.1895 209.308 92.668 210 92.668 cv
210.689 92.668 211.25 93.1895 211.25 93.834 cv
cp
f
226.416 93.834 mo
226.416 94.4785 225.857 95.001 225.166 95.001 cv
224.476 95.001 223.916 94.4785 223.916 93.834 cv
223.916 93.1895 224.476 92.668 225.166 92.668 cv
225.857 92.668 226.416 93.1895 226.416 93.834 cv
cp
f
241.832 93.75 mo
241.832 94.3945 241.273 94.918 240.582 94.918 cv
239.892 94.918 239.332 94.3945 239.332 93.75 cv
239.332 93.1064 239.892 92.584 240.582 92.584 cv
241.273 92.584 241.832 93.1064 241.832 93.75 cv
cp
f
258.166 93.917 mo
258.166 94.5615 257.607 95.084 256.916 95.084 cv
256.226 95.084 255.666 94.5615 255.666 93.917 cv
255.666 93.2734 256.226 92.75 256.916 92.75 cv
257.607 92.75 258.166 93.2734 258.166 93.917 cv
cp
f
37.8335 107.969 mo
37.8335 108.613 37.2739 109.135 36.5835 109.135 cv
35.8931 109.135 35.3335 108.613 35.3335 107.969 cv
35.3335 107.324 35.8931 106.802 36.5835 106.802 cv
37.2739 106.802 37.8335 107.324 37.8335 107.969 cv
cp
f
53.667 107.802 mo
53.667 108.446 53.1074 108.969 52.417 108.969 cv
51.7266 108.969 51.167 108.446 51.167 107.802 cv
51.167 107.158 51.7266 106.635 52.417 106.635 cv
53.1074 106.635 53.667 107.158 53.667 107.802 cv
cp
f
69.167 107.969 mo
69.167 108.613 68.6074 109.135 67.917 109.135 cv
67.2266 109.135 66.667 108.613 66.667 107.969 cv
66.667 107.324 67.2266 106.802 67.917 106.802 cv
68.6074 106.802 69.167 107.324 69.167 107.969 cv
cp
f
84.167 107.834 mo
84.167 108.479 83.6074 109.001 82.917 109.001 cv
82.2266 109.001 81.667 108.479 81.667 107.834 cv
81.667 107.189 82.2266 106.668 82.917 106.668 cv
83.6074 106.668 84.167 107.189 84.167 107.834 cv
cp
f
100.167 107.917 mo
100.167 108.562 99.6074 109.084 98.917 109.084 cv
98.2266 109.084 97.667 108.562 97.667 107.917 cv
97.667 107.273 98.2266 106.75 98.917 106.75 cv
99.6074 106.75 100.167 107.273 100.167 107.917 cv
cp
f
116.416 107.917 mo
116.416 108.562 115.857 109.084 115.166 109.084 cv
114.477 109.084 113.916 108.562 113.916 107.917 cv
113.916 107.273 114.477 106.75 115.166 106.75 cv
115.857 106.75 116.416 107.273 116.416 107.917 cv
cp
f
132.5 107.916 mo
132.5 108.561 131.94 109.084 131.25 109.084 cv
130.56 109.084 130 108.561 130 107.916 cv
130 107.272 130.56 106.75 131.25 106.75 cv
131.94 106.75 132.5 107.272 132.5 107.916 cv
cp
f
147.833 107.917 mo
147.833 108.562 147.273 109.084 146.583 109.084 cv
145.892 109.084 145.333 108.562 145.333 107.917 cv
145.333 107.273 145.892 106.75 146.583 106.75 cv
147.273 106.75 147.833 107.273 147.833 107.917 cv
cp
f
163.333 107.834 mo
163.333 108.479 162.773 109.001 162.083 109.001 cv
161.392 109.001 160.833 108.479 160.833 107.834 cv
160.833 107.189 161.392 106.668 162.083 106.668 cv
162.773 106.668 163.333 107.189 163.333 107.834 cv
cp
f
178.833 107.834 mo
178.833 108.479 178.273 109.001 177.583 109.001 cv
176.892 109.001 176.333 108.479 176.333 107.834 cv
176.333 107.189 176.892 106.668 177.583 106.668 cv
178.273 106.668 178.833 107.189 178.833 107.834 cv
cp
f
195.082 107.75 mo
195.082 108.395 194.523 108.918 193.832 108.918 cv
193.142 108.918 192.582 108.395 192.582 107.75 cv
192.582 107.106 193.142 106.584 193.832 106.584 cv
194.523 106.584 195.082 107.106 195.082 107.75 cv
cp
f
211.25 107.834 mo
211.25 108.479 210.689 109.001 210 109.001 cv
209.308 109.001 208.75 108.479 208.75 107.834 cv
208.75 107.189 209.308 106.668 210 106.668 cv
210.689 106.668 211.25 107.189 211.25 107.834 cv
cp
f
226.416 107.834 mo
226.416 108.479 225.857 109.001 225.166 109.001 cv
224.476 109.001 223.916 108.479 223.916 107.834 cv
223.916 107.189 224.476 106.668 225.166 106.668 cv
225.857 106.668 226.416 107.189 226.416 107.834 cv
cp
f
241.832 107.75 mo
241.832 108.395 241.273 108.918 240.582 108.918 cv
239.892 108.918 239.332 108.395 239.332 107.75 cv
239.332 107.106 239.892 106.584 240.582 106.584 cv
241.273 106.584 241.832 107.106 241.832 107.75 cv
cp
f
258.166 107.917 mo
258.166 108.562 257.607 109.084 256.916 109.084 cv
256.226 109.084 255.666 108.562 255.666 107.917 cv
255.666 107.273 256.226 106.75 256.916 106.75 cv
257.607 106.75 258.166 107.273 258.166 107.917 cv
cp
f
37.8335 123.302 mo
37.8335 123.946 37.2739 124.468 36.5835 124.468 cv
35.8931 124.468 35.3335 123.946 35.3335 123.302 cv
35.3335 122.657 35.8931 122.135 36.5835 122.135 cv
37.2739 122.135 37.8335 122.657 37.8335 123.302 cv
cp
f
53.667 123.135 mo
53.667 123.779 53.1074 124.302 52.417 124.302 cv
51.7266 124.302 51.167 123.779 51.167 123.135 cv
51.167 122.491 51.7266 121.968 52.417 121.968 cv
53.1074 121.968 53.667 122.491 53.667 123.135 cv
cp
f
69.167 123.302 mo
69.167 123.946 68.6074 124.468 67.917 124.468 cv
67.2266 124.468 66.667 123.946 66.667 123.302 cv
66.667 122.657 67.2266 122.135 67.917 122.135 cv
68.6074 122.135 69.167 122.657 69.167 123.302 cv
cp
f
84.167 123.167 mo
84.167 123.812 83.6074 124.334 82.917 124.334 cv
82.2266 124.334 81.667 123.812 81.667 123.167 cv
81.667 122.522 82.2266 122.001 82.917 122.001 cv
83.6074 122.001 84.167 122.522 84.167 123.167 cv
cp
f
100.167 123.25 mo
100.167 123.895 99.6074 124.417 98.917 124.417 cv
98.2266 124.417 97.667 123.895 97.667 123.25 cv
97.667 122.606 98.2266 122.083 98.917 122.083 cv
99.6074 122.083 100.167 122.606 100.167 123.25 cv
cp
f
116.416 123.25 mo
116.416 123.895 115.857 124.417 115.166 124.417 cv
114.477 124.417 113.916 123.895 113.916 123.25 cv
113.916 122.606 114.477 122.083 115.166 122.083 cv
115.857 122.083 116.416 122.606 116.416 123.25 cv
cp
f
132.5 123.249 mo
132.5 123.894 131.94 124.417 131.25 124.417 cv
130.56 124.417 130 123.894 130 123.249 cv
130 122.605 130.56 122.083 131.25 122.083 cv
131.94 122.083 132.5 122.605 132.5 123.249 cv
cp
f
147.833 123.25 mo
147.833 123.895 147.273 124.417 146.583 124.417 cv
145.892 124.417 145.333 123.895 145.333 123.25 cv
145.333 122.606 145.892 122.083 146.583 122.083 cv
147.273 122.083 147.833 122.606 147.833 123.25 cv
cp
f
163.333 123.167 mo
163.333 123.812 162.773 124.334 162.083 124.334 cv
161.392 124.334 160.833 123.812 160.833 123.167 cv
160.833 122.522 161.392 122.001 162.083 122.001 cv
162.773 122.001 163.333 122.522 163.333 123.167 cv
cp
f
178.833 123.167 mo
178.833 123.812 178.273 124.334 177.583 124.334 cv
176.892 124.334 176.333 123.812 176.333 123.167 cv
176.333 122.522 176.892 122.001 177.583 122.001 cv
178.273 122.001 178.833 122.522 178.833 123.167 cv
cp
f
195.082 123.083 mo
195.082 123.728 194.523 124.251 193.832 124.251 cv
193.142 124.251 192.582 123.728 192.582 123.083 cv
192.582 122.439 193.142 121.917 193.832 121.917 cv
194.523 121.917 195.082 122.439 195.082 123.083 cv
cp
f
211.25 123.167 mo
211.25 123.812 210.689 124.334 210 124.334 cv
209.308 124.334 208.75 123.812 208.75 123.167 cv
208.75 122.522 209.308 122.001 210 122.001 cv
210.689 122.001 211.25 122.522 211.25 123.167 cv
cp
f
226.416 123.167 mo
226.416 123.812 225.857 124.334 225.166 124.334 cv
224.476 124.334 223.916 123.812 223.916 123.167 cv
223.916 122.522 224.476 122.001 225.166 122.001 cv
225.857 122.001 226.416 122.522 226.416 123.167 cv
cp
f
241.832 123.083 mo
241.832 123.728 241.273 124.251 240.582 124.251 cv
239.892 124.251 239.332 123.728 239.332 123.083 cv
239.332 122.439 239.892 121.917 240.582 121.917 cv
241.273 121.917 241.832 122.439 241.832 123.083 cv
cp
f
258.166 123.25 mo
258.166 123.895 257.607 124.417 256.916 124.417 cv
256.226 124.417 255.666 123.895 255.666 123.25 cv
255.666 122.606 256.226 122.083 256.916 122.083 cv
257.607 122.083 258.166 122.606 258.166 123.25 cv
cp
f
37.8335 136.802 mo
37.8335 137.446 37.2739 137.968 36.5835 137.968 cv
35.8931 137.968 35.3335 137.446 35.3335 136.802 cv
35.3335 136.157 35.8931 135.635 36.5835 135.635 cv
37.2739 135.635 37.8335 136.157 37.8335 136.802 cv
cp
f
53.667 136.635 mo
53.667 137.279 53.1074 137.802 52.417 137.802 cv
51.7266 137.802 51.167 137.279 51.167 136.635 cv
51.167 135.991 51.7266 135.468 52.417 135.468 cv
53.1074 135.468 53.667 135.991 53.667 136.635 cv
cp
f
69.167 136.802 mo
69.167 137.446 68.6074 137.968 67.917 137.968 cv
67.2266 137.968 66.667 137.446 66.667 136.802 cv
66.667 136.157 67.2266 135.635 67.917 135.635 cv
68.6074 135.635 69.167 136.157 69.167 136.802 cv
cp
f
84.167 136.667 mo
84.167 137.312 83.6074 137.834 82.917 137.834 cv
82.2266 137.834 81.667 137.312 81.667 136.667 cv
81.667 136.022 82.2266 135.501 82.917 135.501 cv
83.6074 135.501 84.167 136.022 84.167 136.667 cv
cp
f
100.167 136.75 mo
100.167 137.395 99.6074 137.917 98.917 137.917 cv
98.2266 137.917 97.667 137.395 97.667 136.75 cv
97.667 136.106 98.2266 135.583 98.917 135.583 cv
99.6074 135.583 100.167 136.106 100.167 136.75 cv
cp
f
116.416 136.75 mo
116.416 137.395 115.857 137.917 115.166 137.917 cv
114.477 137.917 113.916 137.395 113.916 136.75 cv
113.916 136.106 114.477 135.583 115.166 135.583 cv
115.857 135.583 116.416 136.106 116.416 136.75 cv
cp
f
132.5 136.749 mo
132.5 137.394 131.94 137.917 131.25 137.917 cv
130.56 137.917 130 137.394 130 136.749 cv
130 136.105 130.56 135.583 131.25 135.583 cv
131.94 135.583 132.5 136.105 132.5 136.749 cv
cp
f
147.833 136.75 mo
147.833 137.395 147.273 137.917 146.583 137.917 cv
145.892 137.917 145.333 137.395 145.333 136.75 cv
145.333 136.106 145.892 135.583 146.583 135.583 cv
147.273 135.583 147.833 136.106 147.833 136.75 cv
cp
f
163.333 136.667 mo
163.333 137.312 162.773 137.834 162.083 137.834 cv
161.392 137.834 160.833 137.312 160.833 136.667 cv
160.833 136.022 161.392 135.501 162.083 135.501 cv
162.773 135.501 163.333 136.022 163.333 136.667 cv
cp
f
178.833 136.667 mo
178.833 137.312 178.273 137.834 177.583 137.834 cv
176.892 137.834 176.333 137.312 176.333 136.667 cv
176.333 136.022 176.892 135.501 177.583 135.501 cv
178.273 135.501 178.833 136.022 178.833 136.667 cv
cp
f
195.082 136.583 mo
195.082 137.228 194.523 137.751 193.832 137.751 cv
193.142 137.751 192.582 137.228 192.582 136.583 cv
192.582 135.939 193.142 135.417 193.832 135.417 cv
194.523 135.417 195.082 135.939 195.082 136.583 cv
cp
f
211.25 136.667 mo
211.25 137.312 210.689 137.834 210 137.834 cv
209.308 137.834 208.75 137.312 208.75 136.667 cv
208.75 136.022 209.308 135.501 210 135.501 cv
210.689 135.501 211.25 136.022 211.25 136.667 cv
cp
f
226.416 136.667 mo
226.416 137.312 225.857 137.834 225.166 137.834 cv
224.476 137.834 223.916 137.312 223.916 136.667 cv
223.916 136.022 224.476 135.501 225.166 135.501 cv
225.857 135.501 226.416 136.022 226.416 136.667 cv
cp
f
241.832 136.583 mo
241.832 137.228 241.273 137.751 240.582 137.751 cv
239.892 137.751 239.332 137.228 239.332 136.583 cv
239.332 135.939 239.892 135.417 240.582 135.417 cv
241.273 135.417 241.832 135.939 241.832 136.583 cv
cp
f
258.166 136.75 mo
258.166 137.395 257.607 137.917 256.916 137.917 cv
256.226 137.917 255.666 137.395 255.666 136.75 cv
255.666 136.106 256.226 135.583 256.916 135.583 cv
257.607 135.583 258.166 136.106 258.166 136.75 cv
cp
f
37.8335 152.136 mo
37.8335 152.78 37.2739 153.302 36.5835 153.302 cv
35.8931 153.302 35.3335 152.78 35.3335 152.136 cv
35.3335 151.491 35.8931 150.968 36.5835 150.968 cv
37.2739 150.968 37.8335 151.491 37.8335 152.136 cv
cp
f
53.667 151.968 mo
53.667 152.612 53.1074 153.136 52.417 153.136 cv
51.7266 153.136 51.167 152.612 51.167 151.968 cv
51.167 151.325 51.7266 150.802 52.417 150.802 cv
53.1074 150.802 53.667 151.325 53.667 151.968 cv
cp
f
69.167 152.136 mo
69.167 152.78 68.6074 153.302 67.917 153.302 cv
67.2266 153.302 66.667 152.78 66.667 152.136 cv
66.667 151.491 67.2266 150.968 67.917 150.968 cv
68.6074 150.968 69.167 151.491 69.167 152.136 cv
cp
f
84.167 152.001 mo
84.167 152.646 83.6074 153.167 82.917 153.167 cv
82.2266 153.167 81.667 152.646 81.667 152.001 cv
81.667 151.356 82.2266 150.835 82.917 150.835 cv
83.6074 150.835 84.167 151.356 84.167 152.001 cv
cp
f
100.167 152.083 mo
100.167 152.728 99.6074 153.251 98.917 153.251 cv
98.2266 153.251 97.667 152.728 97.667 152.083 cv
97.667 151.44 98.2266 150.917 98.917 150.917 cv
99.6074 150.917 100.167 151.44 100.167 152.083 cv
cp
f
116.416 152.083 mo
116.416 152.728 115.857 153.251 115.166 153.251 cv
114.477 153.251 113.916 152.728 113.916 152.083 cv
113.916 151.44 114.477 150.917 115.166 150.917 cv
115.857 150.917 116.416 151.44 116.416 152.083 cv
cp
f
132.5 152.083 mo
132.5 152.728 131.94 153.251 131.25 153.251 cv
130.56 153.251 130 152.728 130 152.083 cv
130 151.438 130.56 150.917 131.25 150.917 cv
131.94 150.917 132.5 151.438 132.5 152.083 cv
cp
f
147.833 152.083 mo
147.833 152.728 147.273 153.251 146.583 153.251 cv
145.892 153.251 145.333 152.728 145.333 152.083 cv
145.333 151.44 145.892 150.917 146.583 150.917 cv
147.273 150.917 147.833 151.44 147.833 152.083 cv
cp
f
163.333 152.001 mo
163.333 152.646 162.773 153.167 162.083 153.167 cv
161.392 153.167 160.833 152.646 160.833 152.001 cv
160.833 151.356 161.392 150.835 162.083 150.835 cv
162.773 150.835 163.333 151.356 163.333 152.001 cv
cp
f
178.833 152.001 mo
178.833 152.646 178.273 153.167 177.583 153.167 cv
176.892 153.167 176.333 152.646 176.333 152.001 cv
176.333 151.356 176.892 150.835 177.583 150.835 cv
178.273 150.835 178.833 151.356 178.833 152.001 cv
cp
f
195.082 151.917 mo
195.082 152.562 194.523 153.085 193.832 153.085 cv
193.142 153.085 192.582 152.562 192.582 151.917 cv
192.582 151.272 193.142 150.751 193.832 150.751 cv
194.523 150.751 195.082 151.272 195.082 151.917 cv
cp
f
211.25 152.001 mo
211.25 152.646 210.689 153.167 210 153.167 cv
209.308 153.167 208.75 152.646 208.75 152.001 cv
208.75 151.356 209.308 150.835 210 150.835 cv
210.689 150.835 211.25 151.356 211.25 152.001 cv
cp
f
226.416 152.001 mo
226.416 152.646 225.857 153.167 225.166 153.167 cv
224.476 153.167 223.916 152.646 223.916 152.001 cv
223.916 151.356 224.476 150.835 225.166 150.835 cv
225.857 150.835 226.416 151.356 226.416 152.001 cv
cp
f
241.832 151.917 mo
241.832 152.562 241.273 153.085 240.582 153.085 cv
239.892 153.085 239.332 152.562 239.332 151.917 cv
239.332 151.272 239.892 150.751 240.582 150.751 cv
241.273 150.751 241.832 151.272 241.832 151.917 cv
cp
f
53.667 165.968 mo
53.667 166.612 53.1074 167.136 52.417 167.136 cv
51.7266 167.136 51.167 166.612 51.167 165.968 cv
51.167 165.325 51.7266 164.802 52.417 164.802 cv
53.1074 164.802 53.667 165.325 53.667 165.968 cv
cp
f
69.167 166.136 mo
69.167 166.78 68.6074 167.302 67.917 167.302 cv
67.2266 167.302 66.667 166.78 66.667 166.136 cv
66.667 165.491 67.2266 164.968 67.917 164.968 cv
68.6074 164.968 69.167 165.491 69.167 166.136 cv
cp
f
84.167 166.001 mo
84.167 166.646 83.6074 167.167 82.917 167.167 cv
82.2266 167.167 81.667 166.646 81.667 166.001 cv
81.667 165.356 82.2266 164.835 82.917 164.835 cv
83.6074 164.835 84.167 165.356 84.167 166.001 cv
cp
f
100.167 166.083 mo
100.167 166.728 99.6074 167.251 98.917 167.251 cv
98.2266 167.251 97.667 166.728 97.667 166.083 cv
97.667 165.44 98.2266 164.917 98.917 164.917 cv
99.6074 164.917 100.167 165.44 100.167 166.083 cv
cp
f
116.416 166.083 mo
116.416 166.728 115.857 167.251 115.166 167.251 cv
114.477 167.251 113.916 166.728 113.916 166.083 cv
113.916 165.44 114.477 164.917 115.166 164.917 cv
115.857 164.917 116.416 165.44 116.416 166.083 cv
cp
f
132.5 166.083 mo
132.5 166.728 131.94 167.251 131.25 167.251 cv
130.56 167.251 130 166.728 130 166.083 cv
130 165.438 130.56 164.917 131.25 164.917 cv
131.94 164.917 132.5 165.438 132.5 166.083 cv
cp
f
147.833 166.083 mo
147.833 166.728 147.273 167.251 146.583 167.251 cv
145.892 167.251 145.333 166.728 145.333 166.083 cv
145.333 165.44 145.892 164.917 146.583 164.917 cv
147.273 164.917 147.833 165.44 147.833 166.083 cv
cp
f
163.333 166.001 mo
163.333 166.646 162.773 167.167 162.083 167.167 cv
161.392 167.167 160.833 166.646 160.833 166.001 cv
160.833 165.356 161.392 164.835 162.083 164.835 cv
162.773 164.835 163.333 165.356 163.333 166.001 cv
cp
f
178.833 166.001 mo
178.833 166.646 178.273 167.167 177.583 167.167 cv
176.892 167.167 176.333 166.646 176.333 166.001 cv
176.333 165.356 176.892 164.835 177.583 164.835 cv
178.273 164.835 178.833 165.356 178.833 166.001 cv
cp
f
195.082 165.917 mo
195.082 166.562 194.523 167.085 193.832 167.085 cv
193.142 167.085 192.582 166.562 192.582 165.917 cv
192.582 165.272 193.142 164.751 193.832 164.751 cv
194.523 164.751 195.082 165.272 195.082 165.917 cv
cp
f
211.25 166.001 mo
211.25 166.646 210.689 167.167 210 167.167 cv
209.308 167.167 208.75 166.646 208.75 166.001 cv
208.75 165.356 209.308 164.835 210 164.835 cv
210.689 164.835 211.25 165.356 211.25 166.001 cv
cp
f
226.416 166.001 mo
226.416 166.646 225.857 167.167 225.166 167.167 cv
224.476 167.167 223.916 166.646 223.916 166.001 cv
223.916 165.356 224.476 164.835 225.166 164.835 cv
225.857 164.835 226.416 165.356 226.416 166.001 cv
cp
f
241.832 165.917 mo
241.832 166.562 241.273 167.085 240.582 167.085 cv
239.892 167.085 239.332 166.562 239.332 165.917 cv
239.332 165.272 239.892 164.751 240.582 164.751 cv
241.273 164.751 241.832 165.272 241.832 165.917 cv
cp
f
116.25 181.499 mo
116.25 182.144 115.69 182.667 115 182.667 cv
114.31 182.667 113.75 182.144 113.75 181.499 cv
113.75 180.856 114.31 180.333 115 180.333 cv
115.69 180.333 116.25 180.856 116.25 181.499 cv
cp
f
5.9585 19.8018 mo
5.9585 20.4463 5.39893 20.9688 4.7085 20.9688 cv
4.01807 20.9688 3.4585 20.4463 3.4585 19.8018 cv
3.4585 19.1582 4.01807 18.6348 4.7085 18.6348 cv
5.39893 18.6348 5.9585 19.1582 5.9585 19.8018 cv
cp
0 0 1 0 cmyk
f
290.291 19.833 mo
290.291 20.4775 289.732 21 289.041 21 cv
288.351 21 287.791 20.4775 287.791 19.833 cv
287.791 19.1895 288.351 18.666 289.041 18.666 cv
289.732 18.666 290.291 19.1895 290.291 19.833 cv
cp
f
6.0835 35.1348 mo
6.0835 35.7793 5.52393 36.3018 4.8335 36.3018 cv
4.14307 36.3018 3.5835 35.7793 3.5835 35.1348 cv
3.5835 34.4902 4.14307 33.9688 4.8335 33.9688 cv
5.52393 33.9688 6.0835 34.4902 6.0835 35.1348 cv
cp
f
290.416 35.166 mo
290.416 35.8105 289.857 36.333 289.166 36.333 cv
288.476 36.333 287.916 35.8105 287.916 35.166 cv
287.916 34.5215 288.476 34 289.166 34 cv
289.857 34 290.416 34.5215 290.416 35.166 cv
cp
f
6.0835 49.0518 mo
6.0835 49.6963 5.52393 50.2188 4.8335 50.2188 cv
4.14307 50.2188 3.5835 49.6963 3.5835 49.0518 cv
3.5835 48.4082 4.14307 47.8848 4.8335 47.8848 cv
5.52393 47.8848 6.0835 48.4082 6.0835 49.0518 cv
cp
f
290.416 49.083 mo
290.416 49.7275 289.857 50.25 289.166 50.25 cv
288.476 50.25 287.916 49.7275 287.916 49.083 cv
287.916 48.4395 288.476 47.916 289.166 47.916 cv
289.857 47.916 290.416 48.4395 290.416 49.083 cv
cp
f
6.25 64.5518 mo
6.25 65.1963 5.69043 65.7188 5 65.7188 cv
4.30957 65.7188 3.75 65.1963 3.75 64.5518 cv
3.75 63.9082 4.30957 63.3848 5 63.3848 cv
5.69043 63.3848 6.25 63.9082 6.25 64.5518 cv
cp
f
290.582 64.583 mo
290.582 65.2275 290.023 65.75 289.332 65.75 cv
288.642 65.75 288.082 65.2275 288.082 64.583 cv
288.082 63.9395 288.642 63.416 289.332 63.416 cv
290.023 63.416 290.582 63.9395 290.582 64.583 cv
cp
f
6.0835 78.5518 mo
6.0835 79.1963 5.52393 79.7188 4.8335 79.7188 cv
4.14307 79.7188 3.5835 79.1963 3.5835 78.5518 cv
3.5835 77.9082 4.14307 77.3848 4.8335 77.3848 cv
5.52393 77.3848 6.0835 77.9082 6.0835 78.5518 cv
cp
f
274.5 78.666 mo
274.5 79.3105 273.939 79.833 273.25 79.833 cv
272.558 79.833 272 79.3105 272 78.666 cv
272 78.0215 272.558 77.5 273.25 77.5 cv
273.939 77.5 274.5 78.0215 274.5 78.666 cv
cp
f
290.416 78.583 mo
290.416 79.2275 289.857 79.75 289.166 79.75 cv
288.476 79.75 287.916 79.2275 287.916 78.583 cv
287.916 77.9395 288.476 77.416 289.166 77.416 cv
289.857 77.416 290.416 77.9395 290.416 78.583 cv
cp
f
6.0835 93.7188 mo
6.0835 94.3633 5.52393 94.8857 4.8335 94.8857 cv
4.14307 94.8857 3.5835 94.3633 3.5835 93.7188 cv
3.5835 93.0742 4.14307 92.5527 4.8335 92.5527 cv
5.52393 92.5527 6.0835 93.0742 6.0835 93.7188 cv
cp
f
21.8335 93.834 mo
21.8335 94.4785 21.2739 95 20.5835 95 cv
19.8931 95 19.3335 94.4785 19.3335 93.834 cv
19.3335 93.1895 19.8931 92.667 20.5835 92.667 cv
21.2739 92.667 21.8335 93.1895 21.8335 93.834 cv
cp
f
274.5 93.833 mo
274.5 94.4775 273.939 95 273.25 95 cv
272.558 95 272 94.4775 272 93.833 cv
272 93.1895 272.558 92.666 273.25 92.666 cv
273.939 92.666 274.5 93.1895 274.5 93.833 cv
cp
f
290.416 93.75 mo
290.416 94.3945 289.857 94.917 289.166 94.917 cv
288.476 94.917 287.916 94.3945 287.916 93.75 cv
287.916 93.1055 288.476 92.584 289.166 92.584 cv
289.857 92.584 290.416 93.1055 290.416 93.75 cv
cp
f
6.0835 107.719 mo
6.0835 108.363 5.52393 108.886 4.8335 108.886 cv
4.14307 108.886 3.5835 108.363 3.5835 107.719 cv
3.5835 107.074 4.14307 106.553 4.8335 106.553 cv
5.52393 106.553 6.0835 107.074 6.0835 107.719 cv
cp
f
21.8335 107.834 mo
21.8335 108.479 21.2739 109 20.5835 109 cv
19.8931 109 19.3335 108.479 19.3335 107.834 cv
19.3335 107.189 19.8931 106.667 20.5835 106.667 cv
21.2739 106.667 21.8335 107.189 21.8335 107.834 cv
cp
f
274.5 107.833 mo
274.5 108.478 273.939 109 273.25 109 cv
272.558 109 272 108.478 272 107.833 cv
272 107.189 272.558 106.666 273.25 106.666 cv
273.939 106.666 274.5 107.189 274.5 107.833 cv
cp
f
290.416 107.75 mo
290.416 108.395 289.857 108.917 289.166 108.917 cv
288.476 108.917 287.916 108.395 287.916 107.75 cv
287.916 107.105 288.476 106.584 289.166 106.584 cv
289.857 106.584 290.416 107.105 290.416 107.75 cv
cp
f
6.0835 123.052 mo
6.0835 123.696 5.52393 124.219 4.8335 124.219 cv
4.14307 124.219 3.5835 123.696 3.5835 123.052 cv
3.5835 122.407 4.14307 121.886 4.8335 121.886 cv
5.52393 121.886 6.0835 122.407 6.0835 123.052 cv
cp
f
21.8335 123.167 mo
21.8335 123.812 21.2739 124.333 20.5835 124.333 cv
19.8931 124.333 19.3335 123.812 19.3335 123.167 cv
19.3335 122.522 19.8931 122 20.5835 122 cv
21.2739 122 21.8335 122.522 21.8335 123.167 cv
cp
f
274.5 123.166 mo
274.5 123.811 273.939 124.333 273.25 124.333 cv
272.558 124.333 272 123.811 272 123.166 cv
272 122.522 272.558 121.999 273.25 121.999 cv
273.939 121.999 274.5 122.522 274.5 123.166 cv
cp
f
290.416 123.083 mo
290.416 123.728 289.857 124.25 289.166 124.25 cv
288.476 124.25 287.916 123.728 287.916 123.083 cv
287.916 122.438 288.476 121.917 289.166 121.917 cv
289.857 121.917 290.416 122.438 290.416 123.083 cv
cp
f
6.0835 136.552 mo
6.0835 137.196 5.52393 137.719 4.8335 137.719 cv
4.14307 137.719 3.5835 137.196 3.5835 136.552 cv
3.5835 135.907 4.14307 135.386 4.8335 135.386 cv
5.52393 135.386 6.0835 135.907 6.0835 136.552 cv
cp
f
21.8335 136.667 mo
21.8335 137.312 21.2739 137.833 20.5835 137.833 cv
19.8931 137.833 19.3335 137.312 19.3335 136.667 cv
19.3335 136.022 19.8931 135.5 20.5835 135.5 cv
21.2739 135.5 21.8335 136.022 21.8335 136.667 cv
cp
f
274.5 136.666 mo
274.5 137.311 273.939 137.833 273.25 137.833 cv
272.558 137.833 272 137.311 272 136.666 cv
272 136.022 272.558 135.499 273.25 135.499 cv
273.939 135.499 274.5 136.022 274.5 136.666 cv
cp
f
290.416 136.583 mo
290.416 137.228 289.857 137.75 289.166 137.75 cv
288.476 137.75 287.916 137.228 287.916 136.583 cv
287.916 135.938 288.476 135.417 289.166 135.417 cv
289.857 135.417 290.416 135.938 290.416 136.583 cv
cp
f
6.0835 151.886 mo
6.0835 152.53 5.52393 153.052 4.8335 153.052 cv
4.14307 153.052 3.5835 152.53 3.5835 151.886 cv
3.5835 151.241 4.14307 150.72 4.8335 150.72 cv
5.52393 150.72 6.0835 151.241 6.0835 151.886 cv
cp
f
21.8335 152.001 mo
21.8335 152.646 21.2739 153.167 20.5835 153.167 cv
19.8931 153.167 19.3335 152.646 19.3335 152.001 cv
19.3335 151.356 19.8931 150.833 20.5835 150.833 cv
21.2739 150.833 21.8335 151.356 21.8335 152.001 cv
cp
f
258.166 152.083 mo
258.166 152.728 257.607 153.251 256.916 153.251 cv
256.226 153.251 255.666 152.728 255.666 152.083 cv
255.666 151.44 256.226 150.917 256.916 150.917 cv
257.607 150.917 258.166 151.44 258.166 152.083 cv
cp
f
274.5 151.999 mo
274.5 152.644 273.939 153.167 273.25 153.167 cv
272.558 153.167 272 152.644 272 151.999 cv
272 151.356 272.558 150.833 273.25 150.833 cv
273.939 150.833 274.5 151.356 274.5 151.999 cv
cp
f
290.416 151.917 mo
290.416 152.562 289.857 153.083 289.166 153.083 cv
288.476 153.083 287.916 152.562 287.916 151.917 cv
287.916 151.272 288.476 150.751 289.166 150.751 cv
289.857 150.751 290.416 151.272 290.416 151.917 cv
cp
f
6.0835 165.886 mo
6.0835 166.53 5.52393 167.052 4.8335 167.052 cv
4.14307 167.052 3.5835 166.53 3.5835 165.886 cv
3.5835 165.241 4.14307 164.72 4.8335 164.72 cv
5.52393 164.72 6.0835 165.241 6.0835 165.886 cv
cp
f
21.8335 166.001 mo
21.8335 166.646 21.2739 167.167 20.5835 167.167 cv
19.8931 167.167 19.3335 166.646 19.3335 166.001 cv
19.3335 165.356 19.8931 164.833 20.5835 164.833 cv
21.2739 164.833 21.8335 165.356 21.8335 166.001 cv
cp
f
37.8335 166.136 mo
37.8335 166.78 37.2739 167.302 36.5835 167.302 cv
35.8931 167.302 35.3335 166.78 35.3335 166.136 cv
35.3335 165.491 35.8931 164.968 36.5835 164.968 cv
37.2739 164.968 37.8335 165.491 37.8335 166.136 cv
cp
f
258.166 166.083 mo
258.166 166.728 257.607 167.251 256.916 167.251 cv
256.226 167.251 255.666 166.728 255.666 166.083 cv
255.666 165.44 256.226 164.917 256.916 164.917 cv
257.607 164.917 258.166 165.44 258.166 166.083 cv
cp
f
274.5 165.999 mo
274.5 166.644 273.939 167.167 273.25 167.167 cv
272.558 167.167 272 166.644 272 165.999 cv
272 165.356 272.558 164.833 273.25 164.833 cv
273.939 164.833 274.5 165.356 274.5 165.999 cv
cp
f
290.416 165.917 mo
290.416 166.562 289.857 167.083 289.166 167.083 cv
288.476 167.083 287.916 166.562 287.916 165.917 cv
287.916 165.272 288.476 164.751 289.166 164.751 cv
289.857 164.751 290.416 165.272 290.416 165.917 cv
cp
f
5.91699 181.302 mo
5.91699 181.946 5.35742 182.468 4.66699 182.468 cv
3.97656 182.468 3.41699 181.946 3.41699 181.302 cv
3.41699 180.657 3.97656 180.136 4.66699 180.136 cv
5.35742 180.136 5.91699 180.657 5.91699 181.302 cv
cp
f
21.667 181.417 mo
21.667 182.062 21.1074 182.583 20.417 182.583 cv
19.7266 182.583 19.167 182.062 19.167 181.417 cv
19.167 180.772 19.7266 180.249 20.417 180.249 cv
21.1074 180.249 21.667 180.772 21.667 181.417 cv
cp
f
37.667 181.552 mo
37.667 182.196 37.1074 182.718 36.417 182.718 cv
35.7266 182.718 35.167 182.196 35.167 181.552 cv
35.167 180.907 35.7266 180.384 36.417 180.384 cv
37.1074 180.384 37.667 180.907 37.667 181.552 cv
cp
f
53.5005 181.384 mo
53.5005 182.028 52.9409 182.552 52.2505 182.552 cv
51.5601 182.552 51.0005 182.028 51.0005 181.384 cv
51.0005 180.741 51.5601 180.218 52.2505 180.218 cv
52.9409 180.218 53.5005 180.741 53.5005 181.384 cv
cp
f
69 181.552 mo
69 182.196 68.4414 182.718 67.75 182.718 cv
67.0605 182.718 66.5 182.196 66.5 181.552 cv
66.5 180.907 67.0605 180.384 67.75 180.384 cv
68.4414 180.384 69 180.907 69 181.552 cv
cp
f
84 181.417 mo
84 182.062 83.4414 182.583 82.75 182.583 cv
82.0605 182.583 81.5 182.062 81.5 181.417 cv
81.5 180.772 82.0605 180.251 82.75 180.251 cv
83.4414 180.251 84 180.772 84 181.417 cv
cp
f
100 181.499 mo
100 182.144 99.4414 182.667 98.75 182.667 cv
98.0605 182.667 97.5 182.144 97.5 181.499 cv
97.5 180.856 98.0605 180.333 98.75 180.333 cv
99.4414 180.333 100 180.856 100 181.499 cv
cp
f
132.334 181.499 mo
132.334 182.144 131.773 182.667 131.084 182.667 cv
130.393 182.667 129.834 182.144 129.834 181.499 cv
129.834 180.854 130.393 180.333 131.084 180.333 cv
131.773 180.333 132.334 180.854 132.334 181.499 cv
cp
f
147.667 181.499 mo
147.667 182.144 147.107 182.667 146.417 182.667 cv
145.726 182.667 145.167 182.144 145.167 181.499 cv
145.167 180.856 145.726 180.333 146.417 180.333 cv
147.107 180.333 147.667 180.856 147.667 181.499 cv
cp
f
163.166 181.417 mo
163.166 182.062 162.607 182.583 161.916 182.583 cv
161.226 182.583 160.666 182.062 160.666 181.417 cv
160.666 180.772 161.226 180.251 161.916 180.251 cv
162.607 180.251 163.166 180.772 163.166 181.417 cv
cp
f
178.666 181.417 mo
178.666 182.062 178.107 182.583 177.416 182.583 cv
176.726 182.583 176.166 182.062 176.166 181.417 cv
176.166 180.772 176.726 180.251 177.416 180.251 cv
178.107 180.251 178.666 180.772 178.666 181.417 cv
cp
f
194.916 181.333 mo
194.916 181.978 194.357 182.501 193.666 182.501 cv
192.976 182.501 192.416 181.978 192.416 181.333 cv
192.416 180.688 192.976 180.167 193.666 180.167 cv
194.357 180.167 194.916 180.688 194.916 181.333 cv
cp
f
211.082 181.417 mo
211.082 182.062 210.523 182.583 209.832 182.583 cv
209.142 182.583 208.582 182.062 208.582 181.417 cv
208.582 180.772 209.142 180.251 209.832 180.251 cv
210.523 180.251 211.082 180.772 211.082 181.417 cv
cp
f
226.25 181.417 mo
226.25 182.062 225.689 182.583 225 182.583 cv
224.308 182.583 223.75 182.062 223.75 181.417 cv
223.75 180.772 224.308 180.251 225 180.251 cv
225.689 180.251 226.25 180.772 226.25 181.417 cv
cp
f
241.666 181.333 mo
241.666 181.978 241.107 182.501 240.416 182.501 cv
239.726 182.501 239.166 181.978 239.166 181.333 cv
239.166 180.688 239.726 180.167 240.416 180.167 cv
241.107 180.167 241.666 180.688 241.666 181.333 cv
cp
f
258 181.499 mo
258 182.144 257.439 182.667 256.75 182.667 cv
256.058 182.667 255.5 182.144 255.5 181.499 cv
255.5 180.856 256.058 180.333 256.75 180.333 cv
257.439 180.333 258 180.856 258 181.499 cv
cp
f
274.332 181.415 mo
274.332 182.06 273.773 182.583 273.082 182.583 cv
272.392 182.583 271.832 182.06 271.832 181.415 cv
271.832 180.772 272.392 180.249 273.082 180.249 cv
273.773 180.249 274.332 180.772 274.332 181.415 cv
cp
f
290.25 181.333 mo
290.25 181.978 289.689 182.499 289 182.499 cv
288.308 182.499 287.75 181.978 287.75 181.333 cv
287.75 180.688 288.308 180.167 289 180.167 cv
289.689 180.167 290.25 180.688 290.25 181.333 cv
cp
f
5.91699 195.636 mo
5.91699 196.28 5.35742 196.802 4.66699 196.802 cv
3.97656 196.802 3.41699 196.28 3.41699 195.636 cv
3.41699 194.991 3.97656 194.47 4.66699 194.47 cv
5.35742 194.47 5.91699 194.991 5.91699 195.636 cv
cp
f
21.667 195.751 mo
21.667 196.396 21.1074 196.917 20.417 196.917 cv
19.7266 196.917 19.167 196.396 19.167 195.751 cv
19.167 195.106 19.7266 194.583 20.417 194.583 cv
21.1074 194.583 21.667 195.106 21.667 195.751 cv
cp
f
37.667 195.886 mo
37.667 196.53 37.1074 197.052 36.417 197.052 cv
35.7266 197.052 35.167 196.53 35.167 195.886 cv
35.167 195.241 35.7266 194.718 36.417 194.718 cv
37.1074 194.718 37.667 195.241 37.667 195.886 cv
cp
f
53.5005 195.718 mo
53.5005 196.362 52.9409 196.886 52.2505 196.886 cv
51.5601 196.886 51.0005 196.362 51.0005 195.718 cv
51.0005 195.075 51.5601 194.552 52.2505 194.552 cv
52.9409 194.552 53.5005 195.075 53.5005 195.718 cv
cp
f
69 195.886 mo
69 196.53 68.4414 197.052 67.75 197.052 cv
67.0605 197.052 66.5 196.53 66.5 195.886 cv
66.5 195.241 67.0605 194.718 67.75 194.718 cv
68.4414 194.718 69 195.241 69 195.886 cv
cp
f
84 195.751 mo
84 196.396 83.4414 196.917 82.75 196.917 cv
82.0605 196.917 81.5 196.396 81.5 195.751 cv
81.5 195.106 82.0605 194.585 82.75 194.585 cv
83.4414 194.585 84 195.106 84 195.751 cv
cp
f
100 195.833 mo
100 196.478 99.4414 197.001 98.75 197.001 cv
98.0605 197.001 97.5 196.478 97.5 195.833 cv
97.5 195.19 98.0605 194.667 98.75 194.667 cv
99.4414 194.667 100 195.19 100 195.833 cv
cp
f
116.25 195.833 mo
116.25 196.478 115.69 197.001 115 197.001 cv
114.31 197.001 113.75 196.478 113.75 195.833 cv
113.75 195.19 114.31 194.667 115 194.667 cv
115.69 194.667 116.25 195.19 116.25 195.833 cv
cp
f
132.334 195.833 mo
132.334 196.478 131.773 197.001 131.084 197.001 cv
130.393 197.001 129.834 196.478 129.834 195.833 cv
129.834 195.188 130.393 194.667 131.084 194.667 cv
131.773 194.667 132.334 195.188 132.334 195.833 cv
cp
f
147.667 195.833 mo
147.667 196.478 147.107 197.001 146.417 197.001 cv
145.726 197.001 145.167 196.478 145.167 195.833 cv
145.167 195.19 145.726 194.667 146.417 194.667 cv
147.107 194.667 147.667 195.19 147.667 195.833 cv
cp
f
163.166 195.751 mo
163.166 196.396 162.607 196.917 161.916 196.917 cv
161.226 196.917 160.666 196.396 160.666 195.751 cv
160.666 195.106 161.226 194.585 161.916 194.585 cv
162.607 194.585 163.166 195.106 163.166 195.751 cv
cp
f
178.666 195.751 mo
178.666 196.396 178.107 196.917 177.416 196.917 cv
176.726 196.917 176.166 196.396 176.166 195.751 cv
176.166 195.106 176.726 194.585 177.416 194.585 cv
178.107 194.585 178.666 195.106 178.666 195.751 cv
cp
f
194.916 195.667 mo
194.916 196.312 194.357 196.835 193.666 196.835 cv
192.976 196.835 192.416 196.312 192.416 195.667 cv
192.416 195.022 192.976 194.501 193.666 194.501 cv
194.357 194.501 194.916 195.022 194.916 195.667 cv
cp
f
211.082 195.751 mo
211.082 196.396 210.523 196.917 209.832 196.917 cv
209.142 196.917 208.582 196.396 208.582 195.751 cv
208.582 195.106 209.142 194.585 209.832 194.585 cv
210.523 194.585 211.082 195.106 211.082 195.751 cv
cp
f
226.25 195.751 mo
226.25 196.396 225.689 196.917 225 196.917 cv
224.308 196.917 223.75 196.396 223.75 195.751 cv
223.75 195.106 224.308 194.585 225 194.585 cv
225.689 194.585 226.25 195.106 226.25 195.751 cv
cp
f
241.666 195.667 mo
241.666 196.312 241.107 196.835 240.416 196.835 cv
239.726 196.835 239.166 196.312 239.166 195.667 cv
239.166 195.022 239.726 194.501 240.416 194.501 cv
241.107 194.501 241.666 195.022 241.666 195.667 cv
cp
f
258 195.833 mo
258 196.478 257.439 197.001 256.75 197.001 cv
256.058 197.001 255.5 196.478 255.5 195.833 cv
255.5 195.19 256.058 194.667 256.75 194.667 cv
257.439 194.667 258 195.19 258 195.833 cv
cp
f
274.332 195.749 mo
274.332 196.394 273.773 196.917 273.082 196.917 cv
272.392 196.917 271.832 196.394 271.832 195.749 cv
271.832 195.106 272.392 194.583 273.082 194.583 cv
273.773 194.583 274.332 195.106 274.332 195.749 cv
cp
f
290.25 195.667 mo
290.25 196.312 289.689 196.833 289 196.833 cv
288.308 196.833 287.75 196.312 287.75 195.667 cv
287.75 195.022 288.308 194.501 289 194.501 cv
289.689 194.501 290.25 195.022 290.25 195.667 cv
cp
f
6.16699 210.968 mo
6.16699 211.612 5.60742 212.136 4.91699 212.136 cv
4.22656 212.136 3.66699 211.612 3.66699 210.968 cv
3.66699 210.323 4.22656 209.802 4.91699 209.802 cv
5.60742 209.802 6.16699 210.323 6.16699 210.968 cv
cp
f
21.917 211.083 mo
21.917 211.728 21.3574 212.249 20.667 212.249 cv
19.9766 212.249 19.417 211.728 19.417 211.083 cv
19.417 210.438 19.9766 209.917 20.667 209.917 cv
21.3574 209.917 21.917 210.438 21.917 211.083 cv
cp
f
37.917 211.218 mo
37.917 211.862 37.3574 212.384 36.667 212.384 cv
35.9766 212.384 35.417 211.862 35.417 211.218 cv
35.417 210.573 35.9766 210.052 36.667 210.052 cv
37.3574 210.052 37.917 210.573 37.917 211.218 cv
cp
f
53.7505 211.052 mo
53.7505 211.696 53.1909 212.218 52.5005 212.218 cv
51.8101 212.218 51.2505 211.696 51.2505 211.052 cv
51.2505 210.407 51.8101 209.884 52.5005 209.884 cv
53.1909 209.884 53.7505 210.407 53.7505 211.052 cv
cp
f
69.25 211.218 mo
69.25 211.862 68.6914 212.384 68 212.384 cv
67.3105 212.384 66.75 211.862 66.75 211.218 cv
66.75 210.573 67.3105 210.052 68 210.052 cv
68.6914 210.052 69.25 210.573 69.25 211.218 cv
cp
f
84.25 211.083 mo
84.25 211.728 83.6914 212.251 83 212.251 cv
82.3105 212.251 81.75 211.728 81.75 211.083 cv
81.75 210.438 82.3105 209.917 83 209.917 cv
83.6914 209.917 84.25 210.438 84.25 211.083 cv
cp
f
100.25 211.167 mo
100.25 211.812 99.6914 212.333 99 212.333 cv
98.3105 212.333 97.75 211.812 97.75 211.167 cv
97.75 210.522 98.3105 209.999 99 209.999 cv
99.6914 209.999 100.25 210.522 100.25 211.167 cv
cp
f
116.5 211.167 mo
116.5 211.812 115.94 212.333 115.25 212.333 cv
114.56 212.333 114 211.812 114 211.167 cv
114 210.522 114.56 209.999 115.25 209.999 cv
115.94 209.999 116.5 210.522 116.5 211.167 cv
cp
f
132.584 211.165 mo
132.584 211.81 132.023 212.333 131.334 212.333 cv
130.643 212.333 130.084 211.81 130.084 211.165 cv
130.084 210.522 130.643 209.999 131.334 209.999 cv
132.023 209.999 132.584 210.522 132.584 211.165 cv
cp
f
147.916 211.167 mo
147.916 211.812 147.357 212.333 146.667 212.333 cv
145.976 212.333 145.417 211.812 145.417 211.167 cv
145.417 210.522 145.976 209.999 146.667 209.999 cv
147.357 209.999 147.916 210.522 147.916 211.167 cv
cp
f
163.416 211.083 mo
163.416 211.728 162.857 212.251 162.166 212.251 cv
161.476 212.251 160.916 211.728 160.916 211.083 cv
160.916 210.438 161.476 209.917 162.166 209.917 cv
162.857 209.917 163.416 210.438 163.416 211.083 cv
cp
f
178.916 211.083 mo
178.916 211.728 178.357 212.251 177.666 212.251 cv
176.976 212.251 176.416 211.728 176.416 211.083 cv
176.416 210.438 176.976 209.917 177.666 209.917 cv
178.357 209.917 178.916 210.438 178.916 211.083 cv
cp
f
195.166 210.999 mo
195.166 211.644 194.607 212.167 193.916 212.167 cv
193.226 212.167 192.666 211.644 192.666 210.999 cv
192.666 210.356 193.226 209.833 193.916 209.833 cv
194.607 209.833 195.166 210.356 195.166 210.999 cv
cp
f
211.332 211.083 mo
211.332 211.728 210.773 212.251 210.082 212.251 cv
209.392 212.251 208.832 211.728 208.832 211.083 cv
208.832 210.438 209.392 209.917 210.082 209.917 cv
210.773 209.917 211.332 210.438 211.332 211.083 cv
cp
f
226.5 211.083 mo
226.5 211.728 225.939 212.251 225.25 212.251 cv
224.558 212.251 224 211.728 224 211.083 cv
224 210.438 224.558 209.917 225.25 209.917 cv
225.939 209.917 226.5 210.438 226.5 211.083 cv
cp
f
241.916 210.999 mo
241.916 211.644 241.357 212.167 240.666 212.167 cv
239.976 212.167 239.416 211.644 239.416 210.999 cv
239.416 210.356 239.976 209.833 240.666 209.833 cv
241.357 209.833 241.916 210.356 241.916 210.999 cv
cp
f
258.25 211.167 mo
258.25 211.812 257.689 212.333 257 212.333 cv
256.308 212.333 255.75 211.812 255.75 211.167 cv
255.75 210.522 256.308 209.999 257 209.999 cv
257.689 209.999 258.25 210.522 258.25 211.167 cv
cp
f
274.582 211.083 mo
274.582 211.728 274.023 212.249 273.332 212.249 cv
272.642 212.249 272.082 211.728 272.082 211.083 cv
272.082 210.438 272.642 209.915 273.332 209.915 cv
274.023 209.915 274.582 210.438 274.582 211.083 cv
cp
f
290.5 210.999 mo
290.5 211.644 289.939 212.167 289.25 212.167 cv
288.558 212.167 288 211.644 288 210.999 cv
288 210.354 288.558 209.833 289.25 209.833 cv
289.939 209.833 290.5 210.354 290.5 210.999 cv
cp
f
3 lw
3 219.667 mo
291.666 219.667 li
0 0 0 1 cmyk
@
293 220.999 mo
1.5 220.999 li
1.5 1.5 li
293 1.5 li
293 220.999 li
cp
.5 .9 0 0 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: ArialMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ArialMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 47 /slash put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 115 /s put
def
/FontBBox {-665 -325 2000 1006} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7
C8A936AA182F5809A9> |-
/space <1C60D8A8C9B854D00D> |-
/slash <1C60D8A8C9B854D0D18501A7E07A7DB7C8496D0849EBF5F0BA> |-
/i <1C60D8A8C9B88C087228DFC7C7ABCC71B868F57EDB285655227000619B17
1C8A80AB> |-
/l <1C60D8A8C9B88C08722AD20D19A90F9064193C8D82> |-
/n <1C60D8A8C9B7EF322B3BE19FB964E04D2DB06D4930CA5D8F41D2EF3A285C
0BD536CD2C57668EB9E30311BF9A2872DFB44F2BF2A4683B5D66FA01BB1CCDAD
E9C8A9EE2CB010715D3D6DFF0E843CF77C87A07D1DBD0482675E3CA1DAA2A520
3A8015DD09B7CE> |-
/o <1C60D8A8C9B7EF32334FFE7884F6C3B903D000D9FD76C2EAE8EDCCA90A98
7875625CA0393015EF6761BE1C3B6D9E9DA4BABE1DD313B783BCBF8F620C846C
7F6361946173FB7A4A6BF94EAA0CB4947DD1974AF371F3C211E584576DE9AD79
F9DA988E9E531810E3876F3029BB1D2ED366525F30E48DD7CE3C9B66C5CC099F
518C54BB58C51D6FB6D0C8> |-
/p <1C60D8A8C9B7EF322B3B0CFC8FED720BC90E20B208D27DC4B8F11F10B964
70F8B4F5FABEC7F7010781F5077B417FE44279776F2304ACD6E0EA12F436330D
C4B79C907B9D28468D10FF9256A7D2CA504E4498D719ACD86FCA89B33C61F556
CF1168C3F262A781155D5EBF0C47D71C584AB93037B47B18D39FE408A49672C1
E63F9E8368D19E113FC95C59A9FA4650E46F6399F2FF256844E27568BA34B9> |-
/s <1C60D8A8C9B7A73DA057E90C9BFBE0FE301E99CB771FA2F05368A6342B5F
80456D91458EA2F3CAD55CDF89BFF34EEB39D7DD325B057E2BF0E9B878C214E2
BD1BD70DCABE10E0DC8EBCF7B100B55EBE94FB0F17084E21EBD279B324AEABD9
6538911D053BE9D7ECBF43F934B1033C9E405BBE31E7EDB643609C8D779046E1
B250C3CF05E6FA4787649137D90F47F85972A6603BA900DD7CB710E02662DB32
87CB26D7B7AE794611498865FC85A28083D2F6C2DEC302D47619A4A577C5B843
5558FCFE71A1BB6783AFD5F58B6D2C03593B3F2297A66A7E6D13C1E321C57F41
72D53C8FCAF4D28F2B78D3A4BF03> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ZVVWZB+ArialMT /ArialMT findfont ct_VMDictPut
/ZVVWZB+ArialMT*1 
[32{/.notdef}rp /space 14{/.notdef}rp /slash 57{/.notdef}rp /i 2{/.notdef}rp /l 
/.notdef /n /o /p 2{/.notdef}rp /s 140{/.notdef}rp]
ZVVWZB+ArialMT nf
ZVVWZB+ArialMT*1 [16 0 0 -16 0 0 ]msf
56.979 169.072 mo
(slip / no slip)
[8 3.55469 3.55469 8.89844 4.44531 4.44531 4.44531 8.89844 8.89844 4.44531 8 3.55469 
3.55469 0 ]xsh
225.235 89.7793 mo
(no slip)
[8.89844 8.89844 4.44531 8 3.55469 3.55469 0 ]xsh
24.9019 91.4463 mo
(no slip)
[8.89844 8.89844 4.44531 8 3.55469 3.55469 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ZVVWZB+ArialMT*1 uf
/ZVVWZB+ArialMT uf
/ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.2
%%For: (Shanon McIntyre) ()
%%Title: (diagram_bp.eps)
%%CreationDate: 5/4/2009 9:11 PM
%AI9_DataStream
%Gb"+`rI<9SoA?27q=$V9D%,'1C0Q.L@:N)>)-`e_BONU'0fO)d7[dj_!os+B^NYi9Q4kXNfh7csFgUE/FOH`J:3S)-]lBf%RLOWB
%iTnMIcb%aL\#hg6G:f.O(:UJqEoY/`r?o]4Ntb&@cBsZ[:<iAiU@VR0I*[C7Y/<7XClQ$4Me"e18k7]J122aQUNCP.C;,aaet`!t
%4Gg0Va^?fKB/Km5pPmk'1E'!h\"<<R_4q\8amj10*qYZQ!_3-^s/ONi,b7eY&PoO-Adb9l^1tmgKAPYA`G(Ll[63RX3-uqUoQ1-Z
%JO/7-"b/Mu%VEE8#f`,$*aZYRM0KZI'#,D6dj[fhqK?g_bssF90KB9?qRZ@j8b0GWRATM]58sNA>EM-A0#iNgRKude@El9/^W*f+
%k'eIa?qAGqAYHNPgoqPR*j_7&=Is0W=GE9$4*fRVhVGTR9B'9@.`p2hl#H`Q^a[KljZ7qo5FDtDo]`T@U6P5+Ug+t#HH?/kZf[fE
%N(i!cbK7IKN0?5LSP2=L7Y;TLHPb1eSq65=iqH$EA;6WpNg&GDka<89YQ\OBH-Q'=cuMAWNpAALnDOHcSHL)aQKlm1&4_jP3_4tg
%UGQj._)*10rR_#,h7Y5B=JY*J6/(d=dhfS2Qeqof2/`>MkarbG0L)*T6Q/0;<V''WagPuGN`@/KkFcM+\.?GtJ1[uQ@13TAKjcL'
%`W5-5fZn]_T2t"N<9TVWs"T8cK)iYV&UnXV$-F+aA.5(cL//\N:HKTE>W)rk6jj(o/I2n>#S8Qn3ZTC_7>MUGL_IUSU3RFr=qi+u
%I_tQ0encO6Z\_DG9mkB*,#5%g:HP*i&C!9W7-J`',<9EtA2tjeVgO@rkrE8#*.K(LnqGs5%J_2cjYLES^EX4DL#3(&,S&KEq82Uq
%)`!-)Od$QG,`PLVGJQ@i5VVb_]h4^8&Ki!tL>NT@dm4hqOr1ir[$7C$'n2KD-23Q'3IEhJftS@d9bjACrt#Wb`:$5h:8HrU5#W,M
%*tSm,Um[OCOc>Jnr/SN8K2N6L],Ee`n2m?fO8*!UVGn?\>WDlPPB9)!Shu;$:(C.D*mpeQ82cWXaab5@*1H4sd\^`B..eV@+G6Jb
%aIm3!3L>eh8,SB\;V.%$.2UYS^EX4D#gGraac`IpA04^u8Y&Fe8FOLTV92?*+=!SjQ-u#ZPHpN<9At`De&2fIEqkG[rCc^EJ:'!L
%;hLEk.Q(GU]bHPRd1QCM<R.[Q[XmRO]pYFRYVJ;%RSGc&Bqf:4BbOWu2VTMCCc66+,Yl`L'+#,7L.ja'_Qp0$f]#-nWEc9prc;B@
%./PInK8!2#Qi30K6$(qMT^8TS0+?t2fh_DckONiBFmiT6=0Ke;fh_ENUEP-5I`h\`H)i5Wfh_EN].JNYI`h\,rL`ZP3/@97cEI/:
%IZm!Y8(VO&^es<+s1DD3p\B=2*1F&u=U)p=9:Gm7hG*:/dqj,0%O_PZ(3E_6H`m/.q6'1.=stR*626B96k?V"nB^d\!`nMpW.PUG
%Hk#+eT-kkPcSlV!W7un6&IH@d.u+L"&*b2*"i&SJrl!]_Fn$?a0M$_$46f[FKOR'ac]Nf@p`6+?Gbi[o;-&f3mQE=p)Pj.4kr"#,
%3>YC3h#d?36i>&Soi(f6q#!qaLP&t)#Y7CbRc<oLllCOE96tfmf?,GdG7F)i5Pgor^C"Q&F4ks?d4u>aTm-GGr<!oM2"t0k\0)j-
%0%<kuS;/'0;=a<,hNF`>U^JGT](\bh^=\[^U!F.jCMM_::hK7.)$ui];h6T#h_g:?*ZE?>Y&*MCe2,:+%.pKkp\M2Pm@qF/Ur/M&
%4>)#P1qp2noc2=L%bRtj"$oI@f+X.W""3[g-pHo4ILjCKG`lk6GrBYIUDVL=8C.%U2+g?o$X;P!_joiY7:jb4=%_A:RnP+qrNP,f
%GSl*bf+at.T$n-QMgE(Z%d$K_UnJQlb^?UDXnT%?qYA8))MV]?-8R<DAcEO;0DBU)S,UC`_<u[Z:',LiKDB?6[0^V[k&OIi1F4Yr
%5%gh(G*scTH"7bt+tY/p_PMN!75U!)P:l(Tn7JmM6lcPm9Xj8ehuK=5@u.;0QM@ul[n4o2X'C5tXs/Xnc/.'Go6Jb(_u?kXJT&f!
%4V.KbCV@HGaXj]oV+h=kAm*T?]e:3P3))VpnrkGgS+Cc&,7J)A502IWY27&3-BuC<\7'[-p#0?AlW-K:$ZJ>^Hkje2mQGB@?5.[E
%3Qnb8n:5/fGX6/<2^RLpN9?r;oIRH63H?.(>W-SUe;JW38ZVM)Qb3S:q612'AT"h'Hjd,j+T\c>:W,&%Psl.B6Hu3k;2#hhcN4lF
%]S\1,UH'#4?);b:%u2hQ"3^"`IP,"oB,0[!Y5YUa]%B8hi6N(#2o"K@OJ^X@3E')sc`aX_$pL<('qq^T^7tAtVP'7fZ=gaC>UEkX
%?q,c/Z$\eX=#q3DptqN/ndnHPC@]T;#s`mCmVtTP4;Sdu8$jBV0hq)HQT^[u?\sB\NI332Sju5_HP0WYmd'$Uf/p?%RQQiB@B(^!
%YuT,*!G9-a[+K1>O3>Kn)2]<9BQW?S1p6'm#pg[H3/,'/>buu]g1SUNX4tF^Z0("+kc96Y$kJ:#M+"dg@5=G#R>`T^AL=cl8gSi1
%gkB\sBR(e0_;:/_%s`m9UmUu\o!ihn<fk@%2Upj%G=8[`aXkb[Rj*[Y<3fh,qPY5P0$E9I<)#Q\G873$d/'tERS3>GjO)*k/Qb-e
%U>r-7GRc%JT-NB;-iZ17NL$<?,+\J87T12+aFGQqH-M.<^;2]p1G#o4D?49aBh$kkr[(hB>W-doIDuOZKE]MK,uWrhJih,VKNh;f
%TF+"PK=^7qChMsnOLNRQEg\i>C>qY*d`?&/);eU=*Q=cL$#@7&1+>S$b8-tO58Vq];MH*uYY5\(T8/Jd5ZfVTJ+,H2MaF=Lc'+IF
%dCc6AYW<<P,G1[55uLh-=1tu-=b@RhLLtNO\cNR'(74o-\iT<u^5u46*iA(7_fS(O0rGMQ[d"hY+_jV7!Ykor+>L./JMX7q_H!20
%i1G$+92V!99b_9n())In#Z+aN-N%D;e,7_?YBZ`gH2#/RLh90`S"[9ci$='\S"CEAq,Js!ZHtEmEN=:,4Dh7$r$&MR,Bee%Jk(`j
%=dbSV]MQs%\L8\1E10H^C>dA)F>V.OE(-%_7Isai@\RDlM@N/Ii<mhV<&Z!:X9T=E%)/LSPouFTd4W2(>nqN$%U,c:Mp=@2H(u]u
%KViA7Gqna*iYTr'?'WcoH7.,F$!Bpm7:7GU4S`ou17_Ph`LJr80L]'^g,aM;X(\FHH:NZ5#3Nf<;<fF'Q&EB-mh2L^q77*XihWKS
%<3\0,7V(u%oIIkqHuUs34C%PmV'F*Kc/K)%X$Z-pq)+ej/Z(tMo>RS0W']I#>k)bD)A>7SYt4O%+b1%mKT=f_s"Za#iJJKM,)T'>
%-sY.'&_e_SfVZJ'2%tVRUPh:S]o-rj.Mr6dg6q&VNVQ]*S3V*GbB0<l^^?YL2)!XiD"$pNT@6!/k2F8'/UP?W7]XZ`R40_hETIUo
%IP3P1onHZ&4"?d@Gi>*X;d;>.b=#De'f/R]Jt]>gQ%_rW?q!g3DP.dkH7E8un^d:#E)H1k2Y?S3??JW]TC4q+'r$Y<\LapMlQ,nV
%0+lfE_kh]Hl>t@EOHb,p0A-/V#UA*b@>j43Og,-scW=YCmKm>$)F_m^#EB4K3pg1H(M"279*Y[ZZ<nKueVt#$?/h0aX29U_fGg`F
%X0SG.[!.'FpOSQM>b*@ce!nL$<_C>g9r<$W,b+OcL+;L=113t30.LihhL.8,C\"uXelFA`/!gSqp)^2@`EP3F[,u)ZNB5b(<QFlI
%9"qfIP'ns5;=b.<@\%/JMD9?U@c9e5,uU^/8&`qj!Oc,Bd:"1WCE`sT<&^C13[o,\MBF:lcIGVN;!RjsN5V:U*IlHbOJ-*e,'HR>
%WreS,mipRlDBc`"a^e#2dX;%#[])79YqYs,qO"hUiT+PtP)NE'6`MKQ)HWWBR=Dr`G@,25Qp-".bnHr!\X:>p(9KI9=Aa$8_/5Ji
%]G/0/AM-Y]nV3X'k5kT8`H]SC_Nb_1ro^K0j-K'GPj7'AGWsi'jlD7tLl*bK?Uq7C@B2@10t1R>O./Wo!u>rrI-sr@9jI*+91F>@
%^`mRDEj.ML9hkeW!D@=Tj2RN8,L/Q=qm9nE;6@rq%+61(!g]q'cLY;A=D+<MUT5`5)SD)Ap]>S#.b5;jH%+[t6VjUHo0ntUI!ncQ
%7AQJqQ+RB^`j5*8^sc>g2T+B_TNO8D_XaS'^oCQDF4f%W"W8$j;.Vmm<cPBZN%Bd*\1$ubP>N&m-7e+f;Sd[Y/5h2;nl.lZjbY2Q
%Z6IJTJd]W:o#R-";,`#f`up8OWX`?:V/9($B(BRP=1NEi>F]p(GK$4@k1X[0:t,bQA2`C>0*=jT+<hX-:Y)NB!j:7VY[qC5bDQ^j
%HZ@4aPVmJYdRNl;W0]UBeEl1\[f#<Uq_H,\A43rg]2T9_1-#)4%_be>hB^&8,p[;LA9cH6C*WEn>bQ)/N`*"c_f;?,ii(oR')n,n
%?I]I`*AK0ZPgdiS<4AquSBE+1Oj#K,WreT'c',fdla%]0IZuET30GIab4<'thR>Jnlf#8^edJ-0?]pZ0Ls79"#&6d]Qh\i*6uDGV
%D2g$7fR0C21*<YMrW=/Ll?q99f[W8s7-C.PH%0C$0^qO[\$ZuHE=8TXKtbD)()8dYeG7+-?9WBceeGCJJ=9$V52O^b)ONPM\df,`
%<tSU.'!hA3N3(B+qhi9^DQeU_W'TPR6$X)s'.8jER%_Zm)OgpM2T:-44ABH]g,Q8A<F![VH>&Yi]Ep5bSEUO-hP7%6#\ur9:!nr<
%hT7_$a&m?pEKOGKn>Q-?RgrBo;XK$,kB"u(C>OZ'Ka#^of1a*+VT-OlRlVF00C.GADZ5SUF3U'=#8Jb0:@d)NcD/bX,5Bs3/SeO`
%pLXBqX'J7TNcgLDD\@=Y?PK,&U0G"%GnX?Or9s$$q.<rq.+Js@)J.IjQ*,.Mdo*m*9jU$$CM';Fd-"E+6I1qBk6s(K1mK7Pc<FP]
%hBT@PPXejpB.eie3G2?N&h-%Hn@XsOI&@6]e`YJr(Oe9o40c=M=4f'4.Z5WPC/(1I:+!:KV0_V%CS&)!QW*$5SR:iq<]4=Xmr.Gr
%\BWgr]RhC^Mr+r*jo1Ca'VT'01\faH'j[n+=kii%,VOYH\O_9+W[qDB16a*2"[%urTqNB!$dD38?IX)!&&;rff?Dupo2Y%FT-MCA
%o7M=$eX:2fI'3>MUm8Dl7#<DdDLtRSiXG9/R*6jlSmV3@FaZd88u/*YZJS*=G;Y9J1RKOARg8QK,*/hTHQdP0Qb+L'J8U)Qf8&?5
%.]rR20)<Ui4VuA0U9HL>h%/tFA\G_<gE#R(laPq>1tW0!)f-#-63lChdW1fA73+>@_]HN)8ptN90(AgFpd-D)\u;BG1`3o,:U=EH
%Zf>RW)diL'jg@ld[/\0_1ef=qiTid=7D\uh1k(qPgSac"ZZK_<bVh.Mj%6P+2Ai:hTnN,7,qKoBqVt-h]&2tqY?rZVq>nq:]D])u
%]/U`TJ*rA]FF$->:#]T"s0s#GUZ)4<=aqQ-&!F9`raFQ%4C?N+!72COe,J\)WU<ZWdP(1=kmX66rFFQ=-g1BKL%mCi%sl@s1lZk(
%7@_'m@[">tA`HXnh]#8pa^ii/*'`/,dH`//E'1E!-f_]EiX!3qmOV(r@J;q_''u6fUGp<a1et6&iWOY$nFsPinU!\\m@>O>rF(0]
%bsQ[sjPTFGKAgLTJ,XnESdb?lnU`]5f\=/s]/V>Q.nnCjGVGUPbLpEUqJJ-XJ^F7gFFSV.-Ah^Rm`q]Orl**%3857R?5Ma2;!TIA
%ra5_pYs0.=/RUg[nYA5cL_4We&-&$9.C?pPkOIJ(p7[!MbDG$Q]$L[)<L5l"NS1C+q:7FtF_"mphVN1N+mc[,oDQ+2$rkqMo<rQ2
%:guSP>s'r_*bq5=oR-\DkRbfTap*X,_4f97:lad:\%A":VZ$&CrVkbdJ3*4b(j[YN5;a?DeZE0!LF;8['XT/X00j#C#F#*gFrV/[
%Z-bUu?,rC)/Ar,Jqcsh),+BsCHBL,i;Mf;CQWSZmeMk)'CRbOG0pE]=,l3>:1bou.'T-e[lbDg35RM!JS'GP?ZeTe;]$5TtGUeC:
%T"rrA3PiVdonU9]rMu.(llruU4U+=f0_S*uReEsI_Da^9[9fhV/S=HVI(<%WI<m5I%s[Zo2*h9@(:CVHdTLV]IOp?QP5$Qkm0H*B
%'ispN/=uB57tV[AI#sA#j+kOYdBubfeU+(?`&`dRk>l'm*b'0E;D@pI-(=o,T`:=.[CAH8]nYV<qhrqNTKg!6"AO^O>_^a"$E=5f
%*hNA&FJmJh!O>MAZi2d16g=s72OFsbLQ^\>2EA6A7\bMUUd@n=2"UB^.be3s:,Hug#Oq6R&oYdo+G+TmchlNBq?>2f7n_R%l*`C(
%dj1\6IYFD,pp62OGK$WuNB$r/GHof[EqFttFk.Z.TSY@m9_+s:0tr_"3^/VF#Y*$uJQZU_XlO;_?5U6sT^C^mA2"o@';-MQHrrVQ
%l*usl%H:fd>2k+1/NhKZ%,PmI>7"D$ejm2`HH*Y3eNVHg)FG1u6&H'&E-`>b%hgZ/$*bK6U&YHOgU.q_&Pmk(m1Tb$gEKg<FR"rQ
%nkRgD3e#-8Y`@IX3d/-aDRWj;B"QHn\"bj"L[Cc%\%O\8]5=H_[lUX7X4:sn)Qe<9C-e6B$<og>Dg<qcEa);^DK_K9AujU$2Oa;N
%eDu^,#>Mtt2-JCF3_d66Bs\h]7^LKUe/M8;2o8&2n/G\d2;Er8YciIQn'p+b<kVXSeAX=94fem2^[BVq9r^:L#1/B6;);rTF\!*i
%'LkCL7pa+X2f^+3GBfUdG`t'/1lq-c`B<2^pUS<^GIbWY;!`+T9urgi@2*`5Gi2n5a?hh-69FB6m@Y1NK18ZJU4<JW&-RI?"Y=Tp
%-\*rJ*P_!Nr2/AeCu4?:%L0Z9Hf>KSNc07bYO/a1VUt>&?A/2G?JtXNk:t<U*7&4;en-MbA.;RP&VDgDO9Nj@*b3E*&D4T8\*^WZ
%VV?(UDWGgsF9?pdSBG0hF^3\c3,JmU%]A:8S]KbbkQHq7GRee"a)PLG2GC"X'4Nn:&=O&EgOTf$Z[oV<hRRkQOK9D))Q?OD>i'n`
%JgUiA\)+hS5RiMu*;OCD>QaJ0UQm8gBjaNoFc2L97HG!AQ+&=Z(f_E<\08:#,GE8Ybc&gcd&>Bke>UrsfV$sn-(;;sMM%(!qa;iY
%6RY$r4"<@mHmmJc'd$H5'C(V_J0oeR[P3Ap0S[#\cXTn$28C1M_DKV!n-elm-25(Tn`:-WnV"G,@5=u>)uR!qnT9Eb[=o4/f<nD-
%0f=YN22"iWKji(V0"s[F'rWcmI<k+9W@o(&J>+Pf1&J9$Y=;$2$2":tEuRdWoT/#5'd!i5j;cCD%d):Ep=d.mfjJtUR%FUq(k=Ve
%0ZuMEB2])0NAntpE*Y/*YO7$o#NFAJmMsipaI=<TG.l?)4Tu)KJg9d#+b8s2CZ++plJa+Z9b;-Qd1Kl1@/LH.66:bk#TTNP,*5Gb
%8?)jA"$(s$*?ebonj^_+GRabg+u)Fo+lF-[+Nu+T.F,"FB%d@3n6kZ]#=>*tW#KlQ.6'1:TgPJG6E<qp:s2\i;!UsT:^^,>;(G);
%%^[$0<JjgPZW*X,qWcF351(dts,Jj/7na$!*>Rq,Jc5FQa!')V"ErT$H*fgY3tAteeHP:5^^C;'%6/Td3d:n"i>1q6EGb1a0),qf
%r((eo'C[Ci4A-\W9G=5O"qH/Gp`:6!O9`KJ!2%3G44V/?U&MDa2BC*Js5ehSo>$uL9*ES\_8Fed:k$d!QEZ^9Di=@01@U)@pr*72
%,6pF>DB(cN'BZ#@Uh#*:Fht+&+Wl)J#elUWa0"Cg#@O341Mn:.)uMH"(d,/Ab!Qs(-*H1>,OjZb.;ITWD&;;O(C3ng1TE5[ZoE+1
%8r[SFMB.TK^ICQ';8F3g^03kJgL;dPU$S`GW:90--_U+'\C_`+eOS^kog]*L'5.Y5Q"JB49`S+r`@5D#(^-:\LLL:Z5dLH%<i-JN
%GKpNt5ncO/BaYrEL4Z:S`e*?)#"'_i7Y><*L/XGBV\Peu,n-_(oM6Bf,9-^tVF8E<#Y-)`.2&e\ToH&ug_+9Q\2db1(RZ'Q/kqd:
%+HQC*1F#73;el\p.F!h\:7.P*3);M=Blp6*R>+esoYBD+prMsGk`iW?L?udO?!+HF(?N2`Hqh$<^Z^6r#GW*$IMb5QoYo5t97KVV
%=o)\"b/u@>EUq@+m@-i=%/sCTB@B(<%o*$`kFk1<%H4/T5+9-kp<g`E\)oepTmt)(2#K.TBBbnTdP!,Sbd9n&ar<uL9O8P]L]V',
%p!m)M1'XK:7(>!!>U#*E(HUbVHj/NQ(LP6!p^?Un#$di9pa)d@?%J*$N2rC69c?>ul9^f80W6b*1kAIC<#npZTW$^%m[tI)7I%s-
%:Wu[7W"^]rW`:<D$^E4VZg%o5oAi`0!)>Z#1?t'Z4,(hbA:,[;%ok7qRM-#3%"peN0aU9jKtc54*M&]ig1i&e@BXGtf!JMGn.2bU
%V8HO#;O9GpH+0dn/%F*?%]BIE7P!Y:\6!^TjC66Q1)9@P7k7iH=;MocQ&NYM)2]0Y([EL`MM"iFMdq``YlZk<qiqXnSluSW)jZL$
%_FC65Y&MIBR,j9HbA@gl1kg!gLrc5A@K\==F=:C:+JK-;Hq=D?FbTTWWgcs(Z)!4YUb/=(QAki4Use2d*e9&R,'oZjLhc";#d-F4
%!YOtD02I'Pj3+"jEYcCUlq9cICVC,i"`qsmkj(Gn".<[6eO&"#Z359kF-Va9I.`:a2&jcmiW*FM1)&0630_h5Vk.f1D@I-;k-E`q
%LY,5IFD+KW=:8r+)hTbj/6]o8>b@Sk26\4L@WR0.M*t>8F/K5f_R#c*joqHB,I._JdSPF2a)XHuTO!kOp+JV1R,L8\:[qhq4LGI5
%/p??U>oZn>4LMcq[(^eX(R3N';I10)=-oh.Mr&@!/%+SHo&+AOmHh-LbE_J]Wcl"Sh6(M%M\`?nm<4sGJ)@-FDVoTGn+mXa]>"3I
%,0A_@SG?C36m#[2qQR9XhbfL4.g<a()1KPG=4na"F].e5FmJP`Cm%Jo@m#=59]ua.<X+jP&VK`SRN6E=r8]cM8`S?[Zq$#Dq0Vr7
%p[J!&JA/?Pl]Ll2(Ye4\6hp7#<6Vk6*u$0i!.UQ7T*O*@=.;A^j_onW`'M'3gSgb'[kDB7Q<SC8CbN^ELLh8$p3$ED/RXJh>uXoA
%=MA!L&.HYJ#m_=.0ftVA=Uj!765VRD.&*(<b*Kqb@Gl%]J_JTnQcU<I)NR.3'^3=40t6:6J`<)d(';b#;@$&77$6s$@Ti<>IYn>/
%0^bXNWae[&0b7MWaAn"%c!cQHi.24,G`;le,"9`aJ[sp\N*fI6i.1V_gG%6e&EhlX=eoXMGd+`:KYp@&!W'&!O?a$T#^Qi&jK!j3
%VM.:AEKM;'[P.XD],T_%\BmUias`@h!gO'9%s6$J!W,J,$0]k]SgJ1A>/]p6f,)6$nNdc+"_C)G$c/26*;Ee3#gV2u>n&kL@9tPV
%Q1@l&!g))UR4@>MJ$)Gd36YY2^R2qFB(T4[Z6BL3@G!CW*co7D!&J%Fj:QnIc\WjhF[3]4,&YYZ@%(I.-7l+k[Mrr[7GB#RfsXF1
%+:q$b"lET/)6'PXX@X#*mHWkg$(Ua;[RN>,C0TbT5Q]m+cssm9.Z)'c#"'cjJI/A;5nn#D+kmdKbdIo.O7NMB"/KBnTQ$UK#Nn[0
%%LeG<7%pn7eZoHm2BC*;W"k=4_t)>Cp?I8G1Zb`<#7@h[*(Ao4;d0sN?"9C[W#,q@B\=EM'mCW,4"t('p^YNfKtpr/;t4Xc_a:'e
%?Gq]b5l(q/?'$qD$%ZKGJWLT4^k;_iS:t_#<SJ^bfsXH/\T#mUQIT+"=8E:<\6cf3QhAaY3>#_s#1E_<&d=e@-O:$eL)h*bo!AX6
%j$I.VoeK#sf@.]:!ejnpNN$UXk-?P(E8RqA:Qi>4>W2a+Qp>]Y#A3Qo@'9<O;fkB3UKq(TclT]Xgc@S_VMh96kqR`/_M-AR!HZKn
%<X2kF,2;V+Yi8$O"+^]X@B(Ka"69qOFp0r]@3?WZ6Z@-T2D,-$Xi3h=+S+BZ\Da;/q.h(@6ZDip>`7":DET!Mj,9^'QY>BXjk[X_
%>BNX:T"ho2a\:if=a!W3)p$62O$iP?j.%i^]>,YDE!Rbsa)0-kLDq-#K6]G0d=L=N\4L<N4JO^N@3&gk(.:@_622!P>UWUfi$3t\
%TdWdt,YBfm\9oP(&R=6REgR@.,Uc'?P^"6n'JOPo.mF/%$pDpOlCfrS$IJER7O9_s0s*j:+,$4cfK2nhPO`+cP_KO;]:hU__`66_
%"7]eC!5FLY=B%72[1_/LQiI=J*nlXm'Tm00;@#Q3Tq-ks5SZ'GW&l&TQGdl-:.tbn6ieN@S'r3^fDn<,EZi115Z`ifp77Z@6p?IK
%p([a]Hcujg6o%o,E#<V_P7j6/3!QPH*;NjUR,]U3Oj.QQ!m\1*^cb;_$U."=,18.dOQ\]8BGgh8,bA:';TN97,CklIJ<@``#XLlL
%oe?o_'f&<X+u9Yo'ljl=ScUs(VoF6eeVo+$'dX%@pIREE6U;td/GpFg]pa_o<-.M!\\mFH!]B_4k@j8`N\3f:m4]^kOlmAhLTZ.>
%NQpP0#>K0%r\:$<7`(V["A0hBY+uP2if]UP0%Ue^c.-&QjsaQ%dC>]3Bp>T/^q;s`ThlGS+B$9H6ki&_-%SqS.\625V?IrjdjGJt
%kXl2Db"%Qq!mF_2mKK:^omhB,"Y_pTKPsM-%Ia@`OcZO`\IGO."?KDY`l;74FT?_G8R5k<9qid,;.K<F7QKD8)@6q20IW\7ZKk.I
%!iLdb'L]_[V@i6A$JG0$4_+g/4\lMIn9eRTnN9R0@hA_DbfU[L&5-]Z6,#iX)%;l/Sfp3&ABI"1dW$c[qD^J>jTm.P('U=BeRN>2
%O]GrKPL^#,Ni/chP7U06eU0M'^+Dbal@f'cjqPi:G^)\OGV75t^i<"7N>I#$"GXWbJk+FrJ=N!Gd&C^d&Ykb8SPX>Hb+Mu?SO`cE
%T2T)?=Y54G>O_^imO2>tGLutJ^^V"l%bcQ4JEK_Lm\PI9&/"tuj<u$K!1%:s?UEb0!lqjIBi@Y5!^3gjf9*4=@]D/5"b[`s`q4S1
%7O<V:+,7-n"b?_ET!fG?N&1\D_$DYV#J`<?8S#7s6f9"1g";BQ.fs,QJS'qCBoB>#<PD?47:ecQXN`L-5)`2Z1Ke2>_i6mBKO0]Z
%l+d9ZFFugbfQDo5KXadg[/BKN-5e7/In[9]<D9F:Rr\XCY!$"!!6ue:;mGOY?t@oNoSOe/4BAns@4;N`G=["l.!,aJ-2[5JLKZ>:
%3J?=@7*1-HKOBHc\JRFATn)('aT@kG-,;lI>=D\S%?N=$cRht%[aO.DKmlKW/H(H;/nQ_hQjNqA.C;VM8-!0D3?8A-8YZ8,1)`O<
%bKqC(0OL98,co?B#Z4o+;=LAMAda.mL,N2I'=j\9H?O1cdhDkMWs,$!2Us&'Y[l+s4W58t,!tE8,KaF1hrm$$.6F'Z#Se82^(.Mm
%1_o""(b#MKaoi+dj-,7;>\YA7T(X'p^0'FCb*UdD+@hB&cLY=3+hN:AO9Wm!&Lk5Kk#ct;!/I.PopA7T$"T,I_7m9Z`!uCP.=$L5
%e]oRN3XA#r87N3r#m<S**0:3ZI^B0.PN9+=L0D*\*4m8[KY^ibA0Z[Q$,g+J2$BEE)$-*hP"jk2DqXD/'Mad%3p&2p#<XRR(6s$c
%TFug[rY(!9J?E4II-/!XKhU#[6bXNsapF'[9`hju.uo^f"9pL'4NHPg;hiiRT:6uVMdMX!X1TEBs1p/P1:`$Z:\fu@KchNS2B2cf
%;J$O9Gc@M?$A@,cZZg43[E+Q:!s2aUT]+$^#_4f\[hX55T\t+D/-6h/"->=Lk+Tpi*k5L.[V?)NV\^>+qbdb4?:Y/$QlXQU!5=!t
%OL`l+'*K0RE1Ueg_U'+*aW8'J"?H_lTWd]#V4a@Z^qGgF+jcd1OAuc-keId]NjK)mU5`pqGWJ?7b[$qCUPWZ-lqd`!;:?@ek%,6;
%&^Z>>\Z94Z^^V<]J1aN\l3c!370)=7ma-2%]2ZkUN[\LC`IUQ<EX:moS/'tR)^l%;3("h;c5Qm(8p(1XKggM0O?+Rf"WusCe.?#e
%n3Vip]@%&eOG,:f*LD-`_UVNk'[WNq&DUchP(Zro,V\jqKaatOh1Yl,E,;))E*oN5JB[sgnI[P&,G@cf$P[EbW!"lKdpmGY"UaaM
%`o'?4*m_<$!kP2U:?GDnCs)Vn>kk8A6p\f\*.o-$/-p<*blt3-5#$&e_5@uBX`o?skoS/;."DO4`J7VE0hi+u%B(`LF\EmuE**e3
%.O`?:kEO%1S<:@d83/Q0fZXIAJ[W!1,BQAacV</W5Tb"iV'n7<7-LJG3]nYFl'RiNFYeOQ[WZ>8dd$nn%sMnD!q!^1#j=l;AaX9e
%OoZ!.3%;J7aqY0j4[$\DnjI^:.?fB4<Dj*R<i2m;)$42XKL2@HKi"[G0E_el&BJiJj?$A-#!bsgTn<B8U;1mYMA-n)i#t)d&]c(+
%Er`L@iB.j/#kqh/GK`ndNcaO-YX/=NA=BZ-nW6"HPNN6>lHNnoTgd*(,.WR]=->RjJ-S!WKWXSMOpI\JIU*""T7U>9EM="QV'2Sp
%&aM7\#h)4c-&S#ja<L1.!I$=,/C:H#>59CI=#:".B*:89q9.>#70.UeI%#<qr'kp!L+Gl3*(aOk"V0'a^bZ=B/t/LI)$BueF.J,u
%;kT59GL::2TQm3\n2U^V#Cf6B&Lu(FgQj92*ar#58(Eb(\ZRI*=Bm,"@WE=g(r\^jLg)1LkN(PhrBdo)i8D[:kRi>8p;h.VWq6H[
%b4p#c.Dd=SYn@I)?:X=Patb3C-Ym((B.T_M->i<-Gu@Uo;"4oBMQ_fnOX#`="i2?A>5KOulf0%A1)$(p,>e8d;6\LP6CSCFC*ruq
%C2>pSj<:>g(@1ca!-dk0l4BsV!!"%oVFB*<PN1tL#_l\K,9Yub2$+Y]+V9'j"KGWpV"+Kl`;P*Q+i)!<8n(+,#6ac<#m]7X*/.S`
%Q-YW("p/r.*C20E;>,*@&ud`)J:T<qMM+S'6V_.418Y?#q`=4iBYsu#ZSbE\?te$s,F*l]ct-`QG#f\e6pAt::.#fYC'eD_KmZii
%#9[tR'[VDFaqUU_MZjS8E'e%h<df8##/P$iAJAB=.P.;F2$UaO\LO3bA'i503#ri'i),$'U>-#q2[[_W:'Mi+Vc91\-ue[^N$]g7
%JNX&POVRO&"lpA,H8qN7"Wlqd81>l:Gs3+?Vn=t>f"H$"04E*6\7r=-C?1Rp</?&i'fQDBR^IA+BMMR<,c.lof;!A7;N`Tk#IqkT
%eHCROKIhNF<E09STrhflb_%a+5d)[hn7W5]?Cf&uWVU'<T*g(J.8]gN__-^R-%r<q:jJW@Sup&dR(:KO$rKpY60Y350a]q[.caW=
%3VQf8.?m)t2?pHnUaSWUA5tVr9)S3!WTRt3C'P(o:>%'rf>/uS"'<Mm<13rnW(W=X/J74+feb!N&Lo$PF"-#>*3)h,3%_g1JM^rl
%h$\04JV[jASB@fB8@8q$M<p<P@gkY0Rs?WG9q80@E\fsXE59sO6&B^ILiB@\b$l,QVuWd&@g$CH$\mBHFVL"";$)Jp=769BMfi-t
%J<=\a)0"EHX(*!*0fe4(AFh"A7NaKB!3rr2#V]DCb^p!$_BS;E4b:ds0EPtS%C6V'^CdW8-s?!QVu\8Y7O%Kc\H`j%Omdt%(L.ZZ
%-A$CE%&ig=jX(oJ>s6c_huqj/S@LX=OhFTZUYD08lBK?P5t1lehk__lC/SFBh\dt<\?jNhi=7*MoL%Tt"L:Z/Mk)@)A2_\"[dPQ)
%olA2A,2e6:?<)AS!PsEQ]S%4ki%E]Tkj<oYL5')0T]!%NqcO?db;i$7Go]Wa!K1/Q$VoXWHH6*LKWNrY!l['RdWCg`3lMbjO=&lj
%j95UqmNO@V05CO@Z+2#b;79O?E)VOd$F-$@&DZkjbosDYa%fAPE$HQs'gM8BZY80]",dRN<TSZ4;DD=nEiM95830G0FTZSrHJ^B;
%*a\sXG(#DW+?Z;R-DZ%DEEoU%0p9(7KHok=U-O#5a-F8.P&N\@JV$3R=[XZR=U8OJ`APLb'Eo7KNi%^@#knC;YVH2JT^PfM&BJ]>
%"GVILA5$Y<=]cWb_Qb5V91(o;'b&F5-m!?j=qdRUglNf1>D+[3RGK&?iupKSJ8hdA.^Ak=_=8sQeN>Nka&OuT9u/OEJ.;baR.`s)
%Rmi'SaiTk%JJbRXHOJN`JES\]SR?Fo6rOk]T?H'DLh<(?l=r+ZZk$i"9cRq^Y%Z/NRL/dm\UQ%_l/[IFA8)CF"t\GHCm)$kCG4js
%$3i!]WDc2"1<8pDoiBW9&NS3qWcaBE>.b22,D1hDgT.H``7*n&FI`toN6tae"]GgQeB)]$'UVVFU/5H4#g?NUf7=FKK7I!lJ85Lf
%O(qTci&RS>,#DFu*j8nNcK$lJ!^jZ(RIbrAMekG%k,@7udRLK#-cNtlcrJ-BK]j-S?gkB,ZooVSl?l%O!sJ]mN1l^QE'gS^">5ZV
%#]1TlKNnO$RSb<6%9;n?Qk[^/*=?K44!Peo7Y,jsp_eWZQVMp2Qu\]^mllGGIp<"7BjKY3!uA:9E[!WAJCVIY>X?IS0XRNM5],*r
%OC`Q)gm-K5l,Z@[8)t3u.2@p)5,81(jDB9m^<!!m:llC+)s'+f(A8='lHid0T^Fp?p"N:aq9!oaWb2U3BH]2^4D+IU#)9E>&T(,#
%5Ue(P+E8)!-_$DuL>lqJ[[([,KDUc(>7_XM9ph$"!Wo<IbP$Jign>sZNi\KPTW3U!R7dn[i;hYGeWHkal*O-)6;]aC6\F=6P7ngG
%/fTkQcuKgi9"h_c@&c(a#B,,4"]V`7\;mfo?PG3D=t@p9@Wu"ta]iaf+Ad-Lq&6n]UeQ`i&Bj%\ECl`b4Z%0><:Z=Y1&qj8iPSKh
%AJ,h>H;tAj!`H9H2"j?@AXthLb[`?LBiO>(G/r`S63kt<Z=%$0XA3:/FmAT$!gu)!KNbFH80mY68WHLH,'R!o*[t?TdFt@91*ik-
%aMOl5JO",TEj[Gg16#-ll-cMXI;IP4G%e':8(Bd8Qj):11b?.C=jN2B3a"9TRCPNtg8/`hhq"L+X+LfO3$8BN8/bK'/r=>Yf\WNC
%=)j\58T_f;djDXW1EhkEdtFDW5D_X$*ud"X*@Z'0@PEiV"n#3;UNZSJ(cioJ0pRWJUWZ?a[,H]K*=[#4/gZSdG,F9/Ah?32)\iVe
%Hu]bWLlqlr?#kd<*<dRk8%tGt1'5GOe7LY,MHU^"4RM<V2"O[eOVC?/e4CLtKnqab=XJJ#9K[tuiJA]]O]b>:Ybb8eW`^3B*a'3;
%noXOkmjSY*^mhA]+L4Ac.SKE./%oq1BC/u1WX[JJ)MHN6mQfKr!pYVQL+9^s74G!P6CJ.H4c8#ok)NaC3q()K#F^8-BF8!*+u_T+
%WOLn!(bk=`oqi#3ksQ0L!oYnq!Z?+j7KN[4DgM:W&6@OaTd]j]&D.LuXe^u@_<FXs=B-(>[<We@p,?*`hTo+:"B9S=T.7iQ3N#:O
%i3#dI$`.E*=d;agE5okmMSp1lUS^S5j?ot1%`44L&4__1e*;a=<n\CYhL28Z#<48?:(-0lKHM5u4=Tn2hHX?T+GVS\,;3t^":ISS
%h)p+5*oU7Y80+g$+EqP)dPeoMlcIGr3%i/.=iO%Ej6=eg'b<iC&<^jH*>p*Sd>O1C%g1RJ<NOuM"ING4QNjTa+a!Lls7_HmRo#Bl
%OBl]Q*hJA='^UWrBj4T$!#ZCP&d,[iAiN>p#pZ8+;c,hs^66S$^__^f#iq+O-Of/@,NJV[]0-!:L;iB[/S-s%W\b`M'@EuFJRV)0
%T-ahSLFH2*&V6ND\T-c%0`.UC0QA:.M;6\Z$bd74DZj5&FG-B]:-hN3JsS\9:a]h=G.?P?/gZdo[Ym(8*L_+nC)MSbhNoL17e]Q=
%2&Ej>=N!Z!,_<u'5Tl7L2_`f-UUKFl`\+2[@LQdtQPm"GK<DIJ=cEk>E7.4`&LNV4+Yq2a&K&nF&TAcO\:LoU*8*rP!q#Rf0-;$B
%G2^]P1&+]Vo6m$*\Rlj\*DI)1LX+dtXogNtK6t;3q3pF3R&bBhB[!j(([)MN#T(mldQOIH"0J>ES`%MU+d%s:!a$n1-qKNU.1X)R
%KP.oc/ciY9Z:1P8%<1#8pLS@gJ\meb4rPl$Tgs5GEOJnHM"D]".UF6OJBX0sH,N\Ej3%fpRKCHt^3!QD5+?DB?_K'^_tU$IICNQ_
%N#:DhF7g73WZWL@+e:OC=&K187m2/jaNQOP?`WR7!=XcG5LRMrK^48uSoW]gjP&a`MVo&pULWY.W1=7$AX4S![b;=%\>;QjA]5O6
%$-`+X`Be`;_9j(2e:8&8:?U]B*[*&Q$u_(nqI$glC@Fus8!1:>-kXbg"I1B7*=t>3:-Y3r=!+HnGF];d4aeot;g/FO4E%4pdu)B=
%g`kQO$hZMFKKHnDpY6a_OW?NmQ0%"]*R\G!hl7?Co`8?@U)4&%"Zq-'(kIbKctR8:)AL8XX8SZ9Br[XL@^$p<\#ZX$\bbNM-Yq^V
%#\l:*DjAG8%NL'rQO?5oXXBR_ML)l5K0rINPUGbK$5PT>d16ZflKjHWG>"0hpn8Tm^_Bd=*sM.m\eN'VBEWG3cdTf)*4i-VWKsHI
%PqHc_[h&_u-b.PC?'=gC\rABPS*&KC!abSphUI)e"O_ub:Zc$,c_u2Tfo7ON'uq`4EHf21pV=n(CjB#HGR]GrQt.R^"YuuM=HOCM
%@%csGfUQcL[e+sX3LBP6QO\Ak6B1fI^=2"PrmRbQPC`,t)$-@TXtd`t"F&CAA5Bh[*0AYiYJI8,$D&,?EP5=ugA/:Q^1iZ2\e41t
%T>a9nFDa^`5$9SBIJW6,:1+0Lo0H)*/bP.<R3D8,Fi7dG_@7r?jsja-jC&Q*oHQgfE,HpEIcN28nt+'-*)2"=Pa(03qIm+)Okbj`
%9TB.+U4Y#O-,\5s_60/"7S'e-Fqibr)]"l_AqW?ZbF*lpEPhR*>,ONo_l5..<0$_F"s=[\eFjHN*kI(oObkI!6rku#FRN>u)sY"p
%n=ptAR<*Xn8X.XiEXsdfdlCMtA;X8$l!3&>3jg.]NAb&h(;"X7Z<$3GZ<;Sl6^D"l7b&)Z"T!#7VGj%B(?JpO+R\k&/Q#GIAL&q0
%L'@G-*Fo;Qb^gLSf-d9Nh3)Sa6U`@rhUgVJ>="i&O>)*r>H!GGn/*?<@rINoY8?`BP-C\l__=1h8=R)N3nhO57C>:`o,FY<$RX=J
%]q]ADpr3ut'"uafWN7JnKo/T=mO=j_Zr,'/OsnFa"ZbAkp8'I2h#H1DHf1\a9F$9]>Ad)d!R,@1`X_\;.cA0bBc!>C2__o_MFRf$
%5RB%6p>So$9<nsdSNWWrON@WP:E>X\_)2lr,4t++\i$;WndYpH0NX69>Tk:6=+i#n5f+*B_:\"h6Q@TJA#NXqJnJ2J9d%$)a3;42
%J@fR:P#3!01L2,8fr5<[^?%Ti2;<4<Gf\FBd=+.W6WXbJafEVu(oYWKciG11dM-)P,D)s0&U5?F@\aI=:^B<Y-C?oXTdVl]V1J&6
%`b6>_b#>N-;DP+4T/cj=g+Tn!Q]f=_ehiX5Q8JgL4P`GmoGK4^#c.,_l\I[@a17mhMF*spNu<W^Gehi=L^TIci]1SqaWuglhGJG"
%L<8I"#6ac<&TR&#Y,a)$9YNVU!la[C22:JeV5s2rVQX5ofm=g.9Z#<4Cc`h@cRo4U=`BGGKrGG2GSE:dV%SQ"jf*;ufhr`bYA#4D
%,%L0-'XXtQ,;Ki2-s.=@AAs#KSkdckGsaq?e>Eqael6X?5b58i16[t;n-4G>7KdUZcMtL?8O72e$_X*78>"BFP^SFmlq#uhj]l0C
%6FE\k&V3!/b08I!E%WMC_<!+Z"F?J:X'8>(miO?R/1V($^1tis9/r;oP@^_g5N9\E*g^jWR5;_qnEfER?-%cnePR.AR,7OHE]Z`h
%TJm!]`QP%R:uL;g$[&)m\Eq1nH3_:h<OcTtFao/14-:@gL=DeA_D<k<ils6dn%l<Q=%j]BB)3tiPBVd-U<AK7DfkWqUO?-^M,!.J
%FE!e_qL'uf9G',cgS6T(`"VFU:pr[+jD/Q)`')!hBi;JB!pO#Vc4AhZeW;?$P<K)P4@c3E+uA!fQc*UqOdW]'n/f<Tl%N1_,]i_^
%#'K(UV2NFr1R(T"r$haLK2u&r#nqkJM)'$dHJJ^0D.`@)\Ye<=g@72o3ZeD4NKiQX0E^\DoU4UPeMV&17qflB0HsCM\qY`#FmtBY
%pIXjS+!H=?C24[D/4-78R(e@6F+$uGRE+04Xs7CFf-V'+.`sg#&d3HPI=N@?^.TcJ0ZDS1N.?8`RUT^O)Xc<9+nR5t!89UGfo^Jn
%IBL%-Qk=o0qd[RE->$E"3qt0Fr*>:WSM8)#$AB`tj8OiNl.n<GK9e[j8g5a*0rjm*qhq2!.#:#t7D[S%#,X&'Ms-Ok(7SX3AA4=$
%p^BU-eJkqX_(U%EdkgYT-[a=*S!>'LYIbpe_^VLHD^H*.,>V[dkGidBN%2S^M?i*k6\PS;^MD!RXtjU#i<;S^dcfIO?K^7@QAiQN
%6Gn5",pimGS`T]k/*"4,bk4hWce.C!P.*UW9Z?J%6CaT*6XW.a+MH,Q^s`Jd5hEAJEC`RVZ=GeH3A*&kIH)Te.-"QGGY%]rH6g3g
%Yb<u,,`mm$G\T4mkZOR+TK?^g-D@Md?4]5@oe?uSpB3jkb(oQ%et1TeOp;@]j#&.bmce"K=7=2/?+uEGjXlLcBag#B3d"h"%kbJA
%6"p_X'_J*[0Tagh(QFK!NjC6lC.F5k2J=1tkuZmJntodQ(p`,:b/5I`&0oF-%<ifO8=e(Ina\j1h!3]a>9C^]41DeU5l7P6M%S@*
%gM'n65dKXmaP7X)n8d]+`(%UtL-rPJi/p(Mb%9e9G^&AY:prZ'm'C*E+X#m)j@`>qZ9G*RAVBDE#ba@WgfuTmdR\Y;P)f5AIs=7u
%?_;$J=4d,)8RJ)h(<)&]-$45F@AI8&-8)g-*q6QFHGc1h[c2WQoFX._P)2_28TRsdO`3Q"4;F6<k$;<$_mh[ZVB28.0,aUA_S=Ie
%8AB6KY@\bf32]i-Lsj_f&iu3UVs=5<m9q[JG/Xu>;kmjGLW@^^FSZ(^FmYB@rRnai^HI'gn9EGU`911947/)`EVb./UO1Ro5;*4.
%Gdmt\9`(`oBem59h#YH?R`=qYh=LW=QR5(NiEH*hLXYT5I[e%n-fX):qo3Jgs66cF"m@[;*kop0^5W@RL&0tI9RI_S5fA5pZ!DC)
%hNqm=rT4r;lj>;Wlh@:>jk3Pq>J]$=dXQ[//^GBpDi2+%_cQNIpcO#eP\.2X"4VI@+k!64)P-l!FJk,GCtO@p2F_IeK#-0/n:6$N
%SWob`>baCB(qXSoFui8lB7jaI9hNT$2D-L*h:9Nt/'V1b9P/na-;=3(@W".dT(])<2%J/EE$EY)qLbSqQKK0'MH.,BO2KYi@<WX)
%XhpgcAn-Am`8RP\4H1^[-VaT-J`0W8'BYaKFBQf^EE;U.]MOt:2`WTuc^LQ2Ss@Lf>5H,o)Ot"u&U@<$GW_Fkh;gj?O3d^Z$N*n4
%Dfa^9)lLO#BUkmgFHi)(/8MM!bA*%i`hQ+T>0aAOTi$X(B`.r)>KN:UDjQ5c?A<WKkUmDE(\1C@Q\U%.H0ABL6NfSt4R,^cRHQ7:
%/`cJ#A>82AeFmLKj\(3;7!/%'F-h^N'%'u/qN3%tHg[.l74YXM--<*0Fd(3&XDMB$g.:'IKB)R52gY3/D2iFCH6sG<Of2WtV>,-d
%>I1bUEFr68?("B5XlO=``aMlhaimd)%Q>HIZcT!b%i]OY[kEt!5?kf.CO9uPMgGVf.P0u#%Bf)`gr6_s^sUig,agRi,u;$B+)r\g
%h+I-T,rKUk&KdTNm>_CGo^9>4R4X_1Zec3B<.G_[VHBCJPO@CGNQH!VXASupb%-g0`SKUb)crKB>cWi15ioP0q48&TZoK%"VX^n-
%9J3d/(q4["G2%M,8&OCTfZdT;BpuElgNIjnD+T#mZ)]Rd*<hlp[h;X>/'l`F2BLfsNV^QWJL\<KXQl5o/#,:)$iF%[>T[#@fTn+T
%WWC5M`0==dd+W=X?%1*s5"p?&_-O_,TXUl8&Z`\ZgDi`F"+W=GR*Td5C^!=E.W[V1]^>7NgU$`_m/miNrq%W,YKI!VGS,tbrq-+4
%R9#]eh."$fC&J99a$7@52`\R4P4WmKEo"l?X0Sq>d^/P+Nad3olYe9ghRI<S_C?pc[\HO[34j6:GII)_=*$2:1t!ZF?hrNrh7]P`
%GH])eQ%*pA)Ya*7$M#A<bpJNRo2&b=Nj^QYXQGSdcIE-T;Qi<@.id9qi[jlP-lnq@#,Bf=[k^ajb0KMA\\P7m?*qIk[@I]\\\Ps=
%8\KETP-:J?/&0WEFfqq-SYBl5Dj-2iM[riqq3OlVdCO2b&J[XcD=\A$=kf8;kTbC>8GQ3Rg\ZSand;sT6-/2T[l((g9WP4=+_.i;
%0rk#jXZ7,<'pn4V$Fk4OFa;QHAZ:,VITsC/*Y4%Ji&DT"h+H4V`Km"Q[U+F'qLc=aCq8NtXOWr%#B;]58;>S`nTZQ#[>PmCQ/;St
%VJOMckf[0)ki=pnAm]qe&7uRS2Ybg>=TuuM*k-#%XSD57m3ud-nP]3.E])V7-*,86[b+IQ"FKJ$W'"kM&kuE:/cY:QJ*=1@kukE8
%C1mL]T[G9l_$4D;2*m"#.`/qo=.r#-d5T$H4Eq[W0@(WJQ>)jio0ot$VASsK1Y5iT0d=),3nn&R=5Lbg7hsI+d5Eu:ZZL:d_/0JE
%9lZFF,!dg*>MSQ;Vu=(>;S9*MVKa)@L(tQlG%VVtonQ4]//i@``T3[V9]GWpVRl;jqe4K[^gu#*;_44F>g3#>0g$5aPb-<NZ]/Qe
%nZ[KTDt_`,g],:64ha"=FQl`LmaXI]<.VG//)BR;,@0.5G8777(*@O=cQcFtD-P.\+45A0$?'n=h?-?]^R_u:$XEM#GIpTq<Ul;X
%F!Biu0%O+u6rF3>[Ul`#SOb6mG'>.p;CuW*dto@5UH=T;`NO1&.X6)3,ZS5hbK=#CINkc6b\W1X?/6/c'j04VB_#&m8D8gsZ#)U+
%<CMD<H^daTlup.KZcYk[h7R!T\*.YS[/?\of]3=@e14Ma%pu`_HZrdrXEjc(@K'i%8VP%DQG)5BC;2BNpB%=b,Q&K#@Bag+MSJ_F
%fK$g>,MY;rX5XE>.6r%Wi@Z8.E^,qa*q.nBc40af2n05#GN%K*%IW$08*^B(rNB9;cNIK]Dcg<Y+6+F+cF0b-<k,If`F!m^ltgHM
%>>&euW;gKc3#]a(?WFb2H'qIbppT:N59MH=oLY<(U.1>@n[SH0D3[PU-5WG"Dsl8krFh4ph:n"i=U(E(;n"on5B8=<SnhPj&)V43
%rnW4QnFI\`Ycd??rVj$fSFq[9$JS0e1/?hCX3/@!9fBuSm]B(P$uY<6P9sdeDc1:-\+-Rl-,[?UpQ\=:/PNe!Ir4n$Yg1^9nK!W^
%b\bNTNa7o]qg:p,4fW@E77&jFgCgF:*F4Uo'8W(fB5>09(-BQZPArH<(Rm7H>Nn;nQU'G-E#<LOkV"E)[-%9eN[(tmNlosrhlL6M
%a-!\C*3Imhc#Mf]Nh[,Ci4!8,rh/@f)qX)Mq_HSZm8)%]P%fUeEOR?7kGHR\.J3&Vl%b:.[lOIaCsH+01$W=&W9cG*GFS1-,26t[
%hq;kl08>=qc1uk1"69*fCYu2TNHZ?4`G3!=OPaors#j&)"FnF)[irLtAb"T2r0EYZFrU"a%J``5J+"k)=SMZ)B<qqp0koD?7TKGr
%`HAgh#(t=8dVKBhYKs+sYh-iq+dZh]^>6f7f89o]>jY=[j;M<Q*gKV^8&NG**`fMbKn^PigWQdJZh+[S_28npDcLi>]5.l#Y)[a>
%=%?Nf<#_tb?HKs%/sk%6YL=a7hLe'H\^qqsqQEE`hY'HlA9on'HM9mC4FCGk*-VS+@f>*t(j?/'?%K7;Mrj!m?'Xrc"E"]&^CM(Z
%YCA9rY5+im\OiM"S'oEO4EJUEI]HMU17E$h@+FP#,j>;'E2/2N=u'kT:qg<f:#\b\cR.\J$Ys-rPqRJLjSSIHRJulb`.j;(P\3p/
%GkFt`@`rVU<Aj"6T48/"5D7jojf[gS.m!'T::m7Lb)-RmQt4T9<M2bIBifE1'qKM:Vd7\a=*3.2ST[H"9II%!.?7[_D2E92;Zf$\
%C"cV>d]W;7oFECNm0\T7VdR#]43Zg\+;Nb^YpF=DWPHoI]H*ldqegRqLY35/Ptr37bpn+Ks$G/,5<Xo$lg"@O]Emu_$F;mRna9Co
%Q[^aH]rLJj0?,*"3,Zok>^=HF[^CASMRM>M]_/IAX00[Yf<]nh-oO);X7gkJj7Bc>H?YYRE8'`nAKR<2mp;$ZFTFu-="<Xp,I)MM
%/,tBXHY]-PmNgPZS(#+Z*5/PkdJGM8(YdpO7qZIuA;YPo-G=/3r\&N7:&9`7_=>R5M#;t;^=!n@AXfTID4bBdVJ);QDF;j^kP-u.
%lYD26AqOMc-'g"`1)l0^*7$7`d^st3b*c([^+n2@"kLt_p#eh>h?\U0b[i)g/+gFN>tJX0P5/3P1;U+=ZUI_N^N(Wg$68G*1:r^n
%XsA(fkP@g6qj2/kFsWQ1.GC%t[\4t!8`MY1Em/3`11%YYnLT[3ds1A,e?<gG5rLAH-Jd?E)!q6sLT<>N;Y_fg[O&d*=PK-GgV_G/
%Zp3r\.@'$nHpg3`&$!:2-.cg/XB'RGfPl"R#`e(b'ctUXRpsdJQ%)$NBfnsJC%B:q)0RO+c#_.<FCD_sD[*iE0@7:nn'A:Tjo9kZ
%FAsEr)/Y-f3_MsZ'eE$dDi1aSMnYKr\U2_*&W=7;IJkZBp%%(ca8;I3J#`3b1.tDU"-EF==%TU\98KTYX]n\5fY*X7?aK,M<E62@
%b%a"uq,Lg99+LdN=8.e`("Th_OC&b+]NXnRN8:Y]WnPkOn(LI[B^k<SfcYWCG)PB*g(,T]XDE6m"7/[l+0\C+5JfgqP2k>oU:XC3
%.%].hU:XCs''<uA<:l?NU?)KM>q10n;UI"EJ8gj6?B&L&r+frR2]43nj";/(]^+A7U:XZPQ]$;,\`fW+jg*9+/8[sBl<i@pZjLSQ
%R#h5+)YIF7E<ZBT91H*k14$A.%aC8f"\Q0=2JgLkYO_MAm_(6BpE$qJmI&isZ>K(,fJYZQU)1E=@uc#%0(A=T?-R!Hp]H>Fjkk$l
%HTHtpDsga@1`FEjrq-0F.b2M[o_kFLJR>*h8gg\<iVIDt\8'f9RDF#B7CU_%rmL\7[\X15;>57Wojr1c'Cf8Zk!/6"G.%6@;Tlgk
%?Lg^Cqc3Y+oX6c>b(&T#9,ts`o-uC=(gp&X&GA^IJgQ9Em5Dq#e\A>6gl8AQr4,:`T1>a,c-^JcNS",7eQf@i^>Yr6/UpH41/#sQ
%DGkI@o;tWfHC&K^EEIK@`W,72bc5I[l3<_U!T@4bhAb$tnuj',#4Pj))S=C-_kC>903lSLg77!OaUB#Bn7`,BV:nA(QR/s8O?[Ko
%D:.Ic'nuVPX7dj#_aq\G#@`TC2o]_1onit0rc:1?-6L*BeoDRi?.P*R(Qn)/ZG/;Z@qG%3*Kj^qoC*h7S*f4\b7f*f[L4_&#:[FS
%]W'gIhJCPS<8_H7/"pu'Z#,<ihlK,gETCrT*3D4fPN0a=*(Q9<E40?n^=jsQ#Q<magg?BpDXenjVu>lU78i6N(@;mtbO=Z(A217&
%d?Z?''pc#Y@_>.Oeb1Q8Q'\T.>.e't[s9R^`Z"dCO3qi8aRsI2e*WQoIrlB/W?54@AR-CdKs2Qu`C]`hIW&F]nI`Hplm):0RCdZQ
%DqF8n&HfT7D].6*Fht>!oi:WU6V?r&5#s@-_V_)q@p>8<#LIe&rm9EWZRTiN"!*?K7qACLk?b<3D"^_2#2Qu;At."]n*7U3B!6SE
%\Lm9Vq6t*R)e&/R,8]H#kr#pE"YbF7ZF4DTWHteY/[gE2'0(7b=8@"3]/,h@hiE/H,&X0@Q+ol%D._q[.U5'iL&)`I\Z<ED4[2Tf
%:-ZEKops8aqpY>I_TZpse^h.NDitAT4KDSMbr+4Z([B5!h'ZFkI]fgTej@Qg4t[RtYZ&B]V1R"5jocVB4kq9F0>&ugP/bD]=d_K?
%Es_6m6a+%:9-*2JikfO>HK>;/>@I!'R'S=*'[Dh#l<#,:G.H5^C9"mU[i[Yg9obn+?_k;2J*>Ogg;BN]bB*gJ,O!\<dI7F?Lf[:;
%.<m(_h&i(]Y'okc9Q\4jj7a@fUB-;WVL8%(p,1U)?i.dMT"ho2ac-5.X[Dkaj.TsQSn6N$Q[+OJo1a/m.33b]rZ6Rd*^9N4Y]lCG
%4gJDn@Tu!gqY\IC:\M<9U0?b8fA`srf=5[=lXC?aT3OIb%KtR,C6%H[L`b2Ma<Ll7n9r&`q`nd8mdXHpC-$f?j$*3<_:<cGk[a0=
%OPD@jNG75cgj!sWc`Ys\5@Z;bNI&&q]6H*"Ai7[LYAb7a?2N^I[8/"4ensaKNshS<]-'OpR:A`pY":[%!qS@=VLnXNl.h8"[^G!0
%N<VDmp(/J>#IAkT=nmtXmNOrEYu<\@8?'Gjd:N0P[,qIUO3;0+K,K&$'Ru>U26]##9rpfFS"*]DiaMaG8Zfn;#6qL%Td?<hj2%Dg
%>"5Fto`QPFDu%t/>-g8BGe1(T6,JCE@/Cr5DHegS>8_VU4ANM`Gd)\PWi=qYMtt3g",nlN4n=r!s0an4kee2T>U9;M?iTP-9`^\M
%-/mYq`O:3\kn*eq:LQNkbM0Mi$XLfe"lJ7=k%4iHs*dumq$]`@N.2^U!c-R%_pQ)ip^JhA<dcB>)]ln1`=dFN^DIIorS4iQi&>r(
%o7pm`Ntln&`-^>CMW,Zd](,,?N#%Ag$JAc-7Zm;E4:H/i0Z8k,K)am4XpEfpOc*_Kfmt)gI^Ok10e87.0/5B8pHLNsA+=aOb]2.K
%A&$:.YqP,/fs$hA%9^&urm6fV*OY\&\FpZ_S`48%e%#9e9s[;Ol$%2cda=OpFX'uc1,qrBnt!<N(RQ.9T-W5)380sg[6R\R>#b^+
%Zqj6A!kI/C8Ehf5qNaH4MUQ8_>KtR"2sX8+EKkD>JMT";-d$*sPEf%p/+V.\dXIYo%t!S1H:U#ZjWRe#LFR-f>>;VZA>NXOV5(:a
%]'\Rh]Oa4,`VhM>^N@bOP)pR:b#-eUkt_O1'T9htmNh0PP>0<p]a-`Zb6%r5\As9;_;G6l]I)H#9(BQaWc?g\&A&_Sf)CjY*af9s
%QD=%g!qkRFN;s,>NtY@($.rYOF>/qXma`MJ<EO1'<2QXA-M2\MrbqV6/cTBj4r],bf_[16].YR3[rk'@)24>,6(@S?8U#o!=m:$8
%!^)5(rg1%lh__,>?S[tN"sTjn0Z45Fejh&WnK<BJ>E7k0<-Ee![pGN.r%C$*cR6eO*dm@=UMc+"><e!((RoA6^`3(3ehl.o*$`,l
%kf"(`PGDhJaZXs4$jN(&MPnbtdg'RgBlE^l2BOj7a4W6rs/^bhD`4'>ZUYSL&#V-FXuX3%,LFd`0?nD8o]R77[]LA'5e-[nI*BS`
%&@kRN^Tdes6;2q.n;W:G&NPon"j)$X5N>pTq1sa\kL#[3fJC>*H\Un:;WC`4aGo=._fJOlJ)f5iCTc]dT0r4:TnRd)csMB[%+N4K
%BlS2CDN10C>6p]I3S'S7Ns+WLP\b4KlGq[>_Rtu?khiOg)(N+0(g\7B["Oat),YsAU+bHL6kl/Jkqitm@`ZhU8'W2"5;0b@F/Xo]
%qXU,4.b3!:ACiaDi0XVk'R>.*9f1a6K#XU'0]/6LQI05lI^\<N9r9bI5Hi<u!,gYPOF)1H8U]UUb>]3Hi$,In8+tGces(,"\qdXU
%T*F8DRP"LBVK@6'JUsAYX\ZHX*0.nV_#sf]V;]Z.h,F+2comA*86V!!b_]Ma-(L/UUTncZlqEIoc]+KM+UonKRD:3%_".8oRS<lC
%b`(&tGmIh'>l6Fs)![fJK\\W,/E#)FJ!e/'3;C#8#B,RQ(25dKXR'P/j#&;ZUB)VV>@[kNKkd+ci_KOX,+AqX(L*s\X]p(XDY_\_
%-be5"&m+8RXlDWXELKQP<Fre5UF*`^)Phkf`lm,")_qrf3S'<0%",[@>%oqr/4g'26"H>aJ/q_-\Y7$!cP/Ju$lS#dJd80M8W]Wn
%J_?l.IA,>jYs`Q;9@m9[bV%-Ta>`=EJK-PQn4O!heLElj&81)+bUg_?N:nOfhbn_i;ZE)KhrdY6lLBb7'HaGSGBO#@f8?K2W$)g>
%QB1e'lcJ;G<l*hXHUFMiX`fL!/M_fS0?Z7nZ=8(;2U7:`\%W\S?G2?Iah9!I2;+Q2+QJ*r\kO2.RS!M1XV]N,1gIJcQBTa)e:!O^
%rBn2+,_UL,;D<@L+80*X:)PBEB9&2?A&1kG7SWNi;^q^W:fd"*hKW$q'Rebi.V0K/ApWKp:u*SUI9YP[+R\>fGiZ1mRnQ<gQb`Ru
%UFLS6&n<?sf2/]hns]DnfZis_9;)=YGcm>]:X7g&!r^sW:HfZg]3!%4j'`IZMXS_9^"e9J&sp;ppeK**\@\'1pSIY2InBEU!lins
%T&0-eiX^47k=]5i$JlV02;`T.Ed++>q9r/L+G>%ipsV<?90#'S9d.M98C")fC&bS#d(#[f`C?1@S.L-I*p%4r0(e7]-X`@S']Z\o
%VK!+JXhS9ud9ds=B0B6H.A_(i[VYs6;:=dV0!$GBA2K[Q4hUU>\FkW;A*L!%KMSqZ379ZYL.Q,#V$Y`MN82`Aa6-RSV=eF+g$iZ5
%[9fc+fm#Al+,1G)'C-@A@JfgYguRO-gXl+ROnC,jS6JeKaYZTdrtAUr"s^->i;:aM-O(eG:8b"b3:0l.O-s/]FJ5PQll>i=flRY?
%rMpsO(7UA1=+c<-]Mp\I;g_jq+SC*4V#NXtMXPjD?V]-/LV4JT*5Ph><#7+:EgEC[\S2a-OhOPkPN:&heaE+.nS*L"T>&VuSPF,V
%.+U[HHp*Bp-e?[YXL2TTkqdbQ?l\oeo=B#U:Ys;+Cbd&+kOIOtIpu0d(fYG/YE>pMCr]'eZ4KK)Iq[AFdui4>!k")jEBFH[R.N%D
%"7m)+ZW*G%_(uXeNM-g\G8?tOXFoSN1+86pD4PBn*0^"bDj,:%2:os=(>V9+%&:THnkYY&f.c'(9u)borF'/0`*'$1JMe6P:I-':
%C7&^9%Q+u!h0YW5Vk@OtnK8T#C/iTSC=>jHj*I04o&*^AlDS\6\kJ1Ig)MJmn)>d0jM@c6&(%.IEm9qY_jHVZ@4R+K5!Qlj'>)Q^
%8h0:^_$E#JP)O%+M/gr^+(qKSk(^Qgg*J[LOYn+i'6!Q!@U@T]RoMZ0E;$F<._a'ARn=icS#ASHV*Igs$=qGg^m/N<s%H1,,<*G!
%#;"8B!t<NB>4JgErQ0WrcE.GZQ/9s+<cXUqDm`m]Nn$<S/hI?c]g<?iaG7nhNcR[#8ke6H&m:fOM-kl3]VK,F186\^e"#G>a$]6_
%egYG'37M3?Z(H``qqr=sM4g(L\ep'V3117k4\8O"IR=&+f'3aLSSDP#8nAp#HPc0r0J#GkEN_KM=gcJB3'&3@0ur=]f"ZaSZ8R4i
%U*T#G7&t'aks-t<C1L`r?\9p$R;=$K`9ec>]9.Ckg`!isH+X=6r]W@HfhVCILZSrU$rbC@WQJi(@uek2K;8ob4?;e)0B2L?>`"]j
%gJ\]1GECCeUEL\a`1U\lE"Q)3qbqKVD?Y(7X,U$L$gZl-QtP?uoSLjE'UhN*91t:K_0f_40Zl[DY+:nJI(Nj8j4>)cC5KG<<77X3
%$Y`S[`0P*?P;gIE^bd#n,ZA4YL^TN/rnK'M/04^,Co0EZ)m."NNJ!J]E((mp)Q/d!65Gq2\YKHGAibqbfU;1VJS]Xn''M@U&M1o9
%Lsn;H\WN5o2S@mmA96fXd-!RL_W73rVmYAhS=Y^p/'W?%WF<.<?=L3P[O3s%N>OJ_!I#]@0i@rjf?si3,D(XoeCUNZ'Hek1AH_Wo
%b?ouPo7Ri8dp>)'ZY?=.oE(*%KumjokM;%7V*a!rpFAC:L,k]ole%n-nusrB5I."r6rL'LC!lKOg%6%gZkP)n'"nJ-'0)GPFo's0
%V2t`n]FA8?^bAi_=ggBS?.ZBi3Q[caU-K;`e2PNq>$N6Bj""C"0]H9JI\a/?/2D`D$]J"("X0<oVP^>p79m628Z_HTqgOgM$Dd*/
%Z;S,]2!kgZU=doU@%shXX?[EtGO<81CA1jfDX$'LZVuZ:R@S*L=Ku3Pj=;3=.&VJe/69C'@IcH;C'.,B/OXp&2+RfSST:gP]d.=s
%Q[BkKOu/T.EaN>@]F<C,(55fI3:iu-A_qRV?PRhf`b=.5'k7N.aXRT&N8AAnf"Al.U&>nYQ7dSDm$;].!^.S7FZhBNg)&,e\nZ3_
%L>Ld5>!&li5:3:i_T,UEY<Uo*rpfLAkM+SBK!tb4/0SWRi"gNkWFfMhhs]f].2H^aKP;=3U<9mlL#PdGQ,-d]G-\WRCR"XHU:mq0
%;+sF;b`c12/h!<!Ob2P7HB>un1I8[qS,O8qUZ&4$!:`tV53X=1M>R+L;6`"kl`+-;-GLXn5(qSFSB(:KOb\S*9LS`PeG9R7O]s3r
%&B\*pRTL-E==Ofc+C<!m[hJ)`Gqu`RnQVe)%kY+h<*q/I+B[L"4DK$2SkRCT3Y<XrH_/medEEM]E37O7!p>)07+[UWCV7+0cZO?M
%K$JJe+Y5n0FG(pNM:ED2bLd`Omr>NZ*fgR)Y2">kbduss]SFCj8Gb1uZF:u:gDPrfFI%(,T3/GY)n_)1>:iLtEFAMUORB"EnX9_#
%k8LU$df.31bQHFlL\(:*Y)AsO_3<rf8`(tUnHo".QIf[$JOSr48hA.nQF=THprtAOpn9oW'amj=,?Zb=J`U7rZ*]37U7N3+?E7Nl
%C=^2YjM7^2'mCfJmW]W\HZ?W/r2uOn:b+?H=?:>_9g)c<"Cnrim:Fj"A2G::c\V>5f9T<T4Z1ekgiDUS8ugYYpsb(%AYLF`lGD`]
%a/dhg9X'.Hg;oO/MK%0`,-B8u0P'Z@_K-]V^k]S+`fJMp:$n?Nd`Yf#>dV*Y3$iid1N.GPVX\2..%ZW@@1TNUaruRapu`c\Z]35[
%/Wc7.#-2PN((oLh:<XEL-l4R3&>gV[J\4mfW%>/,T:F4[:5<h=YXZU-Iu5UP#lC4dPBSNM,YQ(fYYX8i78a#Hedo$7?9]IpCh;u:
%'t`h?qHu-Y)p5"Ebq!Qu?Ls-m=C#PbbD3a)iM4e>e3-St(J1;('Gnnm2.#4o>:D6OZ%?Vl<:@eI>Zd$9*_:+8FJ(Lm=78WCRtERU
%d\RBlCQ#GjRm'tV4C-Yro5)s`bdft@T$,qn_fmb*grl>^0t(9K$'[H,<1)lN3;p'Lj%CHSpoml]@1OR^r`NT@6R;q6Ho,B!^!_2"
%H8ck8`m]S8I?LaIk8I))$d=eF>im?IG^s9`4d$-LqW30+bM44@[9%2d%_If=c&]St[#B[</[MTl4I-5SqHE6IQU2X*$Vd0EQHVpY
%HlPP`K?4h5hq:=2j5KKeL"AN5[.dl-=lV(ZF-f+RN4]m_o`KMrDlA6m-4#B25AiZ4aSf.kF"A_hFl33Nr9E$LVu-2e=-()nlJ(nZ
%_b[H0omcEcrSYHePB_&-I=!_d[*GBNDnc,8aZ"5*b^OP=5BXa;k"0N@rT<n>Qe1]9SN:k6rQ_2$p@[1h7c3)&k/D2bNISWeqnM"+
%SNMKi[,-&b*r^>T2)sX4:Vk"G?gmsE)21:1]9b[g^O)5&e+A)OHn]g=qe>*"8,o^Cmu0;7[=<"AqAd*"s/u@M&,#CCDk!;]DnY?6
%fq3^VJ`bisf\cXNeC;/Qb#&M3m+\.RgTb+]c*IX>?`tRNHLeH7Fkcea(d==_WB5s?J+_9mn#q66i/dcVc)mRC]=rLemBc,*I*]NU
%kPY(<l[+U-*\qr_ABqgY"@"c60C(jS"XEc:mlpc"Nhskj?Z*=-S+f-aALMS:>&S0Q'E5fGp9X4:KjPo1m+rO3>3=K*9qJ1G&,6\/
%^3;-?2X']:2kIAUr:eboB]]^4eo?;i?^b@$#J-n>"$ZVIre'NDA<S0_ogV`;LWb#B2>uXeq=0VS^\Q.Sj3+]uoa9Ll*WI&UFL8.$
%mlh\\mf-8Alds`q:-O$uii'B=s*f#&]"*="q==D,G/(W?otFb\X+1-1kMLTHML5#&4L[EGQ]JFYOdiH4:HQ8JoC0lha$m\qSWb."
%96q%2]5_ptY:o572sA81nC^T5$ebLN_;9ZZ5!5r10:^agIua]^ld<tHF7[QB9a<i//#_QD)`93+[4fs8h!Z=pYI>=G[eA/Hk#(_#
%kg^V(.+GG-GF%q0h=uW?:T%@9q-N+Rf.V#(>LI;b)[pWhXK^;Jr>1dmMK=t_-u\bK`Mg;uY<T]X\J]jY(A4-AIWKD^^@gm:?]'.u
%Tm_@XaYJ$lcT_59p/>)KX7tVMh>-$qUI&9Om9E%<]Z7/SMI'.no*RA?J%rAB0-2,\&!lmWfFRuYfhY&M68oSWpdb5$S,I!?cuD%:
%lZI7>_(-/hMnN>9^&!5k3IW0!D?'O2PO%n>qt@kDLgdJo$;I""pU`A6KO3\CYGbP"i8Q:jg+.[&rq3Xs=6KiMrma1P*"!5Lj[-.8
%h#-Dl>&BK>p3QXmKhHbUGi8PYM-cmF7<W$ap;t54gIlj`9off+]F50pI:c:P7D5FN`f<iXa8>$mK`(D7rTr.*pPXA]Li,DgFoCj>
%Kt[JqpZr:8X&s9Ug&81)leZ9tHL9HOh>-3bia*]k9Rab5rUSNEYLniupm9H*+"\5uS%F<Bh_46ekAT`pJ$"(:]cMXql1dnjp#nGp
%f_pdm^U:H#:LF%rjaM3Q?XLR>VOaJ@f]uUAYLnj,:l"Ig^A=(Dh1]2(r\<l8B$Tn6lLdmDj]o!=]F$;id47Tb\%^&UHMcp,];$g$
%B^GN>JmWnQZ@Co=s6'd]qObklYO0A?>P1&Up8^3OGf0OYPr'QVQg*>p7B`F)jX^=G\(a\?fP>?O0Aa3f1V"77J6k=Dq,R-XrOj:a
%YMVB*m*55"l,iZI:Ln#-@)0L)H>nrRZ_kY+DKFON?L7o&T<Y#<J):%u9Bc'Glgk`ae+QkMarXh>L)eh$ki(27K(5(J+7:_/qUPO_
%7Y@O5"ZJqYUe;<dp=Hu>o^mAO4ui>`G;&4FZh[V@5'V,=.PoBpK\gY'jinlQ+1tqMeGHm:pG=6Sqf)8kpZ9Y\T1..bVs!Hed\j$X
%-Vm3e9+fV:*LBg;#;6j@jjW]0HM[6G\_5;82eRll((l#nr93b6c$p.N^9utbGNZ*=Vg5!7jM1V-H1PD"gcA^>o[d=(o;,5[BYV:\
%2-Ge:9E+nebFa+,p>Y10^T!be>pV>*&UE7(k)\u;dIO2jJ)%`H8n`F`(lquTD1;GAYF7X<I?i)BrVY(A2tZ`ah@!f$k1Zqq4Ml=q
%7mi@/7&RP%Lo:!f\%`u:UO"ar?7:9N:nN46r`bpRI.tlWl\u#&1`Q>Ls4I0!q>Rnsm8q=UI.-nJ1\gV##dVgHc-GpQ42!2a!udff
%/BFtYg[BW5H5e4%dl)IFDkH+'@/;<oj50^rBMZWYQjO_thZ&Pj'ZmLs[?q34aP?7`,<iaHl07dW/h<l2B3uJJ$Jt`a1EWNkT4Yco
%<+nk,_.T,?rN`6N(I-7=M@"XLm\cU1>M^mm5tcRD4QnZqqI!_)qXsO91<%caHcMbJ69asGUY"?=?[QHV(iof8/'IVNT4;amaEg9m
%E^Kb:H*<i`inDge7;f?*f)UMZl+q;Wm!:<kXm#GokJ?^q0fR1"'j`#\:`*labBeTB6Gee5Gdat\oP#.UjJV]m7(B!VmAVN!bA[)I
%iN]7CLSsKN*nC8WbIdE[,Xi91q$jFrGX`!2>HeO/*o.M3apL<+UBf,7m`f\;LF=*"?Wk!jVgZV\f%g/.WH3B):[I]Q,4%lR,66-f
%\%c[:-BI7Ji):!k$uODbS=>-0T,thP?XU*!qiZ8edBVuQ(s^MF@t>h6ki;]1`@CA.p@nQG)qh^tj'021'ho'&R0<[JN:T8`8<d?[
%;2i#iJ"F#bT\[E0ca85:/?00]%kh-^r;"V+Zj][nhnS'_Tt]?.1b'DB<jRq+l:b4glSI_L;s+X>HYM&Dnc_E)ol"cVJ&nE<14g^d
%Mf8.W<gJ1NEQC>YpVXg.%cJ@qkIPB?q'i#=QpW^[+3g<'a!#W$<9raWoe_u*6Tb*,GrDRs<9md9Y>s(!Dgj7<o4Cm&V"Q%2rQF9<
%#O5A;>\Tf(C4BC_,l1SVOm(?N<0[AbZhC\fO&-Ri6:V02^Ahd$$ao02OQM&#(D:;k\J][4-dBb0%m'05P,$_I10@`p?Q1fhLO&K]
%+47.B9lTcdmef:rn$s-&Z`FQ7?P2&qaP[ri)e>'":(e1+!]boFnd#B^m'HDHn(PN3l)M=AVItYXlk=BiH=JD&SF!?$ZM@I2<Di9\
%2AG&(e`cthV="+F]W$83Q,@?X4.No?ZuO)]>Bp.C=)i_[)E3)D6'Kt0l=mYLRI4c_>MgKW-;ZMJYJ+5/)oa.:d&RB@aVI\Nd:r%/
%qO\R`<>BlfD]RCDN8>fCVeiq=ge3jXEZR?28(6kr:IBcKLmHn^>Q%3qm=!$aen:Z&\-&lCfE!MFIZ",FD;q"D=/#6CD_K>'Ipbf(
%>9#M;j7q3QXkm'8^;(,eJmE*aCR$&?8p_8B?LQ3A'`/S?2>I<o\"6!Im<8K`q94JkGLiToX95HfKHREiXS;;2>)u"Bf>HjL+)>]#
%fY;.`9a^$T`HCohM@3>VS$&$XeGo#^BVu1UoXZu#f9FmoS;WkZ3ka'Tp3]7H[IEk?4^ZO_l.HI0]V5lJ8_6sP041o**L:`[kuE^+
%bNm\`UF89Pp+*8#)cS2BLX(daq3s/r\C!VNDm[lc)_JFA(c,TtL?:CP'7kdR^MX1H-]V8`p7.nSK?n]DO^hQNd\uUFf8F-U?16qD
%q/sTGpBU/Yf8Fj![^6C32ESOY"a#1%EJT>%ZUFnS\&KaPV.1Mo<Tg:#8,FmC7'4M.X>t%`d+E9J.g)6I7tJB$#-`_8c(2AP-D&g\
%RWr.OY@?bDAUX&mI-Z)!4WAUjg+[=!rBU+FReS0;R$q9j<'C3IZK"2=n#sH3pQItno#Hec%tK"u:#/@ge5>(0rMc@^lZ@aGeRl4,
%Agf@a9Wm7%;"4I1EkK_@JS#;M`E+^bZld%;cDJ&.^\*tirPmUMk&6]:61R'lD-FcBM*D6)@t\-ro8lfOFB?06]$HX4X@$o9"j/@+
%Z1<L<hJW%gPaC"T_lYH<fiam@:3e!FI-<M38?V\jeCg/Bfc(]*f!i\.p8f8bj#[X4GIdk![L9WMcon4T?b_uV@NkJ^bB<5_G8,#`
%lXjBW3T*5[=Ah<:nn77e(Pu+$q!5fB=RLG/<S#-bnk\$H[Mp$>.b!+;fd@h]O[p52Q\EO?h,aj[6,>kdD?4l_gMmE$7afS^K^3?u
%=5E5$D:d$Mc@JH9-;Q^0gn2,?AFWrAbLs3fUR#6Wikk;Dm`iUg#J3ckb.*-EkVj=4m]>&'68^^r`VmDWSR(H%[Tr(Q2KN=,-98oH
%[KUs*huH-\_XfL+qMQ<kZsI=-[296qk0k8"jQT\QaE;QNbtH<!Xpop74`c6BSm,A_*O)gCl1'#<#DE7r!%b1N9"L(83aSK@%&g!S
%Zm`iG-/-KIXee1j*cd&sf^neq)Fs#ZbP8[2qO%HA9eTk8$T85h8,#Ap<II\0%Jq+r`B(KA"Z^X4rt?RQ!_/WjdFadBG<oO'(f.Fb
%8jfL#GImOA[S(LA<8`UR+DtQ-9M:lCZ>7ss;qU#2kb-=(V(!E`IrobDVk-S^URRte41]Ff>l>XW0@5Y#Ppd*P0$peOYGLXam;$gM
%)u6mL92""[)g6>X2l#-sUO]AThP4;E;*YL-Ecf2ajl%3h/*/+$EK))bFE=m.T(=Rrk9'1]i7;,A75\]_ZFWHEEFc#ie4f80qSB5%
%g<*\c]J*a*];sf;A(+HC&!M,\Y)2K24m4A0c24Xq7U1.j<mh0PQ@?#DIJ;$B7<03RD9%**$(1!<4OgjI<s(M_<@JJW_63X-Jm-!.
%g;r_,W'7;^Q+ua)72T_t[`GR&oHm':M8(5&?]Adk2ZO2OeX1C(I7C9.*9F&a/$2g17dg<d/aCf%Drl/(k4ZATFAnZC:"A%'.q$j0
%DSZ-N;OSrQrh_P)W2KAs-cH2S7aOEl@r8(8=GQ<oI[mI,*"R:7UkrL;q=3[Sb@3<JA_A3s-S:565d0Nk1fTAa:%"ET[d]S_Y+N<&
%R]W,g-0j7P<YIcgI]fLFm(W=&NUH44BPg'R)^(p5TT:^0p%WFZYe!>H]JXUle>d0"Su5MRhC>"KBk_ErW_Z\r)#*9pm52fJd#Bj3
%Ei4*VZ?9iN[k@17b$-lB.a8a"m-l>hH^1t(HTu\:m_8XpV1mYc2metCl)N8p2#A<=Y(BlIo3S52pDrr3^I&5S1ueS6=id_$DJHRq
%(>Zi:H'L`u`_KhN4Ii0nq3SQtns).LYP'$^?SCfJ?@I-<A<-8(5Kft1\XDK*h9YXp:j<)_q&4<3BDK3:Ttuf]F[+&.,*+>dF.BH2
%=[%%bI>Hp2h9YYOGXiPT50hdY/Dj"-UPo'jkNdS_Do=`K3:Lq%mUu?c-8<Y`^@#Y0#d=hdS?Mfm^;e-VIZO)C5Kh*J*8L^iRh+F?
%\EJp2]u^*5_aoQ(lO>89PthU)Q!2AeiW!b-]Pg!@F]B5?iumU;LD9XiieF1B[6VCaHN4.LhqkJA0i2_FlJ.s.rMV"uh^FK<*D5)`
%h,dIYW!^7AWN:(KDBZnW)?hT&$#M8AfDXX-eOf,bFA])O!+@OO7ee*<O+j_h7Fh;)SmCIA]&qeRh6+KHCcnHP"=j.*`mniHXkPi$
%3OacbA&BiV42r:uQ*N#NE'90G/&%f&i)1Z/S%4)[P1Tqn=s2D:mb2OT+H3>h15E1P>nB<6h$RFAPqsJpJ4_%YdF+JWY\DHIV7?V5
%doF`RGca&LDa-Rlq8]E06,nB'd.(;oF0E7e]mbk<E/0/[HAFEY<F/rh`aM<4)?A6'XYK@trq./>b;p_TTM7(Nf0T#J@>i$:,OUu:
%?LCqm1PK^3F5=Dmqt"JacJRjJ4"5UAB!pEU8n[/Mj.)n/2a>L?NG>_VfWG_?<R87tqmJ#\li*nsmlH^12h$&F3g8#_MpQTFF'$80
%dMe21n;^"'d^fYSpK_H,LNWkPZn=EhI@Jo/>=7.3o@Ai'+9(dSqP0m>&'b)!0Aa2-^98XXD;4Fsf/e7"h.r6@!h(c*_$K&rn%/gu
%q56_I?TRs\gX!KMPgjWTDR@H:oe+rf9dF9L14%g;_KGgOl,63G;g[nHl/>Y:1[H_BWp_#*Y[+G0^b:]Tp=s>>oD1MM=,e6]''\Q)
%BTp$bcf1V$lDhG]@Ff7arn-R[;V-%ERiD!3T5-_U&*h\`(=usJ`a`/PbnGK^IbO\b].FMa2/eXM5AdaQ[@lXqIkqb0:6jb5Q:83%
%h0glrCBn,\\i0Fk^$28TcDJVs9\&:YTMq1`>s#02;6.I^S*#h-c$i`4*1bm8S+obSF1u\<aO\V;hSaURDY]tk",+L]D=tYidhI)2
%HI2H3XPPAc_MR6(PKpU?XPVV&Zl\DhHA#8k?G5%/R+iQ>&(b[kAqUZ9p-'ud`9IdahWqI=q`5kLF?4*9mW;9RK5PlCIUW!)58q/D
%J%%=*`rUm2*,4Nsh<r$H<!JiZ@9.pVF+1Lo;n$AfcO,ahDR+t9#((MV%la-gBDNI7N9(o=LgQ4Y@g!i9O8'0.m?n-3qM=#o0nEZa
%1_/=dmK)IA/#Tt/o)?8+oK'[)^r`$.ft@E!^+-iOL\#E[A7#3U60kbg[O:Z9g>&;Yr5h&,]Clcuh=Sh%rdnP`5+1TS%`72;iU([_
%@9n7a>=!\-bd5tZ"sMjQah/3F-g_r"]BPN)YR&q)72k/r*j7iZ:1cG-1(Qj*Xs'?gS]n.-[>'+'jiW;$K:Q5q^;WXpF)1/10DE)6
%?4*mB`Q]?*>)UbNhP7leo:\t[lg\YcD89^Y6$:dtoXe7B"gu!eV2%+c_f(Kbl9eC+qc+g1^3>C@53LP1JCa$+K./Xl59=-1qkKnY
%diZ9K."TEZpHXT/a0M_Z5*"!<pW$?`?%Xr]rUMKkD4pml'tDCuq#74hp"AaC5<H>;"ngCfS'FSE5stB:,GbTaf1g$D"gpD%mWe\)
%K8l#E]RefN6b'2MHHjH7H0iO%l,.*p4mp+![=>U`ma',tOpu=e#E&/'82e-2l<%iF6aG[QA8#YO$N/C<oeXDKTK+ED,DTf:hoHto
%f/IhCp@V-#P'u0cU?c\I@'B^?>eT@T$%_;!IVFBe\otAVjSeL&>0HnIIjgAuZp)eDolhepS_L"f`>^k&-OT6FMu1!g4d=RM>3Fh!
%np4]iRlZdHG,#s'h]"YAB9s]d++>7$:`d4gXWmY.q3'fFK7\1AIH)Tdg_oPRHe6IREHH31/)dkB`jeBS&[FjhTftrtF=1SuT$;:g
%J0iHpg-"YBMc+D9o<:CffjtZ#blV12Q>3gD(6uE3QW3?o_*(pcV,uEOTcWPnlX.]pIQp%8Rsjs<F_pJcr*aDZX'?ZD!,#I7F_KZ9
%=8ur]1H'=&fc$>cH*OINdEdi=GGnQ_4f.*jk5a<!<HqTZ-g7.b8o@'*V%X:'*(@IshX/s$B21?'-eFd`dF[PfXs8>H0=uXZs5MYb
%VIOgg\fJE[dI"0qQ`#0T>n6akLKd7r9t>`@Fs:a::ZSNOKT3M1'Ri.*&^in$p@-D!1U>OqG'DT+X"*'5>n?f9CM!"B+kQ)SSJPqd
%LSeR*]ajpF--a!'c[L8lR&bZnpKQ+_7Qh*#HSKJPU+t9CX8Rf`NOb'4H9_/P=hIfRT9cF-q$SZ^CAH-;1T(O9n9t(Yp:EED#Wu>i
%kJQT$Z^rAiDp\>g1=ZW%hECR;<*[h='N[)r41P!nq6d.:n\))HlYeL\?f:<DJ'h3>LPp='f'4$Mr#Li!DkQb>18AulO6Bd;*TVd4
%XKD0.L3h50p$/^Rk69k=T@[kjCq%hSC:e%Sh4+*L=g-Jora+1A[;7esbBiP,["2`]R\,i/cbePB/$pu)ehO8-;sj-Cmmm')lP'[C
%eOO:imt6%2]Ao.[io(FA[9g0WmU2Yt``%;[cu/,V?_)2@Aoj.@qjRB+%3Or;1MNZ`6-Nd2`-IN[Z%IJ\mSCI2K73,>1E$$s?i*E@
%W.TM@VtsRJGP?HgYAQpDKJ(T^Z%IIIVtujWL'Bio=6D<hS;J0W?lq+];gfn8G<ZL^Ychr72%BCo&,+Q<,j(Sc3nRMXWm>[XDWY>6
%S_K#0`&DqFY;t+t7M#4#G_,Z;%eeG0)X2D$Zi>Z+>mp&^%eeGDl5QJEH?tN5$>mk:I<E.U9p,0;*:0^feVAk0[u;B3R<tk.Ce4J`
%*pfrlj;V\T\ClL_FTP&3ebr+K!=ng'bN)3#Ao^fTqs#.A=AQQNK72;0GkYjHosHf45/V#jA#/@p`k`2ZeN'\oghO7F!G]`qLsc+#
%:E:5rDAnJt#5&FQVXO7]pS.C,\sgt;p$DD#jmZ?#`!CciYP?X2iE'<k)>Y)_\ma;Zgub?"(oF7AS4q.D05mUs48@Ch?/0U<[3$)&
%SSDDPV,j(Gh+B'e$G*b4D2YDgYEjf82mmglGC>OE(Z&Qkn\MUDRInn0?Em4AQL`u(^EGtHg-5Kp@W-e]nc%FmO8k'QVT\jd6U1Q/
%ikOs8lV-2D=.d*Ub"_@)ok@=sn\:rpZg2nW[K0Dl(*P3ss7LRO_CZc1BNm=W<j>Xf*rd0n3ec1#qe=eL\NeF]?-6mK&[]p*)39#^
%5G..FTe/CtmDa*TIrDI0!P#*0QX8c3d<>O%Nn%11._b%MPD;;*524\5UiCPNeAqC=SBC5EfMP*rNmo,2CDiqF:HZ'IdNn<VfD!:F
%O!Z>HRZ<GT["ul,<_\dM5-*>="*QmEG*AV#]4X&?C:/E>s7BB0BtDN86rLKULcHcA*..IX:I3HHeM5^_MkD"L?og1"/o[o$TH8$Z
%8QWSqi0]h]j6U-Va6UFf^/NRmnDND&?>ld<h:0'_=tq#LH3KGSafMa(5EA=B:Bf8g/f.p%>L[i@D:A>Xi'R25q$LMJN7r`'50S9f
%3Z+Wh]H2g:FYC*MIi'%CY\RsT?7kJ#$CI<RDr;b8SHs+":p2)XD770<TUWI2^^(kTKl834rgbco;6<Vk@&;Ze)I`IbS&H$ud2MjX
%i,\QICqY(S:]ClN^+AIcAC7tQp3ub>DG4j2O$gSW2rYjrX??I5GB9g5pTOSc7;kJ?*bhX.\FSn!+mjm,fP=[V/Z@43Ir/6:DrBG9
%0-7_$oO"YCs4Uf:Y)cu(BQ9)'cgt]WcHf&]GH'jdpA/o\A<95[g@2"ghu,;";a[\tlHS4sm\bKfh9fd:%DDP5XYGE^+-![mVB@?!
%Xn<CXAQ,DZ5q5&8j*$Y1:>]+`;B9%0'6*j/dH/aR&J*$t^$[YQ24p^[3gnPDNf;t6>+MKN\f;:;f@GqEG!gJ`.o?N,&&-WZ(0Ylk
%fMbf6X#@/Af53^0oec9IA?W==XUe;YS\f9f%g/?6>rjs8o/oJqgnT<]Xl[+J:KK+h_rQ/)>.i<Cpg][k5>>;WZTE&>rtqUP#L[/q
%ZIQM?V1\(L338Z`F#_BRQsS"=5(#Eh\Qf#'?d0S3g%9LV<pA-)0hf-R=uT`k6a(!FGHP[9"J8L4Po?.K^)*6eK)1;^hUq2BkEf]-
%0-=j'07DF`*&ZM88qZqlT/k+a&'fYs"`Z-:4i'#/HnqnXSI`A5%eoq:M*'l:Eq4:CVORL*kJbcEa8_U#iD\E7h-0^&Hk8#7>KWNp
%jI4o=o/j[1e8uc$"6U"c^c@4\5*e+i]"WW=8@eT[!H8"[rk>Ep,H%ipL$To,PD/r4OaLTb4X2n,n(3$;H,0(,oV:$e(LeTXNs%?_
%6rYK12/(2k=F7e[HhMF^NlTuS3WJACdm:q4DNFf$$]V]'?@CY@/VhWoOhc1MZi-bRLpPoRh&Q1S<VOm$].PdT7c$-f(&IZG*G^At
%g$R6HI(,\1)"[G,)H\Zm*rV<NOL<URG8,D.qK@&1RnQ?=F!49DbKjME7'_#pcJ0F)o<sk,Jnt8Y[-k,U?$),HWEW&15(`F*m:H(,
%:2[^p;QFGHICh:B*^K8$l"cW$GJ$EgX)e;YO/#%jO*>rh\@&8!e'`CeqMK:YG%@d"C27@1j)HklMi'r_eDHRbV9RkYKfTF>Y7SZ*
%(3Y#tS+^UiHLdn8-YFs(qtb?*7HMI<NHid'4PR&h@)Eqp%VL:g6W_mIl&gF$N&dDF5-`pmj`^=::.0M4oe:FB@+,l<+3r\WCL!3C
%U=C3m@eXj866>qCk1ErYF?S(4mdAVp=HWTe$L;ED?$*3lVZ"'5Su>+OF3ZYN^6j_2:@BTLotJ&G@@h^_#FjaX#E9N+onB3n]JX6)
%:"91a\j$#C*0hn6TbH&2Zi[R7GP?SoCOFo#Te9uX&IG)]Heo1Yb=Q+frNiGNe9IVgD/ZU@-`+*fec)DVT%?@%F4.+m7o^IM1;:Qs
%i`=NsF&,lne]A^.,L90Oo3C:Grm-lg3)E6Gh`[W!q`:gu$Oe>`b;7N/$hPUEf0_lIU?$3V/+'S<_rptHf&AM`+4@aeJ.>Ch]q,r'
%YL$&C!JAEbJ#Tm0D8c%%c@"+@Oi7+!<BZCF%Hm!A87Hd%]+O&rHR,l`Gsn#*#!J.%p,le#YHuK9`4"h@AYBQP,dD2<2$Uk'4-J7i
%4Q8p#@m8_/,dojsfJF2I4He@j4CVYg\mYuMqftRnZrF0lRsqGXV!B7J2tg?^J'3!;5?9c7YLX:c_`UsZ;LPA/T6RHAIS@BD`sT(;
%s20m4RP@O9oaa8f37@SDfSr'q=RQV+pK4,ePCLu=)eWV;l>^:$+$:epC0s'p%`SqVi8F[`G(Vo%=C5b:g0qI@bJ##[*'Ua=eUrW?
%A"[`%_8@5'eZ.5RLFmGP)YV!73ZM:LY)5R*LOJZrHXNWce2R/TLY]Z>Rc(!X*^"NRp0Tn_>Cd^V_8G]G;W@W!E"="52pTpt9g![Q
%4WKVp#D[]rYe*I\XUY<giPVh%*KKc9hR!$o_sS+RhOaB0^^hKLKse*))Ja6M_*^Gka*m?Z)P8qGK888aP;/QHd&aYd*d5TA(j8(7
%K80uL^38.)9C)H4@6Z.1LNr=8Qf?;Ac&;=E5'Y^c9(Rn)4s)oR(1h+/3cF/s_\meX\Dah_0bFh@>-6OpLJBD@0Fo4JgX0:$dp+h[
%5'Y^C`-VWYXfdD'p\E`UpX]mFDWH%IcTPms.3.op_sVk_,Q?rX5p&5]$J]^j)n3QYIIOJQP_OmprZ=7=Q?!XWHCa&JLVk/Z3NYDg
%f_WZXD.rBW%j#nDm8.=Lgk1BV5M"U2?.k;ZoYJH5^:oA@#(Q-HlhU!N,Lm/&#O.;)(YuoN4'0,7K89E<;`JlKCjPK1>M>/L*d3lJ
%Fk(7K4RDNn6=5t,$.)KZ*d3&#O@SM#%sl$DLGs07Y0DTSh45X*BgY(/kUP`0G$*QL*:Ue^!EKF1H18%(b,b,?9q]6+&%bIPC%4sW
%n430=idI0,nNN$!2naBj/T'\V&+P$KrG.25Mt_W`GZ]1ZWc?^0n-9K9Q_nnCDrAH!/@>9*%V;=Cp#'7cCRp)BGhDumk",.hblJ;\
%/PL?!^NS72Lgmgu&%d1I4JiS`i*ghjZ*GN5k_"Xba4R,()_:kOGh=$B]7FJ*DW0mOi*lBDj-j!@_&b^T.^ZkEDH,?q&,SBXgX&gP
%4F#M,Xr-\hPn*`M@I7;c(G*2O]YF<s\.\VYp>E)4ZYJP4<'qrAm#l,TMK"W$J+jN9R^W@,bY):9*5UH<c2aNN3=8ot__dUqPUN#V
%l0^PJWJ=OI.D1XLDJ]7>lKb:u@s3EJmfL"Z:7!Ue+%/a4pYR&fNnsZ)-Y!et_:mQ6q;1_JBOUAObe7?k9/@)#>X"V0hu5MGX?O=R
%K=,am;6]cnrC4"TqtEO`P:sTYG2Bqn$(agtFb7;R'</EPmq?\if`1L+F7<r(pUB)2:A?2]Fg6':GeNld-$]IVkB?@o\oSE&D9i(i
%5#/l&)go<u@I!FSl.j5=e`6DWjjj2%k2kKSlaKs)0:'=oigo'^*&[\@^ABUR(t3+)pQt;;q;h(al0dq?DdGW?oD<QWD*1FNSka[g
%>:=C&gcCjmH+C@FnaQAQdqjca,u/9H^0@/OGK,-2C7/5R#Oplq0#,/n^\dBpP8=E3e1VBV,Hk&'J!FM"^QRd*".B"rc"-*Yk5P=i
%L"c)Q`M!\]%mE1FI*T1#D!K68\Ta48c\'2l_:m)aCVfl7oA.Tjiq6r*[ZulR^79I&5A-SQ]Oal0Y-.bk^V"l:IS\F1="eI"]nO/&
%LCZ#U$CLK@@$Po5P^>GK,r,@ImB:t$oYA0o3rA!G5#!jl3HojDTDRHms4l)LNp_qPc&[A$-216N8,>uq1g4Vt\V)?3O)oXGW%do;
%q!<CklLFT6f,nU*B(,_)S(uZO<#G;ph:g9+gMK#D+/[a*\YBBKL!)^;T!Qf/@J]Ca-g+o/:,aN`Y=\\ui@hl`Uu)p@R'pXieJ(3J
%PI$?UmW<QV_s7Bg`r+'GX+Lk`dCXYne]#u-pZ)''R"(JsP,du'c]aP#pqss*rt)>^=LaDV4IY@Re9na#7fiO)XWr:As7aDUr*^u2
%+(YB:$WGd1.@Kl*UDY[JcIsE*osHgZc+)Mc[PMhLSb_qkJ\KNL-GEEM?*!%8UkMUF+m-?=iOd8hRUoOuPQ+\*brHbDrmJ,jMS.Cm
%>im1OQ$a2-+Zra(I+HCA.lUd^q7C/&E9^22b2C9Irc$?9VTNL2]Ebtg53nSPih[hOm[\foqP"Ab>IO6AkuVl:&1s*kLK\CE`:]4k
%P5A_FPNrOOq5-ruqZ4mbp)bh:5MdKspMp"5^4#PHjl>7%:&g*:hG/Qn#!I*LnGUbJSZti<gg8"MgcimGrj9S&k?.E.cC(E?kihT+
%eOPLolsIfB?HnnQ<;GuWgV9'2`#Gq*J#JgerCqcBFJhFtOfE.9$5WIV$M5a>7t\(GVf*n^hk*_4_;BrP4W\Eubt]k)X;MBCVhUm6
%4uf&h%7D*.Gg\Dem#cW2[!sl]r'puS*aYjm81&ublUfo^O07)8UF-3R!'5r4oZ*ppD6bm-C\,`f+-T\(*1iWT<1rm2fR$OAH5)`(
%(ff1I0!G*>#M0uS]YDcFba=Mlq1PeQFmCHUd[k@2VF(=H+8/\m\a"5Ho-lCVke:U(c,0cBJp_r];[rC1QVCa\WZ'Z"`:75V5"InT
%le-_k3AC90NTH3c++NuR#2KESkj$>k;^k%3O?0OcI=JP!Q1ss>kI\7>A)-T4hH`!`)q)'N<aK=+.[t5@$\TmGhVJdWm!MgHTH&Ha
%b47BGa5cF'?u,^l6F,!<Y)6e3,9@qbPA"NK9U5,Dr^M/'I/ff8=WD>?@r'KWoZ"'.RBE$q^8u]?H2L3]2YBC:``D#HVT6(-BQO#a
%r:k^\p%>0Z%*Jh^7Xc,AJh[]Qb,2p,>CD50@qX+?Pu0^/Y9+("E4?,dXLf\SE;`k<)Lbcmg\:+a.6ep9$>3_Ij"@K`N?L5t:Iet2
%qQID\N4QDC8,\=q`j6i]CF_r)):Z*NhOj$:h>5='/Y`*0%dLZg[a_uZE;(?P/_,:s$AM;EZu/OKD`XmM/M)W(GGhe*o[A_RiQ9ge
%cNF0ZeVWadSB^:AIbt!&&(mWa6GNMhLGM0d4P9N+=Z--A`Js]^T.Y;^WOX8aBE-b4XOIdL`JaU$ATW$7Z)/l9b@g+Hb:p[-H$V:C
%35*"ulc/m$(#S2pdH]BX;]QWW1k+-0B0%"-A\?RgA[jI=Z-eYAYKom8ZX8#i,JWln`lYI8B-ZP%K'm!SWsnVh1']XPSS>n=I"\)n
%jpf.f;djci2RX<JI(HE^YeTAmhfk,?JhR!/n#a4kAcM?hM\jTE<@"c78Tn!L=6'i8`IHUs+Rb^'H`NckcZalB.%G_FhXR>Fp\es@
%KOU=Djd2SPL1#b5ZI(W*4@'i,n+ng=IbO`F_"%2hBM0m#(u!Vp6iFChMsJR0k\B"cf>sW86[_7aP`_Q@q(gsS[k)%8b.r<o%9`fQ
%Y]_i89q<lt_>LXga`.3rf0E^<1hC@?ZT8"@%HO.jAi(>qai")Di)+n]Pd^GWa+\KP\PhYDTQ]uqB?i&XQli1P(Z544/tK>8ckm=B
%J)tF+Yjr$Ral`FDXm.Kjg>+i_-F%HogNW3);bt)bM0RM8A*4iS-96IKKoa&%7GIQ\jbh?]kT!<C'FU,mhB+fqO,05&&5q6s>5b9s
%Zda669u"B#5J]KG]"I*_\o<AW)$-Ddbl)m$06DW%koUCO'.@eNh!,U<;!b5dbtY?;).BGG15nd3hd$IVZEB[J.KaQj\!ffoT9Fg"
%;S^D\-UrVm9W=4aDM8kWf?*6VK\8F6-"Pi]l;8oreo+>OMu['@NXTu3iS[FW_OgXD"[JcppNhBAGa[/FT2-0(jR_J9Y7lf/gm(>f
%F1q6Kla1J4?P*/ia_`]`=P<R>H2VpX14XWOFF(JceT0lQ5@O(9-10^*hN6bTlKa-U;::C"4$.8Aqt[&bm3Jd0@kq4K$o]2B>iAWL
%k>U4e0l6kddLeYX9g"s$&4rFZ>jIpNnkpOHo!V(MG"oSl9tQ9W]8Ghh@pIie?/;B[DJ"l5@J+nJ9TbuI/iq2kF0ESqUUAp_4"L,\
%qPSQo2Z)mR?G%)hh-,8T93a[%;b`6B\IbI-\6V>'8f[l!j]-_?B%5cc<U8VXqU;qqcP-''f_^L?eIQ!ad38rYl&A4)*]Cl3.k2;r
%n$61]0$V6qH4\l/O(.!I]+/X"^372LKu)90,)CD\*U;(@Z*WVo5Np7;/7or8d;1M/G0Cdcl$1\%^?-A3C!sPA5He-_b`9`pZZe4a
%Vk)']]c_?'emckgPZWcHHLYb!$[2kPmMml0(ZL)<fFGZ++P-(Tf@$+KkNd@l?ED:s$/[qncGq0C$o3m5i-Q9o/q1;$SfTYq@C^(M
%j[=?VcTO#.KIZ-);rN&4s#BkbqYl$qP6\GAjOa>FZY[*q("=5ddn;k4$4WQ^:U,Ia5LIL"?/?=EUim8]JhKXCGZ#?;e(.Xu^Am$9
%He9Y4'cgSKp?35uraTEt+_bsiH2hZ@_V&jKcP/L2&#/<nNFt<O?s_u<nC'k]7E+*Hj6Nt*q?#6b>f(!2o>T`gcO(<c*07iq]<@hD
%H_@4kJfp!;ahsQZU&=cCB<0G0``a/'0'qI'B0Z;rZD53DXN22.dF=_j[`=jPZRR5Lqb[+XpNKRO]MmJ@ibULKGlQlHNAFM`L>K'9
%>G"+3?&de6jGQC;G'A9*du;Xi\6\J$Gqp$trr-q:oNU(NS;k.L+2i?%FQ=5k1alUSZ[DIip%$#&=%aX-:@6n4Sut1W?1ujlN-dWq
%bpM6ghNnU_Qg\7^T)ALb6BrV)]jqBMOcXX[O^^;?=`'X\=T\:u=MHC/gikZ0la"nm(C<1/iUl]q2nG+.fO;p.ZXJZN9?J0EM#h2^
%OB-7Y7S_iFKtaI/BOp&gf>GU^O@n++oJ`iIfB,H,f"(]p-=$TIiP&TUZMP4CUINQQ_]'Y('kWurD'EVkCGF,")i&pf,>V80hp\uE
%h9"gPDUap*EbA+ieO\CNhRX't:Ob"PMl'f3D@(Pg2ZPhkc-:`"J$]ikn(]s3j6T0AloQcC:kuITi4?\>k2E5Qo/cRkG-]f5ct>f)
%g;.BE9Fh;ANh*a?&Uh=dq*)bS^GYaJp^7o((S=cnn;0k&fOV"$5;2&);sJA_`M7B^n\n#)qJTP4A_A\:"8>mi;7r?u_+'J^:`+a%
%=?eH..qc[J6jopO,jc^JbriXeJ'ng>+.lf6jqS]<X#)>']`o)E6Y5KqOT3J_bhgO21>=clI_RbTZh!k.K1d710\W[rHXXsdm2=k$
%kkYHq%HcjL7djoaE\GHE%ZHm:lJL#11a<.8=m0*jY(ih0W9%uEl157k^4jmO((WtWfrN$8M0jR<R`'=L\[:/%?G#i>%@$'3*d!@M
%'5S\:HGt=97,.6Np:PBMJjJY=_2>PWAD<,</Nk44VHG;1b7#o'-h+\3#dk9_#>P[<G/)49b6sLG[H2+$lW@i!^)3R#=$/So/XLo)
%c*qg2^-=^5ZHb&GPSRt4Ce3`XnlgiMk)Pf+CaKpqf0+>s/jf9rYlnE?N@i,1=#Y<h.W'*J`O[&+@u8^uF%`qqH@%2[h3D#nc#[q"
%EV@u4Wp6?8G!AuCY-/idiP+pO3KA>rOq)->IXPmb%_F\"o2Z*?EmCh?@'X9gr#O84i3+6#dkG0u=:3np29CPDh+BWg+M!][6Tju]
%]e"MIr#aI"2at6/N'?a>:"]_hj7LXf"8lT\#!Ai#CfH,#M^kGNmbI^9(k6cGEg266cjJpe+&%Tk$Bb#X1@N>7d"Nfe?f13`">R$k
%\T]hV:a::9p#E7PiC.FCW`b@]jR+6.IUjW7'lD465tn=.nT;lp&05[ikdeA\g"^msWOSPEgIM^#m?L<3LGlNV7W@_.NTZr#rR>V,
%028pjD*f`qEo:nlK0_\12Q"g6R9Q(D^9;%s(V]m?fO)8*Rf'+cH*8;PGLkPb:?"Z'V:+u0Z7"6;MQ7_Fai/8;aIV$7SsRFmg7sMR
%QRePt+,jVJ`^,CiqPB%(VI6-3lIXF#BPrUGM28/Cc0`t9)b'jdgn4<'Tc\YC#`NDord#MM&Ak=UdDKu\3]GW;3fZo9K)hSLm:m;&
%0Pm;rQYHf1SauR,Q<B<<5o/#@<:fA<c*9hPfVGEfB[H2jTKkLfB#RODoADq]Ete8@="a4[k[+^]J$=DcRPX]blON]%k2G[-98lci
%Xe2[Vj'1tg'EuX.q=*SgDZ/QZAnmp.pnls&hOY?7>I3GaN:fUBD.c>!!o%l4:nTL,<S?:IZop&D)X`hSIkCW1om89\]<h;B=e8BV
%G%1n]bul&E&\OYhO\ZP[?p0UPs%g1!72RDI7?ll(\4H5=q%nO1SR+Llr;QBdn'TgNJ#Q:lrpaS;mf396^34dJqXX9.?a#ulr&m.?
%I6G.q3raGCH#p;_=&)Q:5G*t]JpX#o)Zrg:B%PF5@5:$_d`RnsrTD2f(CuO-^''3%/&?r0`WI58UW7U"/ouO/mV025,A[!pEm:cI
%gRu76*H]aLVJiZ.?7u1^SU%O4H=_GECsR/XdpJ_Js/`k91E0&L2q!Dlb3f-#<h\,Y0Ah5c33/2iF1-dcbK."a\(*=KZP6]+O%nG[
%RV5&pBsmUpM-cdC+.JgIoEYMMT&4joK7BKX*u9!`i9.Au-O1T#dsl7Bf!q#_VCdaJrJ.:&1X2tglQ;_,FPUmii'0,:_)V#E+.fp"
%e"UHWIsB\qb:tk1%#:5$:G2gq=KP$c5?XE5;J#G1:KD))dU=%R=k1Nk;iphZXbIX?%03u'hhNr2`!%gJ;.0+D`O#CA^jdqLIbY(B
%iPbNP2]2,PFP93G;P^'*"dH?oj,WaN->?ju`/Cg#O29L54u*/QP;WnIq;/G6:,MH&bU;Y-=]tin1EldU[bT7X!:7T00`OiJVF]>$
%lOQ"VOTA[CND(1E+!)bmH;h$-Kao&+:$A_c%Xp6MirC[bojWWY55hk[jQsj+Yd/EO4K+8FC(@JuVZqiO+Y5cG5+TLo/W\:97Z'.C
%7CYE/fIa*h&SBd6n@4:_5nU\GL5:b$)\c_(:'Zi<BH%Xo>2%nS&T*.EF>cM)7C3M]i/$ZLiZd(\7?!W29*^K8BH%Y:CKL\Y7C:mj
%YD*,N'c57J.)H>qBHNc'`^R776>e^m&/W_P-j!j^#*"OS)\`=,2J?>`gRs?7F5>llE=m&?,/CPL'c5itdIT+l4+CO_2RLp)chZl`
%FT/WG\rGNQT)4<AFbpD'6%==$^=?3\_u@6HRg/oh#5r[WYkdJ[p&?QqrBIj&Ut>P;lI"#En'?%98<N?jdba6]h[@>b*\Eq3rVh0,
%ptr!9,QA*@m=0]`:]HoNUL@,\7VSk8WM])3%qa7/O+pT.48O3KdJW%Jl]podfAFo(+(,"oFMZ<6T'Yf^Y)Ful>4*WSI;a4*knG*d
%G4j=K=gU6<RN@Id.i<]9s#KkXOam>[J%X/.R/]4hkdF5gXVAsnF_XSJogA\FNrIXD1AYPRmJC;`o8*6CI5mQ^SY.CRdCCre3b8pM
%ULthOg,"ob[!6-\#tO[bcVX\^DHkh\qX_bKh4qMCmf[p+O61.($W8QA&EgnUkeq%qNp[a1W"]Qt7*sDWP=:Z)IqcnRm)2=>a][$u
%dk$fLXA_Sk+Xe`7dj"45=_=XYQ=Qb!&GVJDm1c^Jo4]$W8j,[T(knM7a:a7BGI"lMEL97e,fbiP4];!"3bhacM!.ZK4&2J@i`/ph
%$.I;tc/7-QV0kK,F?7#1lWF*D]):smYKrssO2&8c7b?Kh>olgH=XR!FXlQL@__`:^KWp9=d6-b@E>mOlR8`eoENH/kmmM/i>)hN#
%KHsTO<0`U*2h\-:KG46RW_>e)3gg_dl9R)g7S+t`2'FJ3AZ<%7Kq4GX^Ld"BVJ7m7q/t+Ba]*_gWpq4_D'8$V6)*WtNB:^S'V10Q
%:6n17BPLH/<Yh`2OfJi@Pb:jIk2NlagFpC1\QIOR,kPg#8M+H".9!(#VH@7ufZ=f"UnM\]8YUZ3Af>gd)J^heX/;oVcd4)@E15K]
%bU09[?n"YS'NHrD@Z=:Y;l7-jEafHNh"%1<7(N`bZ;[!V;Q-lQOodh,F&gXlR6hDqW@IdI[2`I&F%+dh!o49,RHB6ul:4pJrDZd@
%RH];R,KM)\D6oZ]bDoFueYAD+qe2EH@F/IEGoe>iV;#g[W>UT$!SWtXQKQoQFB4gtK4UaFY%#RSMosJb&7Vb1)!TEj22!0o^7/do
%X'(gir5)-!fA0aFdS_q>Xh4C&.hHBObtj<&5RqXcOifYj'W"Kt(upuINHJ0S:K9]\At<%EWVWqNlOpp2*MZI0.d09DbgRO\G)WN0
%j&qN&!1*`fW]*mo3\%G^Q;+'32W'5"N^GKm2tG=;>b-EiAB*s]K+Uor7"Hp<9Q_fJ!OL"D'NH60/6$sN_kJ&IJk/O9N@tdH>D0$$
%"aLlO_'+^n?f"We.Tr2)@ZbD>Tk]7cd7Z@XR+bl6Qb$'o(0PJ(<D>8&og#1ILI;qKW*3aPC#MZM1VEGFMHO:lYq#_]a[Kg_C.-O)
%Uft2&?!!R7OFUe1r\RT>Lb2gGWR>&+PSCRBLUnFmg=)To(Rq:tVSnYM1^!MNQ'RhDoIsJ6\l/K![27;MJl(W5g30-Ek;:3I<&<,o
%eL\t,*'n(+8kc:c%omMI6A&Onlj6E`7aF3*A%"U3*Hj+!\?Br0Dfh#*^=u'32W!*:r:\(rm,u:a^W4@^FADj?rt#,Je,Rl,T$#&O
%j2pi1kiV@&fADX=WP>Vi^]3cM#W/Q"+$7MEf;#C=^L(d47tJ(R.sZI=C\Rb=nJmU)E\tCoUNYB)7*NuV*iZ/;%@OV&K`4X[b(#sh
%rZ#3mYoKO)C"^H'lLaX>PooKQ$=24Okjm$\[8k5DYH.-%lGCsEV=X:c26o*sb3AT`an=jR1/q!.R@8$#e't&=]!:r#R&XUZ%-(I7
%p-g$Fqe#$`pXe_Lr7,0a7^\N9q8$OGCB(lA!7C2r`oAqF7fCoPs72(N2=eq#CtsJT&%ZkOIp\^TdC8CF:.FQq55f_GqF+nQa1orM
%X$/X'Wk7$BotQcHpRjIr=`AZaea0'Gq#9s@[5R681?dfqr3B<\8\`sFS:9]eQakpXp9$'pJ"CshoPQYGB@"<RHOo8Qo3Z4=phDV]
%['k,P]'0(e0R<M6]NA*BpXIujB4!U4h&G6tGl)f8H#hke<Z_7QJ,\DGo(LMkfZ!%H]q>22kOQNmGjY%]]<d"DQs7T!h1*-n5P<uO
%iGq&oI2nT;/":`hr7X2\'21Rbo4I`)lKS-AD!V%dg$>cP\'>a*0CFgdY9-2C%j,[PH+^Y:]C)lVAo%[Ia"KpV:/-RM5p6AR^"Nl3
%^Ws#X5EG4R?[lis?N9u]6Cg&2^E,4U.&r]kj3-I=20`B#7SoY.G*Q+"pOBcs9m;l3@oMQGVW-q@\pOI_I,Fa+]X^!Rn(k`7rV,9'
%PD:6cUP$&5f71O6n71n&f2j&c>e\kh0_TN1R/?AgqY.til]m*TB8;9.+3IB*;<$Nlq"/FmikaF*iBmA'h;$bKjb]T;B91[$?!N0B
%^+VW1I.I4'7'oq=T07Grlg;llPs;>8O2&snSAmkaohDt[Oal3c2=^@InsCMHqQX3$3$(.5pVpP-Y2-dtI;e)tjgfPP*p)@E8LFHJ
%p*Eb6>YX[Yr=AOs<pL4n2tHu94V!F@p&Dbj51[Tfru:g-q<QXbMkdi:^YUXB\nD%H%"DNO^HTpARb0KIS\O$-UJGNj`4')l++5kn
%Pm<)&_;3;u`J]R3iIa(DpA<7\GtXWQ);dG4[$g^?qetW#l!Jd5mC0pl\`:p3A`aF#$a]BE2_s.<qQMn5gJ+b5Sk6Jo-U,7;ZN#Ic
%gC!9GBC`\!N[I;2qWiBCmHrQXbu^erIX\dV=7YtRc%VRDk$EJ)Gd@?jC$sO-o;>s<q"44Ho"k+LlKiOP2LbI=2E?#3kM>t#O7g9"
%iU4b8_`PHih0o+qn,4?#f!<j(r;G`"rcdsEs8M<W@ISU?dGD>;+/ThEHdU`_T>"+YH2?pgQOb1UXlnT6*_i6nmK@a:T$8mZh>[$5
%@-."PX!bZJ?@=oj#p0"-H+(9Yio&)[7u%K@0=GA=)J8%&f<5DuPI'f-ao-opYKHgY07M/Y+.jN9^(k##rRlG"0R*9I=snQ9J+Mm\
%a7/]Zi_H^>HhqOKn_0m_nb:5-2_1H&S_(ok09[dJ_Z%0b480d40CM=os1FEEO&o*nQQEkBf`^j?b.G:7gNVQ1/UsRWIdI!G1OcV%
%mFC$Xo',_sn[%maX*6JFR<P:Hm*FY<`VA<aZ0D!IijmP.h5SN`5KRMVpYnOu[=7Xmq0r>1jdY'b>P[aNV^pZ6mM9_"de,!^TB`1q
%@k.e.-cYl:h)`-YqtbX:D!gf=cIgO*8`A:)r:tVcBB%%aH,6lf_'u"ApjTb1rapruUj`L.ipSa5=B^S27jk3(p$M@eki3&#\&iGG
%4]DB&U+jiL9Q)Er6!Qm*c`%Rg;4aSY5F_A>_O;JnIp)#0OIX"ZRa%+dI@1&2(i)$GC:88"GCZ\T7?u,ng.eK6]rB0R<FqdqI93`q
%<jQjjW#2R>6`i7`#2?F$Cr9l#m@&SbCBiXq)0dN?i-gi@G>SS$6Q(+RAYB!c!I%<DhE)Tok@CfFP<jCe#2V-RFN7q=rK;`@1Bu[Z
%(i1^4OH#2WgDF;AHj92mcg"VZ<h6(1l6Q8[X5VZ3d5RcM9"uXOKiM?QeUju*:2M"PX1I")C0OE/EE1_"I4MEXk":!(m1ko3;sdu#
%rNP!].m:JPhts1$5CCt@0pRm"3`adjB[q[;3]P]NU",:61)<s3lcPT$)>3<mL7/FEAsTEgN[hA9F^hDBs(\FQl;UqGj&RPiR`W0Z
%Nj$"q[I-A@=&J:2<#h,@5Gm`6e@@tIa/S')<BRKH2m))_<P?(,Qa#I.<]j%$rB.(P;;JM-%_n"X^U1>U)2=oIIp[\Tr9O7Meb@s.
%T:B5;49+XP`[OIK=j?Mn@,162'=\g=rms]cpg,&FehU?Ei)$h4"4`,4;emDL<\rphTTCZE$JA7Qs1p(8iKHG"erKk/%rV1RDYXf\
%@1RJ+6C1;pf)OcTB$X/L[#QO6G#n^r0@0Z)9YjW__/<`k('ge=^G]/RP,%FWlEsd,1$Ue<>tl6:*?\A<WPQ2#81W&^6U[^j3uf`q
%-k4D%:]pf=W]iouaf-YG+paU?/;W@Ye3cK%&>pR9OG'-\ePbY'j_Aa$f!L7#`k4d@RRq?0'YHht]W0)Pd3qX4BfsdjWG41bXX94R
%'$\mK:<f_O*(@03Luun*,=bsD>XWY@<?k8$-*a3sdOJh$`^6Z-@4!1>Q_F+keBf`=eY<9]*G-la%NR]k`^BrI4kumFVj(#o5Z&8i
%S0^$U+etLm/Rsp]QI/S[N+$Dk=0-*BX@VrN@lkoKIg0(cN,qDHkc(GHTSOS]82@8\*0ABD#ZZ?;)3]HIC0:*!8!;2uI0YPT&q%,S
%T,!3A3sV;k.#KaBeYK&O.h=_-,oAO;5[g%a^s!XJ,`kQ?LW]96f$pu,WPY*k!c_=n<+4&$1nuU!"co)r8[YD3:6E>lrEHBhXSbb"
%"]C&^N)>-K[<7-JT,%7"DL$rdeTC,mGWUel80T%.oT6&,H8CGY&N!DGVrlOPRZYkW"@=urN/L*+)h-8a]!6Pg#>V"]ZAOosL/u-.
%cni;E'AB9<lh\XBgEj(7QkJIOA6jk]<+`/Y:I@:PV"FD<*K%0Y8Ass7oLJZtP9pB^Q''TYe*]:(8?Cu8#L+."=AjZuO.h9EpPoD)
%#*[?/VI>k'3.n#qdo-\pP]MpiH]hJiCfP.G9$%`NN+HHmZ7MCrEti!q+C)6W6=L0_qGqlgH,/D_BuHbN`)?*fKbUX@8Kuj+9i?>]
%\nH5A!)lQ)^bHLcL`O8F?qIFK+<e"u)"E>FZ*rlch,4/4l"%@e@KqoN+%0WJYXILJ8.,B+ObIeV[?8hPRAL>$$mXefjcO_M,5\J`
%d-YchZ)29%<KOa*9SN0*=UYpP<gRL"]^mm"AMGkeF'_*34Cf0N-<-DOG]nYK)C5EPC63+2$#0s-^g()6Al?e,MH'?u"*9#BVG[LN
%0r[El6o:tW&qe_'H&4R.Knq1N;?JYF?.RfLid0#BOCGgsXO3^k/^poQf)W`DBlKaA4iiH_:_CF^'R(+af\Su&CSXt9Hq7uXLDg.!
%os<P&qHK_hJ>d/b)[ZV6<TIb'=%bDNUX;A0P$N_V$E[LQ/3+S[,iiL(ahtnD1//oENM/UhWY:AA6QZ4_`5AMYO@W(WiEKdY;rBH#
%#6sN>P1<;RK1OXmS/12p3qgNBb='u!-f>_jKS5mAaI,Sl*(^.l.20.NoKX0k'1I/3=SpO&RVEap`]bS\mIF,>`0%td:X0d2QNf8j
%=dFS"T9^$bf/%^)0<"&FjoZShN:+R!6h<hXA;RhFAKo6A.-n0*<a8[5M.^Q;MbCJZ]L92!&V@C2Qm(inFkOO?'Q"a\R6Ca2ao=aj
%-u3?AptNZd*/3FDn\V/?DqBnJ@"K7(<'!Y5?r8?@)GI@D+ak9O:0`J)_<D?krZIBE#Kd\t@\29o?*3s7.?uPZbhoL2$.ZkiB%7V>
%OK+WbgMQuQHu.O%5i7-AjK,*WPVY(ZoP*P=Y?.VHlTgqc3cdiC64V_CcO+GX)O<GP7QCT_6#!ZoX]JB%.DQUj?Z'FOP/\prl1$Y?
%7p1M6?Hq\ifg,DP@LK4DnURVb`3fecN'm6bZ'L1KF,E:.7@J8aBS'CQiS"X(O)EO/M+;h#V3$7"0ejin(-YBAHD+TRl<"_Z#n`(4
%)4iEf@:D\ha$M&&G)7(q'@o?%A#j*JU5.Vs=I9*$6Q$1S.'bNM!,/_a$)g#L+tP!6L^,b*)6PQ!@2@SJ+PJ9.9H2FgNNm;tL^cd7
%<@$pOQ7''J%k*'oe4u-Z9oMJJ)oQP\4!dm_-cEG%6<n<A7_Q)G7rg..'"S?lD-aX_3S"ae)%'NcAX!KB]q6EX5Z5025XID^7%g0'
%fa'fp<$@h7Wu?Z$epr`k@b/1cmD<$[P#Ns\I['[m^oh?uS/Ajf@Pb\SRn$$sGTuLW7KfM0&,63PRV?7W5bkMZA-2!/X-Qb=GX,&h
%iE?;CU>BjBedLkEOE;Gj8aM;2?uTB\e(Om6$L3J`;de351,t-`6);F)@gUKb.2Qm!X9nHjVBEd_Khun>N6I/400'#(09,2g'`Een
%[+Fpe!3r[S9ESZ4Z8?!]/20-q,QuRBiu]V5M;AA$)-Ht/&+[On!,\J=o8rrPLh@5ADPW")Jo3D#NQ_T7KLQkND!aUf%&On]SN1%'
%BS)NXgd!=<r&%)RBA-9[82_^oDPKcXBG*?=*8MKS7s_pBgDMAp\Ljebe#F`/W>_CNO^o43Vho!3Bu&"k*1"fHFE1Fe&k^SRONP5?
%4@Y-01ne/J$BV\n"+Fk$iG7$X7bO.8eejORn.hg[XaLBV#M(edf"&33JEY)Q/uBVneca)13XWYp62@830RI8;PsL.?!s7aYDc3"s
%BbtuUU3fKR.>40:Ku11KPOrZs31Wch\65LZ0p9CK/d5VqE\NRn.;&Sq^W/M@3J_R-3Zs9E2?Gu[#ZN$+$??*#9M>&qTgH(hY"f4J
%>qmnO[K+l"'hKhj1.tB^=V3[I'#E:p+;K4q&4Pf/d>NpM$`5MW2MrVKk\`f`[LfN8dbM*h8>)Q+\4%ht<9YgP*=ET3<e%B.Z//NI
%+u%8e$^+?t7A0LEMm*a-+VrYbMXYF*?u8C>[ZF%QSjKu!&V>^OJCV9>d(<!*ioDWr6Y6Y/Dh86gF5DLZe3ag;rKMB>oSM6`0o?MM
%lY].9[K*h_9rNUs&1O9B9#b;V25[T3N;-M+$9FMnS2!NkZ_8*68^<VN7PXf^Ws3SUQ%qC3#:XKn\2FobL.lPk5me#.H4M&*1S[E*
%'-N;cL%]RtT'(7OM%gM/[b0o6@YP'a*_-[\6&[=m"*'FN<e+rf!:n"Kp5CGnQOYC*L+*+n\V;QC>tW"6>*]RD3Er?t^$pAJ)fcLE
%Tao"<3$mV<^gK<a@RDa6rZ.-N'Uo5f60i5sD)6=:@<@XPPQnL4icph<dW%B9#c(*7s+$n.Y,I:L8VWh3c*.TO?lIt7d=lkIZ7Nr%
%LZ,i0]!D<kKG0Y<aa"kFQ'nbm,a;<-d<;%E>_f"q6WaVk`O*Z2;[XiQCC0SE'hPtj&*\"dGkNh%:\5bTX@*[NR$]%b?"?Zc`&%r(
%4B6W#n<fnV#_B@eP"A\?PX-'M513'QKm?4=&E;E]YhcZMd:/5kND0XbL9ec:0AgWO3gWsW=QATQ+da#s(.cs-:^4<sa@E[@e:i07
%Ct2RBB+G)g;_L7'&;e&]>WWLRE)SNn-h:g?SnOF&JgXQYMA-,+l,jRZ\hY[dHl:!qqD+uWo8rqo`3kAoH^]U#p^mfdRtf=%Jc.@K
%%08M-#THDTH`&1`9>_EOhZY0bAj@\6AWkg#/0fdN,NL(R/F()7Ud#-)m3-_TpY@:T`$T!#\V>I>$=DI,5eF.VaV1pp9IpCcO9A7B
%Le]Nf+[EB/7UN(%BJ>('8rn*;Q9ot+8E$dmXJ6%$nC^cSE#S/tC+u%j\>p":'<u=H%#NLT5)3*gQo)(&,R1!j[lVA_,iLY(,'Jp%
%+VGke6Eo5uf#UrJbO&bEZDe='`8+R%n/>Ni%PFPQ`+Ca/^c!mi5XIe`$<!aRJltWZ+<'F,&i:k6OG23i)6Q+2?r7rG00un?Ngm=V
%-b+.HWXUn2M']$^!Z=\IOs(H=!==>BTmX?S8JPbBW2)\5CCc$M(dc-FLG?bi&_rm6*Ctf']>KKI'Aad";Fo3t7K=g@+!:`5$%8H"
%)&%'^Bi65tJ:oD(!7(iNZUj1C+<j6G(ss,(;VX[>i9i1o:O%eb=E4nJ2^14e!3.3*l@<K(64p39;NsgHE/PD2&h+/3Hs6m#R[mGe
%Tcb6GE,ufFa8K4N+`?f_$Z#j-#Ynmd6j!$P"K5,,Y_AkYZCmp?_R"s3/@F-IL9h2LC0V?f';PE6Ke"^m?!^tHW4uIIS2RpJn34*X
%:C"@kLm0#<%Pe0T,8u=g917U^MXYFB_4>%4I5YYo*VX>HBtL&hXMPub@RrRcBpc]AZtUq(q@YUgd;00ON=5u?>Bj.Yp0Yf&JSEU+
%ET7g)#.q2lL(<#8-&.Mr%:t=G.Hp0k9hHfNVrRt(C'j00L0..6NkQmN?RuVi.AHr^gS/k7?WX1e)o'=Q$0*ak3S?6f6!pLBG]Un2
%ar;3jrjMG-^g5MZKL[48mNd)pJp(n:WlE#2h-<XGLeVCAM(n9.KKqTWOc)f!%RXeF.DoGT:Fb9Tl9[V/56u8r@2K?fku_#=A>^@$
%XJMm%2KVBYdAASe^nrdliA=828:haf)(EI/P7L_;lU!_,/.1q6@2Q#8DJ:D\XFdrj9,>=?Y-\g#I[S5o%'pL;PEe[*"\D2+E7a.q
%X<_)-#F$MXY!!1\9regW(.m02E6jhR,OFa=(5mOS_ulLH,QuSj`A5On2Nj1Xgbnn`(/)4M&*XTk>^I<BRe#GM?BDsPJ6cB&0^R)f
%oKdHjQ[.rk0FOR24!?jU-\Q$'(P;Gg08+Ej*`//U\FqTbebcMHL.d,l5dH09E9e9:(iJdLUdeS(b[\,<=U:iu4t""$9T>$BUc/4C
%nq$FifLBHo:mQdEp+Qp*CJ?8FYj*'Fe&Vdrl6@VZm&oUU1BiP,,EO/dK/6)N8YLB\To*5](O`D%Y/5cG^ncXWbYj8c$Rm''W62a]
%.=>8?"jLKE&rk"3"H#)\5q)`&=>Sl>8<om)>?3b^=XYu&;DBR4'FcLJ6&?`t+%JZ%`1Z8:6K2BL?*#bsT,P2`%,W7d(t'%L&e!Vj
%Q2q-07q,<.ckmK!KBg<L3?+HP#S\.YG7`[NirMtR;hAP<*)Rg-#NA(Q0LUrB&5sHt!%)*]+c-OJARNJb/u%c1%q5jDN'N,5N.X;g
%is[711d*'roSNMNYbC8aL`V\s8"5J<87E'f5#(32)1>u7JK.)86620+8fIf&%5.M,f$[DT,2!hN5bD*4bg7ZjL9ij)7q0T^3%KU0
%1l:C3?5PKp<6Etk\Kq&c%L5FaKSlK0h\I#V$4@$Z/farU6hM$-$4@G,&dprt'#A;+)bHtLMEphh(L\I:67ecXM=>>$dAO3FOGnJk
%qMb7P(LgR@:LXX/^KD/=`k7FelCeKYI`f3/>+eZ#M5^;S&Y:S-5)!u7AX#LaLt,rXU8U#hOMm6(fHa-u:*tshi0RO^<j\eVbaTFV
%rjM;)0PF4?*[ZkP+)rE`$l17KT`^E&0nfIA-p+e1RGNt]i*]rHMU;KH-&/qI@tg[2Thf*I8tcTJ!)Yfc&V^(;+c.?U`g_Y&$.D?Q
%r"=.ZU4j2H2_gQpD<VpgBMCjeQo@;UH\sF)"+`Z//=QrFLhV]0R4#kHGTar%0cts1ofS\0!duQ3c))<>K5$0+R>:D>+g*s\q@n(+
%,arHZn^1;=W)1t]+\1MmBLtN5/LN(rfn8cB")A/5&J[jJ0G!DdKm<=$kYkXk,Z50c+'ATB:g/^sOa/LbA0Ei_X^mSp&7pq,OH6a]
%F^Z?>+,%/t\EHl"=<LIN6c;Ks&Q#0;Z%sBV-`(>C<X>L4Me/&gCaap>,NL(R/F()7Ud#-)m;^OO(uYW)r!,K7lsNpp.")XpNm)",
%,n$D'4!BnX:'eub0*Lj.?3oi54B>T#inEFe:P$cPK]n:)T4s96UI%XIoZ932>-\^/(-"pJ'M]A+P?K3l,?l_a_E=VY#]]5toEfE+
%No2#cMDR31+V$BDSfS%ILBdH)2VMrt1ums8;[2Y1M'2r]"aJPF;L@2h`M@ZOK(DV19JIta9W0_'na&Se)A5%rN#Ike3<E3f2G2rn
%&GpfB:_bRA/6%U7!=@GI0OR=*"2q9SAdXn?X\9V?U61`f,TB%(CCK0'@l-JQ;uVSV%1E_hl`mBG8hkHtDc/8SRMZb4(S@0r6MfBB
%RaWh9`,AQV#=3NjBT_k?T/6"K-DU]*:!1n`,U-Y7.p*X!!EE$rmq=1^-)hbE8HPof:`g?o"<`7GM+Caa,Qhe3EoBV74cfg^,oNj?
%#Z"B?+-UE0LeiStH]%p'Wmo4F\s##SIZFf/WZhlZ,"8'<&OGZ7ia.G:qhY?Q+9FS:jhdRJ'EJgq$6jk%#cB/XG@_/D@XEbg/<+28
%52]Ceb=g&8PZ`A@RAJ:,$PAb$3#VokWBImf,193j37[-mBo>ol,![>@6%j.aiDePKfKpd5HMW5u6<L2Ts+!QU1JTM'@:?7`S4F6Z
%k.HNRlB)?KT5n?J8J,LTW$-qH;faT.Mc0umG_Li>!qfMR_Ef8_WWBc"[\0tBaTHKsm"iG6k=m3uO$of;KKA4XdOB?;"BePu']I_s
%37U^0_EaoIEXFU76(UpGkdpl59NIg\6rCrLKh4'L+Eah9ZCo`E5V`*VWWmP&as.pg"&qYhXpp%k+kr4n/EgZb#(<,;Fr,,a;!9Y8
%_\g<1Vh6rq//]r\`,&?RZ_SB;>5LIA)jg_g/>NAg`)JLBBeq[QK5-rnc^4c[.>4*\_oeKaN8\V!%9!O5Q4,*#>GQdUoKB.43Nuqf
%"*0W$a`o]tg,7uUfNLHP,`OY^m2G=+_EA<r!4F6Vm2?DR4:r>oM.j@4q#K+P$R/!N<^mFf3TcO2pJ/:2:Q"fa+kfZGHiWQ&cp+Zt
%,!l%jFJ+]-A,U)^WVpm8Kc6q&8\fJI$%WeBBeEm>5qT;LW$TTA/!>#u*`*W+GkNiFbmc^F/!5Jl-CKkA+q+%^7qLX]RHTdH&6:-&
%2Ah/+8QrP88Z3cR5RT7f@3t/)4J453EU?'!)dth*(5jGSC^NF:DbL`06>K6tg;X&Y+PP)9OHcnob66OQ/f>hd`BIEIg4^kZ#dfN'
%&pPU:eKDf<LXE7R0:jDEKO0I$R)VQA2an=OSmm7oc2&LQU]t&0&4d11#"e%$O::bm0H]8sO=nIM@"!fdFqZeV5e@q:$Q)D[J8[Ih
%jk)3em6\jQ"kkP#m$E6G@n-g#)3tk+2`<q5<X-!%bX]$BdY2p2=VB`JK4qa@YFq\'K*jM@kO_cJ@:&*/h)Z@>q\h=aYkt+f3"]At
%K$BloA4`3&!=X!0_0oC+k?M!W^2'[Tk?Fo>Gp;rfRACJP(QNUiGRZKEdoUP+f'Ajo'UcM*'R)eWM)SdYi^@Usim3H=LV?NB3?\8'
%2deuTE?a7ieRN#m;M[%S:W+#"ZUEgMaH8*!@0=^Am_e=Q<a@`-Gpdd\0^?7rBpY&U-Xo;@1;\48'F,o+p-``?L'FkO]Ib'He2@&U
%!p^bqi+GlT^\1B3fF)t_C.+ep%GVPLb/-;?Y"d\O7>@1%NC:^`JuDTn;RN/;W\_jk<\/"'9ECFpMXg(#$uAs4bk[/ZQ$]m8,=VI+
%:>@#SY(jDGb8uL%X\?YpLIi$g.'jT@XprVi(XdIYp,?6;i@]u0+:4BV5_*b`iF!cUFA5"cAh(g5#\h=[)c._:-9Eg@KQh8:>>BpI
%W#RB`p]:]+1lS2]G&BZ160'"EN9M#4\O@.2N$<YM#SA"X->Z*`.u7E,C]s1,3k"&1X'gSI=Wn,#645'4U*p3T_7YH'W"?4aas=j1
%MQefnC:"^IX<;DP)C'9^o&s7QU7C^JY$_X9bG(qcH7[kp'juO!MP?Kb+Q.qD_Xn0'jq:=?I2,.p<Zt)$AnH`n$hmW2Rc$A-=dQWS
%/""bF1sR@8SgKFXiR_0r2?Qg-Vunagr,(D\@eNCTOCJPY:>dHL%jcB@eerCFX&^p.;F]jY!kM=I&:kq_#\%A'+U58#L:G,'N2o%W
%@E4hB'RJ\D/#ru#]1Q:Ha&Xm*:5P@6bgd8$-i=r![Q+VO:^LSZq:j?,#'WT?;j44'Lb2u9;.)$EVN"V>Q,i_<1%*$oiC%MZ$8/ri
%.j\=*j`eRG^EI)q,::p56/S[EH"$P;m//W"eN%.g*-p4nSR5NN8/!cqDRbSW%CTi=MPSL$_$BkL65WOhGn=Xk/L1V&%'pVT8kLh!
%eXM6e[P9JE=)eV3JL7bBh,e"lm*WBkj%cc<K1h&T0M?CZ"r_36K#eqQ:7@,60oskSKm:$L9"')F:7DHVBSj56bH2Lt2jS;!2g(Mr
%[XEiTTK$d,BHa-^kdAcD+YVNG;'G'.U"r4ZCY3RSYa6j%$RA:c"a4FQ,ElWN$%E2(G9rm;!1(JQ`Gp,RM&[S$6QQd!-9WF"M0TGA
%![u!pN+&'e/)H_0;^jg=8XN.J9K0m/c#(nF?,U36(Q5N>KQ%j,c+9nL>U/<sF0J5m]9jn-![8dn_QGo*,8[tjbO!mC,5cSD2uDO=
%Eo-7P\:lJi[9*]3'%3([@abqM^pVsfQR,2<`D!)5f_Z)jga)"pFiYi0"Thq29*Ddn<>+L>VO38NjM\,%68_'7<PidL_Dj?S<RqGD
%KH22U[EQHlRV&dl^g+HW;B>(SO@rY[&OhA_0J*;AdL^>j&5#;R%(Aoik]?)A6e,=;ML6Nu&/W_b=V0TIj'jW.VDet:c</uR:7+[-
%#A0rc>Y's4MjSOne;DA%WB)[5\2;G]/$PCCO5$q\$O?fT&P\^&`)Q)D@@&g;BqQii0!p:.QS=ak(GR)q+u)Jn'dV&fa^W$ucATqY
%Koeln@E&"b\]DsWm1UR8ds?`P,;6EWhc!p($$Qt[+M+Wd'6*\&GmW,7oo/K>('BkA?>M5EKM95k/&o&V^mD-)PD%($n:g`!>7bTp
%5qc\=4/+bZ`T9_q;ZlqT.#f+K?*".6']T#,Y<33%`:*j3(cM_LiP5NY98l":^5+'LhhTKZ:kUr1n96RPTP,Ba3-So<b+Sr.GJ[_8
%R^-I0#_&JApp(+Y6K!c(10GNWiXCA<qXE+0/nVm7Yn"iQMXO3q)T#[(P15aGnX!Qcf5<1X0>5>$lM&4/INcOY?d&]CMZk7IiB`Q=
%qC%_S_cVrq_[OAG)\=7r'3qIo$1_nR6("`BVVuVd(lTe(KOCN4)1`A9!\b6T">MVD%I-C'JQh*h\8$^m`._s$+Q#'nKK1@m%5fF?
%7`HPRP9pqE@kN-DL'5m[0l/Vm:fE[4`_^QiACcUI:i-j+g#dl?VdU5JgEU,\C9mKKN+gjs_2&IR(^VC<B\5_jp;h9Yamsd:gosp/
%iX2[\K-8Ju(Q$8UK5'D[+;//h-`?ec08OQaErc\Z5tI)T&C[^"`,a38icf[XUf]#(@T,ORB:Am2p,EtBZ)I<2QoQM5?jr2.(aBfK
%[TJ2W(+pF[!6"tKqNb%\`ZXMr0k-!8J4N4T^mL.hoYHnYBBOk$7<-,19fl_k=V,2M&>Bk=0G`b6(peM/]^dNh,:6;KpV@^0k(#1h
%6RJ'^(rKN$HmG_T5SPrl>\kGu'.4\%aTH$T@@UJ,"_5Irm-qfXXBu)`\sto;VX)2%A%LYF(rN]`@n8t_KgI1n<5=m(&I49Z3g3q[
%dh7T_NKh[n0IH@Q?qcc40P54YP@.'KO6(mH,Y0UY9K?>BJhbJBK!D9D^mM8W#E0flJha&m1L)U\nrdBSR*2kb"(Q!N!@2)+TdXA:
%S4-nC:fP7JlH*LU%u^g9=eXUQ@jK('b6)7/m"$mdVZ^LC#lu;[/tj\&$:L5'^_l2[_3iVKJhaWco?++AN0o89/f57I!>lIbCQbM!
%`__0#9#<uJ;oFiB7!1hrnA#ml!.UP$?qf4l3og^hkki6#4:>i@n,n?l"(O<p!+HRN%tQ3>$,uY41DUZJ%i,"JmXR#Hgi2\l"Ci^n
%d@J+@YbisS(BQq%-t"?0$c+9$a^f*NWpme@lGHul%N#ipYmrdH1&AWVXWbKS-V5D=.BP]dVP>"L0ST]8N%l.,//EnlU'eo)OrbH=
%'Gl]O_#\&iKkfcl(_aGO0ICOsBr)?[BYm,],\iN/'QG;A,!eUFWaH8$7EES60IEf#k`gF%N!/sbH!j=79XN4Q@q6"b,AAoa.-:T$
%`Ia1J<5BDcb&VM5N(K49Vq_Aa/BG0B"(SWF'<UoC(c>HL8$ZP:La"Ii=X8e/72:bYHXo.I#KC;lAt<rQN3OMO2@kb'ab+<(&'!8<
%af59>@#VVrB<`R)'NHhVD@k"54YS5]+P&"9^_dIMC_L4#1p*.lQqHKFD@dB-pE&RCklE;#dQqB]@c/#[^gquRaqA/`7IjncSX0J,
%OEBCtYs_JT,fMii9Zmo%(Q[hIoqUB&J+RSJ"o-9\!s+"+aG:/=(<[jn9H$Q-PXc@LkrYDu;W_Qt%O<8G@0t$FD"Ag<W(BReF[69=
%l\])5W)1?/`"[:?JK-tlP%#>1$k%qT"=WQ$<T;'T1Ja$DRu>E_q^ELaVQ6SQ"=hkZ4m?qqd1W<&.RP+@/egWda@DmYI5+_5$WO"(
%9qjjG92pX&Tt_3!gZ+t_D**]mP*VN0'1%_gTe$<r6\7^;`0@U)<fA.(1p.*gc+ln[,5[BXk62!Fb)jUmK:%O%*\%ic8t+.k5S.*c
%84f1AE/L"oE01u'5S]XjHEnBlK_&Yo=Wq<"Pu3KYQ\W]l3H.i`d5)B5$nWWu,g7Po78*`+;(G*I9O8?s)*Kd,b0UdHMp5geO=B0A
%CW6'l0e*hO$V=87KSWHS!):<u_H"O;G!pIN$Hj4k:]pVQ.#f+K?*".6']T#,Y<7_Z`:*j3(cM^:iP5NA8W5fcY)"A<hhTKZ!(etG
%n99uspr%-h\K_JsCF(sO1Fa'hPU5W^L^4_!cm3EN>X^33/.G-iL.!`lnCNd)qh.D>"1"0NqpMs.OGgiR:fjM^AQl.-OJkiKmr9Ul
%&eZ0```rMR=:c*S*WuWud[0\93Ka!M34F\a5h:e%fG"nXg#et`;2\,cl&6/b9mDJX6u=]J+ta"',_u_8@MCXt01&Fp@6d\t67:c%
%;lh,!2@l'EPDP$_&cs7e&1:&5#u*,j!%o%?"C\U/=\W$ojC(;f1@%>5C^LI=D"CJkCtM.np.,IFROmGDfrtcW&JkL$&julMYQ`:[
%8!\d%Q?!WJRroo-2?a5/[X"fF9HK?$h?tMMG&RF/8M>nH'QX<5@R3[q2[F-]#-f0?K.&\;#I.%BKkceocSg?sd[[b0i3A3]7:kVd
%'h2brFANj[(t?MKCf5(p=b;)Ka['KqOpG"k8I(Lm9-a[/;S7Y);S1iITJHJ]MMoVT]B-sj.<TgHX9V'cLppIr;8eJ2d8VGF.T;SQ
%6"N<#:`2!Meg/;Bbsu?>-CKU25nF=fMK"`W:]aS6'Q_Yj/h.Obau$1:('N1-\T-H29#q]cd?Q=6F(uRiN%P>GQ0G;g:g".+9o,*5
%?@="cKf"Hf."p$1O$I8K_nn]N]%SDZ_mDgC80_\3Li8?0b0le\`gBfBJeis2'\6Io.A^La#N6@Oj_SYpTX%P"p'=kC<2Kr+K?B8u
%;&ReaAIqeFb<ojX>c*(D"G4u56;#+"JlBU@J;_>W60rn0%J40c?jZ#8k-@=p6n4rKh_#G))7#%?N1LZITd>AVKXh5`Lah7W)`jo+
%o9-&rkUB@H>/GQi\Z?>t7GMG^#F1.Y!0rCubmLT^6:@b:J0n\Ki@8;.4/+bZ-+:P9Ni3!X)O/5MfIk_U=UO\IiE)U>2IcF^!fS(O
%Mf<&)kTn.h6<D)<MXNoF/1<h+.el(B92IGU2k2t8`)mq:b1r[[,9(&c=gBZ5LepqK9u7[_<Q('BdXW$E#R&M0^BSg8"1F#.5aG;q
%?i&=bE_1=VR1bd!X^"i&VfrB2+i-HUbQWNT"X,&P6',c+<d.B.U4a"+6\9s5Qj_Fk6(Vp7.MK521n;hs!RZRU3(_UHUFG1h^dWj2
%+=9RP6+mOa:huR?=09i+\57#VjP/gj12/Mk:fB\GA.7HCBelA2joW?;Jrh*K-5pXAEmPZG9pj-c&JqHAJiqdM<$iPBdBGbH!hq$"
%3(Z#E6;tgVJ;XOB5r<DP@=)NFfOQEidBHb$iX2[\k70!5)E&cU0mPI4]GEt$m,6r(Iour?0c'gB(5)hT"sFH3+I7Y/&EP8:+P)CZ
%$>Ks&K?Duk`LrY^1(OO2.a)=JTE+IXDRV&+1?E!2$W.YD(t?MKCbha*$&DtJJ,&of!Ig,P:`6N+;EuMH4/a^>>>>YX;i3$51)$T;
%O55R*OPlce@R@`HEeknt]`_&XT*SD^LE6X&JqM4%8QZ%74PP6_->J]X=;M*kYc\6ZM$bO_78,EP*QX(?#qRMsZPCB064X0U\n..g
%8QZ%74PO+?QGZmi5\3P`2(T)6QG[GNU8=A]T*S:;%3ZMpTsRqc@T"'+!gP2RZ7lsf5['m;U^@!Z&DnN>Q/rU[N%lo="YBjC]#MtP
%MF\$[&sX&-cB_Wg3SVNR4\Ud.:nTR\LP#Sh+Aj$)U_uWq`@_[d$$2L=H4gKM9*csQEsYSR'*9d!6Nj[[-"obD())!":mfE5+d4Ut
%MXg*):mj#(BqQi)+LHf`Ot`6\'JTccdg"f_5cK@27:@WA)-Xn&Z+6qI1'ob<(uHr8A\q?/"RQI,U&G%\KSbA_LaDEoq]I2n^5u`;
%JA2R7fI-#p*K[*/h\X!a(>4N&#7*#$&2(hN"e\dHpV-]6&PFOd&"Ts*P%LZNmpI\4d6-3'm`:"6=p^5WN66f2A]_Lp,!n^!1^R@l
%<tS(P9*8($lRS1qnCO<cB##1e%`hP*mn;OV68!Q%;,9T<+]sR4:p(Vt1P(aOi1Mjf!l2d,O<?KqQtG?(Kq-N-J4OWU)0<&3+NUn6
%6Y2u-R>00.+X!6C&1?R[dgOP;E?X6a5su7tUS+$$&TXPq3&e!DTbDFN.9;OKRto.^a[AKj#m$/CLm)k'e'"I7joW?;JrgO(JWE@.
%R^*niL2mqSZVJHXVLTf82@l(pL.sL@O+`%^aWaKC%@b]YE?X6a5su7n>L725A3$?=!G0/\SVW1u!C<;o^-c7<<JS<0I>>PX4bk'a
%N^HT9kc1s/U1@8Z?I:lj^.:DB*XIcn:JAV<c_9OW*/D8LWXc^?eT9r4_K4pli&LAI'Q_ZI%R&n83:r*j3V:H4f:`G$j3SI'Yf(VH
%3B,pDlZ2J7HDRP*d-Ji<%R$\c6]X(rekl^LZ\h,R/&cMlPmra@O(mk*,>ICj3:nC:l-Lr$`M(oViAgJ@`Z0aT$.>LpVOT5\*I>q&
%3qU!A*/@kTiAgI#O:FG%U`$=&0Ck89]eGde\`_>7-0/SEF3,(C-M5h[$k]eF6]ZQ!R+-3@Kt49]l8eJ^`ja-4k_6Q@b<:V%/KlKG
%QqO#10a4<#3Y&i"6.0"n*\H?`d],Z19Yq4iTm+c3:9h%Q,]h;*8,^9](+,2;:+XCp-OD\rGn*!g!.UP#%_]*)F\(2ZVsb#N)XA)q
%i<KY!kKr8)!a`>QHcRohQ;DrN3b&19?&'KA&epm;*I;0\D1t@G%Q2rh(=n]rlU&lR.LQ0`Y_?>&@``.p5Uu@FHIR_b:*#*r=N!7r
%m*O5UV/Hf']o$'7kk3`u3qS<h3qPs^*.$`K?_%?D+fdZr7HQ](H?scTH6bH[4`dkWY!Xj_P7G:)7Af1\6Ve@:]%E`8fb#Sao[QME
%&[JE(O7a^XUn0q,W`J>JH4E(Ennmt<H>,.^Eo3Q<A'i2\-Bf\">i;Zh+=(JtLRp>63N;2g99WMVe8shVOCt'Gd*%/<[+olhWQClm
%/K6T.il$Pb3XHus<d!W*4gLU-F6I2QAt;iGTk?Z_D<)GI,t3A'k_]Ar![a4qI8$M/c+QP3CcA4*"n"TAMOidkgt[HKCb]7#7\V0I
%jJY:RU:tp!#%=/QIJ9=m_S@.BU-E2-OH#Mq;&(%PmD3Hi)QNi;<5,Ym?#!?g`=FRb;@3]Hb*>;ul>AX*8gfl^;$nc>D<p#P0MUd*
%X:m[f6b9(+[XaME&6";boH!Ju%4T@!P3*-KJN0`g/AX%B]NkF+P^Wq:Zrcdi$'L>A$FL+AFp`X"\Q3!CUTXuMCC\hIQOesKW\8m5
%*n?Mr+cn>@)#tprrUg!T,U9Y)el+c"2W'$;_un/F&C2BtC!(OG(O&3,FTWfL`QU:ic0Og&CZ[)F$$DT"6,LBK\dnOGRnW$'C*M<n
%[H[8sRKiZnF_3F)EQp5)?V7`:_XuKVM=:]OO^e2iTMCsg:<.eJ6I;R+LI"U$Kpf3/GmZ?rOq:;7oFdf>RFCRT,NXYgnk$B#O=nVl
%qHG,74\g^!)(QL<VC&]-MF<0_G7G&;W@1+kQ,"K/,REI'ddpf_Le?+!>aj37'`XEJ7),IBn?LKoXXE]iB'Rm0H(Zr-on4uC@ekj^
%5,jL/VkCLmN=\Wj5,+Y<JPMA:?LWo`4^_IE'Ci=+<etB!f2Gl*f**t5.3o(!=(,Rqp9H,p8WcK^1pX<;fm4"\YF1Jle_r<?0ijk\
%Tss(rObZXu%9b'>"goTnXsI>2n>8o,C(]@e_-4c9H4m;JGk`Qs[>8bn,Zote'S>S&hC9`_4?UM:;Yu\;jce,.hlI4VTX#uaZcD<I
%B!FiJO$45Q5ei["Eeg,?O-nQ-_GdA]_(VZiM=2PrU:KH@VVFVd1M]'a9eiKZA`)P*@s`V`Id\b96;Q.q[t!I+/kG"M=QhnIF#S1R
%V$4Q$aqV1^!cP,3^'Lpo-=N2ahcrI9^A^-REdjgLmY?P`j;l[I'_>G?=bp^[45pD:gAXVQ3TfJe+tlP0FQdm]*"CsLdPPJ?Y(H)c
%#"_(Rr5?qqEgqb5ZZU>J.5+B<Ob\0HkE)0Ll=IkMf%amb)Q^JU/P3kh@;]Jrm$s)c43a(?cgV]A&-1qtgNeNT6,FBC$&E<<^qXHm
%jkjR\H'.fCEfgAb4X;]9ZY?ooO'`q`fB@q^)-jcJd`)U`]0jMIT,f+)OQ;o"O91d/#moOc;`=!a$XJRfO>;\js)L9hI"i%aC.-On
%_#mDN(D^[[h,2hG]ofiL\nDZY+TZTsI?C]6A3&A">il4nfc:54W_J(-gY<8fmh94M>Q`(G0r,Q=P4%3p.)u4J\I,p"cO(ithse[n
%fLB9W3H.n>kJm6&$D!9:e4)a<D/QO6YPsDcWUJMZH_nH6"+)?lmIX$I4i?T=S6fnb&A:tKXl8tGIJX6B9).0*Q1TE^=7A2_&i7=0
%.;iIsl-f$cjusO-.l$G`8n,)sNheqGn9ZJ<Os214DQf#iRU4*0Kp5Fo=iao`aBl&,auR-J[ASHtCujHk>S5f%j7Z*h:%h2j%u03,
%?EZbKdjpgoe]tj7.<:Wc;Htcj[*nE.k/nOo/!8c^9'.Ve/f(otMQ:'NQM\?.YDhGqnsWlV>blQ2oh+sf)/Rdu?t12"I[TD2P[*q*
%"MD@bF7)HRj,YsCqco$o]hqW@es!dET=Vu/%Y$RROa\ZP6%G`@k`=`IX\H\f=mcCS,]1Es&^sL),UV:%8.$V&l@:>GI&rD@\_S=U
%:4HfO6HU]GrU[GLAdpbEqkI"@Pl23%V]I$ujF5$Pd+)50&g0-d+6b%)bL&c^1,g=8rK4YC'G0?Yk4M5aUmPk8&t%Ff3@l/U-V4H=
%5;H<VVl0[uTB.5'8MciL6;HV7IW;/ck_*3X'J%86c0^QQUttF!W?/[Arhu<Jm5A\;""sAnp,W,:d]qOWe#\bD]i%AVA$:R#SR+n&
%a*@5'PJ*-c^g8J8>hCkQPMi$o_I/>Y-0;t2q\1d<:.J2).:t]8_"e6Z5p)d3]b8dhY@OLsas]aXo+fnu;j_?2Y;FB^]b7`NIZh:k
%SaB.q("$0R_!.,`SF2Jn-UCj0Af%R0[u=@mKhfR?C6Kdd2Qp2>,:-$9P9AW_dK2'e/a3O1>3V<r<U_FUVcSaC*_a`k%X*.E*Z!_i
%pdg7g$+WTD']e$2p<#L\93Dfh)2FpPQ+<HHk29=0rifn[mhmbDJcJ?")3?8NgdNDR2.D9$L&KcjS+JdV%0@M"7,J]@G;]oHEnh`j
%SdmiA#eK&f781/UOVC?,#TQdeVOESX\jHIpS\E3>Kp5GnqGDE\=@U4Z1Q;Iun^%`ceAKZR)0ep^GaJlapokkdaN/_*fg$RDK;&%(
%Rg?]?SVW1u!C<;ohJe^s<%E_K;]gi9N[RL4#7)2?8](gT7208>Jrh*fH`#I:;jJ)CK:f)JTbDFN.3Q^<bo;[2/1&af"HpBG*okLP
%,rGfcgJdkqE"s'NC'>1mEdW;2R2o3L#GNJ(2ia^K3['hD`<u0QF,)!R+mTV.HAC,nNf'?^,P^"2Np-3G"(@_Y#dP#ZOkpjsLEjKR
%N5H8*m0lMW4)+'j8"9_m7j;idVK75H_Iroh-Uc#U%jo5*7iRTmaikieE0"?s8DW51e';pN9SJ^.N-[2[k)c'g"AN\DK6Kisj#c3&
%SHo7m6[$D2@&T>MUaLaYM;TE&_k9cK,-;p7,F1k-Lno8U^l%nAVWIdWb;##2jN0YX)AnkM`_I;&KWI5M;C!O28\G.*L-i1@WAhVu
%+O;raJ2MK8%Bu^`3<Lg$Xl,9g@p<VSA?L`?IbXr>F-?\WKqtrCe/MdaHPJT<h>k`N4PRLL<lDF#/b]KP'=B"h=<oj./9;O?cJoD=
%,2,H5]E&eC<]IRqAq20[@>[.^]!3j\UaQFri4Yrsd9\f$bHM_&#>ZtI>O\M]>R&#H2AoX!Z6T`<I4f#-m'WTT=F_P$P\7do$*5&N
%a\Wk:jkEA%0M.5)X*j&.MZgg7]Nl;kemk:-5pTP6kX=_[(>^\h`f+4@,]O;#rH:c_6'`FG$#uZPb#.:?dd<&m6"2B5304kV[?nmL
%nH0tULM2gX?J;&m8Dr2d/d>%$+dktHJZB28?^;r\:`%%]TXGCIG!`j1QARs-!J<G"!8a+]qQbK1:[$;_:>'[0;EV?Q[)+G_X"i&:
%bG-RH[Ke8>.?g,mLl+r<hrQ#a_E&c*P+\HK9FE"Q6V(*l]9Mcb!9(l]M-;&=BhjgRqbHA9#/%`"WneiPWX;*VgW4+?,CGnV<4`W$
%bp-BYB&h4$,tV3NJr!DQKL($D4Ls1"C<4EkP:YV:'0+!/mJVn!pZ#!ajJD5>&Ig)BnMOXp"%`q"?6@bjq9\U#6;D27KLh&6FMNEL
%!b10`onmT6Gc$,X(s_=V904Af*(Dq`0eA".FO,`Qqb2`#L:Q[67[0^qZ:lm_H#0\26;\;l-uoa8RP$#n7%l`!WnM]L-Q^\Yn8*<)
%7c?2RiTnp87>]I.ZTZjT#GndjeU[b(-qQ^!">R8<-peUb-$!PNKjr-Cb+knmNRmeS[m<7,F@e:R.KYZ9`hY/lJX"UP//=qQj\"o0
%+q#"d<.\g\9gT>W_n!&"67:h<[8E$(gBjI6YhQa`G>"ChPXU7dW+!Fm,1nRb]t4R?5rR^0i6=.m,RE&[Qj0*ZaFSf`\T.'R3[#<=
%NIlQ4XN>&4.<4LuN2EF-5A=WM*-SWAae^fF)6V164%V[`Qj/ud3FE9Y`[2(aOK7lnY%$,lS[Et\N,8ANo8%Z!QWg6cIr/9=@`NHl
%h\YuNg_YM^8(.$'ceOqU4=J#MOX2a]+F4F=l:)OW/$iDgqql%tcT,"U4c:J7+:tJnVY\g7kL?'j)+1g&/Q@2@T12-7CqiE]U"eVI
%8/Plh?t:Ik00>NFp07aPi/^&QF5R^pjG(14mD?tkSTi_2@GgC83c@9QI&8($r.t`[I.XOi&5fI@JGpQd`i]6R7?AsMWJmM%Qu[JS
%8suc.bq7p'+NP$Rn$!2;O2r%6$<kStNmE5B=.]A-(tDuCg<GV+s3u[a#m1&.,A#g@>qAqH95]Q<!0Hk7n$"*jr?Bt1K%=J!,e`'g
%oeNc+U]&N.oQuLc2th;;;ZuK[?o2$FMK[6"V>X&)LeI+67X!-MF2mYsB=8$:<QMo6(hT>VMhg:,-7bNos,D;<ib!\LM.D3W8HUZ4
%1r9uC)O;gf)T`G./),oEofD?efEY>j]3&Ik!*o,'06R+]S'eCJ.=.5cs)!_`5;OoUS4YP&C74b;`3*rO<k/($<6F:>X6,-r#QS#2
%PI:qt7H3cX!,Ie#gEt;Ilhr=FqL@;J@_&`CHeb%&h8oeV=qo>QXE&TuQ87.m27JC:J06r;4Eri"dChO@SmMn!C-8$I&!?K_&l1'U
%m=I$:1ZTaek]WKskLe6NZLV1.C<AB/ol(J^r5$qL4ErhI?L=rI_qC71HX5[jPc'SeD08HT`.r?M!J.Ui5UXn[02BpJcE^B[q;<7s
%e9X(_>ig,Hh,3XW_b'dB7)8T>K18H'+%>Ck,lVmPgBD"gDLuq@\I%d68d!dc+@8!\^6'YBLP%8qj]oLEhSUf0A(t/tVc6ll)@r`0
%K:^%\EM2uD&/FUAR=Hh"5chElX<(-9eAa:bT_378L!7B_krX,L;XFNT<RE4OqP9`-eP=j&@IRmM7>TLNJ6#Z:2YXqJ<4eqA@4KF1
%HC^U^,J?>9I@ks[o]T/l8,2QB?33fKY>7sdq:,.`i@4_MdF'"J4IcCmhq&CmH4Qq/M4!i<&af%UL/kN(p5Ou1<+?RrN#./<7CH'a
%[@:[Z,/Ug1;@f\TA*Y$:dWd_P9(G`"e9KS^`te!*c;6CW8S9dT-C@POpaVZVM&)s%Vbu]k':DNT5LkE7S\r#J^nQ8*):?<Cg,,g^
%`nnHCm/hUN[#%*`h'CBCdg9G:VEdS'R0^;M]PQk?Kd\C4g*O!0A+Dp.d+J.q,+Y+!9<T`h_,1j(oUQO.eeEo?0F;2p9u8]1DOH<H
%S0A;S#>q\,o<2\8,N](@]qQ@Mi$c^g7c+ML@82:Y!66!e4s1/mO'+#n,Fda.;+Nd)H>T4&-'F+1VHYi8(GTln7.SpQo/1:ImMu<T
%6-M.@R[JG(ZntD3RT[?oXkgZPB^>Vt19JT2h#u&Qau2DWU*hPX,mD`n=,\)DH^kMc_GQ`Zln:g8fA(^bJ[GCkj(>_--gPpKrfu!D
%J2-TB,JrLM01i0L4=A.&0a0<V15ut>)H/8l<@O,sYIR(A"U*LEBCB3,IY*\;4X0*AQ_aKB3AE.F.?X]Dr<+?Vi<ijA;tN_#Lk>\h
%of@I"9%uSHBX78dd&u=RC&=gkKK'fI+<r)tT3sKYiL5,>9\[>CL:AMbJ!ea#lInIM*LYR``!Qno&XR2>lP6H\H;9D,@u=e^F?'R[
%Q?0o#pR[eUk9N")X_]@[f'D]$X4f1\cG-AR2E1UMg,6MgD?'6u(md3W3#Re]T4/BdR]LJQ]k8Z&m[>*S+95rccJH=!p+N't=n.;_
%]?]\K"k*6KN'"A:38'_u5Jr199E-*2`kRCS/S26dCMj_S!C:nU8cQpT,Gp,-1BecsW698U_\rnn0Daa3KMUu,-0@$X4KBb#>_I@7
%HNU.][Xj!GE&3Ga%eRu4>(ik'kN[2EIrts*_Wuo5NqQde0n0$,@t4?j]0MML,jteOnVi%7AV`h`cj>s+k$!\o*BZqQco6l'#Pr%q
%+9GQ5diJ(8J!K(Z2E,RX*6W&P9D*dZ+6%\kh?LV'1s'%-YUh`L\['<4q">?:C!K`\mm221]ERfK7_&U:VP9T]f1H"bO$$.hUe#=o
%*JZ]hgQtFC'4eh="7AOqp>q,$:\>#-O9>TAg%IdA.b<a`jVd"U<FchAU;iT^IIs^TF+g@C"cTHRW@UNHg/FMqWmtEVZ/_e5T&N.;
%i?H3TDa:?Q+WJ;N6^b$!8M.eYP]QLY_nX?LhOj\j>$@PD7C>W%T;(TF4q<p:*>D3G+Hi>[H`?J._W1T>HD8#E:(HE8kW!7.IjLX<
%VS$MoWiNM/QJaW7YOZEmO*+)5Fj<RrR^'1sl'R*q*>Ps[RA:a1$`>E9X3!oV_+'Q8PQ%3erY9'scn:t=4>#NYLT"nk+gk*+r,RI%
%RI#k^bHr%Q1gj$[W*GRO8F;RBKW-/j3bX1rFZ*0si_0&J!LABD4*,T$<;W3&'GBg):u8$Jm5m(H<(+Ae]9$Dp=K#JhPXt2)=G3Xt
%UH3(1rsHeCYhFqZ<A!BYNXeY(ims1sh_BU18(?n>'8QXm!Yh]7$BNA=BbW-Z7?g=tU0\f:X#])TfnfHSZi^CU`u@m))@&d@2.:ff
%W$M,?&g\m0o!L&WF[-S2!H+<l`fWu9MC=Tr7(kMQYI6'?%uPY0gFBTNDa^_@jR"M+Cf*iLmg(TR`G29e1VbSHHc_FL6uCbn4(tC=
%j``CuWsHPh[s4\gVI3PhfK2irGD>QQ9job3DN'67"se1f<mWaN#hS"(6!39b-XXt)EMCUtHCa]3m(#mV>el_OG@l=o`8nQup+.ZC
%?4801k!WH7poYnf,1F&R[DnHSCK8Mfj_Jai'3.MFcq48[Nrfsm"=*$@i!c<9mm?hI6__>er0SH%3QJ*f+9Nha'ss3ZCS5>&AVtrY
%%<8,baa0N:?]FCgB`A41aY!l_Cui3)B\.VJC-[9.\G^,WDTR]*qcD.5XDgV?Asq*H,r`c!.OXP)d_G?7b*bshXMEh;+^(\5UV^P!
%=5G,]kG=$)h3]<&&7*QfBZiEpMY.t4PkCR-L,`&lAA(b7=(WCeq^34T[d6Xkg&L*BJo)7@rMt'Kru^TPKWua(,4/`'CU1fWg@`mY
%l,]FaR9SAE(\=iU*EfS0rY>8u[!r+iajtMN]oS/#(CH.Tmm=/?Z\Vi=s,DsCgL:99"$2]_TP):D+.en](3-@sa::9"r/B]<5F'!u
%[H!GE5;2Tl0Ddt?bbq):e!T,s[KLgC]@,fLg(2A&J*X8YcuRAp'N^`o@OqZFYpR+:c0F8cIX1b%i+QJRhXWeJod;i+H,"OVY:Yd#
%5HO!5]YuS!"2$?`'@N^b?WJVlXPN&^c`$@pH6[+VFBZu#^#A'K5g?^/Y-3<,(Eo^&5!QaVqt8L_=0GR!rpn7mkmp54bHE!?QQPYQ
%IQ[Scs*=M#o(r@QjVJ09Hi3[..tEti*pSGtr`DRR3Z*`);_<Z3!1nUcfA8OS_*$'`7>i&h8an"(fAH&9IW9f/jltm!5MlG3rVcWj
%GMh1>r`IVFo(pLDkfqk1<W,-R9tqus>kcf5ja@gr")"kY5M/afGo-[s&TF?M[WrrlC;%RI:P*ogs&\7U>8m6X>YSA+%9AU4hH)A,
%:Bu->?obkYjo*$Y7P90'Pfs)BM;!8m7!QGCEh[4BIG>@4?H\@2!.-/erUod2n#ij3rcES]m+(Ft+(*j=]t++7o'lSQ%QsXNp>+j-
%LYMS'\ia5)^&)pKn&sthrr1s<mGm<+rP)+r*\O)Y)g+/hqXNUl"Xt8HJnNEDqV0WR=8r<bqWAI~>
%AI9_PrivateDataEnd
